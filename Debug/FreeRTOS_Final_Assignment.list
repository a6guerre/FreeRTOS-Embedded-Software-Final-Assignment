
FreeRTOS_Final_Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000925c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080093ec  080093ec  000193ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009840  08009840  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009840  08009840  00019840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009848  08009848  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009848  08009848  00019848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800984c  0800984c  0001984c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009850  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000274c  20000074  080098c4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027c0  080098c4  000227c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023180  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000431f  00000000  00000000  00043224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bf0  00000000  00000000  00047548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a58  00000000  00000000  00049138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af07  00000000  00000000  0004ab90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001df43  00000000  00000000  00075a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00111248  00000000  00000000  000939da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a4c22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a70  00000000  00000000  001a4c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093d4 	.word	0x080093d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080093d4 	.word	0x080093d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	4a07      	ldr	r2, [pc, #28]	; (80005a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000588:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	4a06      	ldr	r2, [pc, #24]	; (80005a8 <vApplicationGetIdleTaskMemory+0x30>)
 800058e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2280      	movs	r2, #128	; 0x80
 8000594:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000090 	.word	0x20000090
 80005a8:	200000e4 	.word	0x200000e4

080005ac <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetTimerTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ca:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr
 80005d8:	200002e4 	.word	0x200002e4
 80005dc:	20000338 	.word	0x20000338

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b0c0      	sub	sp, #256	; 0x100
 80005e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e6:	f001 f906 	bl	80017f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ea:	f000 f943 	bl	8000874 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ee:	f000 faad 	bl	8000b4c <MX_GPIO_Init>
  MX_SPI1_Init();
 80005f2:	f000 f9fd 	bl	80009f0 <MX_SPI1_Init>
  MX_UART4_Init();
 80005f6:	f000 fa41 	bl	8000a7c <MX_UART4_Init>
  MX_USART1_UART_Init();
 80005fa:	f000 fa77 	bl	8000aec <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005fe:	f000 f97f 	bl	8000900 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  Nokia_Reset();
 8000602:	f000 fd7f 	bl	8001104 <Nokia_Reset>
  Nokia_Config(hspi1.Instance);
 8000606:	4b81      	ldr	r3, [pc, #516]	; (800080c <main+0x22c>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 fdc1 	bl	8001192 <Nokia_Config>
  Clear_Display(hspi1.Instance);
 8000610:	4b7e      	ldr	r3, [pc, #504]	; (800080c <main+0x22c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4618      	mov	r0, r3
 8000616:	f000 fd4c 	bl	80010b2 <Clear_Display>
  Nokia5110_SetCursor(hspi1.Instance, 0, 0);
 800061a:	4b7c      	ldr	r3, [pc, #496]	; (800080c <main+0x22c>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	2200      	movs	r2, #0
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fd1e 	bl	8001064 <Nokia5110_SetCursor>
  Nokia5110_OutString(hspi1.Instance, "Hello");
 8000628:	4b78      	ldr	r3, [pc, #480]	; (800080c <main+0x22c>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4978      	ldr	r1, [pc, #480]	; (8000810 <main+0x230>)
 800062e:	4618      	mov	r0, r3
 8000630:	f000 fde1 	bl	80011f6 <Nokia5110_OutString>
  evtGroup = xEventGroupCreate();
 8000634:	f005 f87a 	bl	800572c <xEventGroupCreate>
 8000638:	4603      	mov	r3, r0
 800063a:	4a76      	ldr	r2, [pc, #472]	; (8000814 <main+0x234>)
 800063c:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of lcdMutex */
  osMutexDef(lcdMutex);
 800063e:	2300      	movs	r3, #0
 8000640:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000644:	2300      	movs	r3, #0
 8000646:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  lcdMutexHandle = osMutexCreate(osMutex(lcdMutex));
 800064a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800064e:	4618      	mov	r0, r3
 8000650:	f005 f822 	bl	8005698 <osMutexCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a70      	ldr	r2, [pc, #448]	; (8000818 <main+0x238>)
 8000658:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of isrSemaphore */
  osSemaphoreDef(isrSemaphore);
 800065a:	2300      	movs	r3, #0
 800065c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8000660:	2300      	movs	r3, #0
 8000662:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  isrSemaphoreHandle = osSemaphoreCreate(osSemaphore(isrSemaphore), 1);
 8000666:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800066a:	2101      	movs	r1, #1
 800066c:	4618      	mov	r0, r3
 800066e:	f005 f82b 	bl	80056c8 <osSemaphoreCreate>
 8000672:	4603      	mov	r3, r0
 8000674:	4a69      	ldr	r2, [pc, #420]	; (800081c <main+0x23c>)
 8000676:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of oneShotTimer */
  osTimerDef(oneShotTimer, Callback01);
 8000678:	4b69      	ldr	r3, [pc, #420]	; (8000820 <main+0x240>)
 800067a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  oneShotTimerHandle = osTimerCreate(osTimer(oneShotTimer), osTimerOnce, NULL);
 8000684:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f004 ff8b 	bl	80055a8 <osTimerCreate>
 8000692:	4603      	mov	r3, r0
 8000694:	4a63      	ldr	r2, [pc, #396]	; (8000824 <main+0x244>)
 8000696:	6013      	str	r3, [r2, #0]

  /* definition and creation of periodicTimer */
  osTimerDef(periodicTimer, Callback02);
 8000698:	4b63      	ldr	r3, [pc, #396]	; (8000828 <main+0x248>)
 800069a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800069e:	2300      	movs	r3, #0
 80006a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  periodicTimerHandle = osTimerCreate(osTimer(periodicTimer), osTimerPeriodic, NULL);
 80006a4:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80006a8:	2200      	movs	r2, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	4618      	mov	r0, r3
 80006ae:	f004 ff7b 	bl	80055a8 <osTimerCreate>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a5d      	ldr	r2, [pc, #372]	; (800082c <main+0x24c>)
 80006b6:	6013      	str	r3, [r2, #0]
  osTimerStart(periodicTimerHandle, 1000);
 80006b8:	4b5c      	ldr	r3, [pc, #368]	; (800082c <main+0x24c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 ffa5 	bl	8005610 <osTimerStart>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  pingQueue = xQueueCreate(3, sizeof(cmd_type));
 80006c6:	2200      	movs	r2, #0
 80006c8:	2101      	movs	r1, #1
 80006ca:	2003      	movs	r0, #3
 80006cc:	f005 fb58 	bl	8005d80 <xQueueGenericCreate>
 80006d0:	4603      	mov	r3, r0
 80006d2:	4a57      	ldr	r2, [pc, #348]	; (8000830 <main+0x250>)
 80006d4:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of LCD_Task */
  osThreadDef(LCD_Task, LCDTask1, osPriorityAboveNormal, 0, 128);
 80006d6:	4b57      	ldr	r3, [pc, #348]	; (8000834 <main+0x254>)
 80006d8:	f107 04c4 	add.w	r4, r7, #196	; 0xc4
 80006dc:	461d      	mov	r5, r3
 80006de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_TaskHandle = osThreadCreate(osThread(LCD_Task), NULL);
 80006ea:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f004 fef9 	bl	80054e8 <osThreadCreate>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a4f      	ldr	r2, [pc, #316]	; (8000838 <main+0x258>)
 80006fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of LED_TASK_1 */
  osThreadDef(LED_TASK_1, ledTask1, osPriorityNormal, 0, 128);
 80006fc:	4b4f      	ldr	r3, [pc, #316]	; (800083c <main+0x25c>)
 80006fe:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000702:	461d      	mov	r5, r3
 8000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000708:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800070c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LED_TASK_1Handle = osThreadCreate(osThread(LED_TASK_1), NULL);
 8000710:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fee6 	bl	80054e8 <osThreadCreate>
 800071c:	4603      	mov	r3, r0
 800071e:	4a48      	ldr	r2, [pc, #288]	; (8000840 <main+0x260>)
 8000720:	6013      	str	r3, [r2, #0]

  /* definition and creation of LCD_Task_2 */
  osThreadDef(LCD_Task_2, LCDTask2, osPriorityAboveNormal, 0, 128);
 8000722:	4b48      	ldr	r3, [pc, #288]	; (8000844 <main+0x264>)
 8000724:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000728:	461d      	mov	r5, r3
 800072a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800072c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000732:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LCD_Task_2Handle = osThreadCreate(osThread(LCD_Task_2), NULL);
 8000736:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f004 fed3 	bl	80054e8 <osThreadCreate>
 8000742:	4603      	mov	r3, r0
 8000744:	4a40      	ldr	r2, [pc, #256]	; (8000848 <main+0x268>)
 8000746:	6013      	str	r3, [r2, #0]

  /* definition and creation of PING_TASK */
  osThreadDef(PING_TASK, StartTask04, osPriorityNormal, 0, 128);
 8000748:	4b40      	ldr	r3, [pc, #256]	; (800084c <main+0x26c>)
 800074a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800074e:	461d      	mov	r5, r3
 8000750:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000752:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000754:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000758:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PING_TASKHandle = osThreadCreate(osThread(PING_TASK), NULL);
 800075c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f004 fec0 	bl	80054e8 <osThreadCreate>
 8000768:	4603      	mov	r3, r0
 800076a:	4a39      	ldr	r2, [pc, #228]	; (8000850 <main+0x270>)
 800076c:	6013      	str	r3, [r2, #0]

  /* definition and creation of PING_TASK_2 */
  osThreadDef(PING_TASK_2, StartTask05, osPriorityAboveNormal, 0, 128);
 800076e:	4b39      	ldr	r3, [pc, #228]	; (8000854 <main+0x274>)
 8000770:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000774:	461d      	mov	r5, r3
 8000776:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000778:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800077a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PING_TASK_2Handle = osThreadCreate(osThread(PING_TASK_2), NULL);
 8000782:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f004 fead 	bl	80054e8 <osThreadCreate>
 800078e:	4603      	mov	r3, r0
 8000790:	4a31      	ldr	r2, [pc, #196]	; (8000858 <main+0x278>)
 8000792:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  osThreadDef(EVT_GROUP_TASK_1, evtGroupSetter1, osPriorityBelowNormal, 0, 128);
 8000794:	4b31      	ldr	r3, [pc, #196]	; (800085c <main+0x27c>)
 8000796:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800079a:	461d      	mov	r5, r3
 800079c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EVT_GROUP_1Handle = osThreadCreate(osThread(EVT_GROUP_TASK_1), NULL);
 80007a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fe9a 	bl	80054e8 <osThreadCreate>
 80007b4:	4603      	mov	r3, r0
 80007b6:	4a2a      	ldr	r2, [pc, #168]	; (8000860 <main+0x280>)
 80007b8:	6013      	str	r3, [r2, #0]

  osThreadDef(EVT_GROUP_TASK_2, evtGroupSetter2, osPriorityBelowNormal, 0, 128);
 80007ba:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <main+0x284>)
 80007bc:	f107 041c 	add.w	r4, r7, #28
 80007c0:	461d      	mov	r5, r3
 80007c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EVT_GROUP_2Handle = osThreadCreate(osThread(EVT_GROUP_TASK_2), NULL);
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f004 fe87 	bl	80054e8 <osThreadCreate>
 80007da:	4603      	mov	r3, r0
 80007dc:	4a22      	ldr	r2, [pc, #136]	; (8000868 <main+0x288>)
 80007de:	6013      	str	r3, [r2, #0]

  osThreadDef(EVT_GROUP_TASK_3, evtGroupWaiter, osPriorityBelowNormal, 0, 128);
 80007e0:	463b      	mov	r3, r7
 80007e2:	4a22      	ldr	r2, [pc, #136]	; (800086c <main+0x28c>)
 80007e4:	461c      	mov	r4, r3
 80007e6:	4615      	mov	r5, r2
 80007e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EVT_GROUP_3Handle = osThreadCreate(osThread(EVT_GROUP_TASK_3), NULL);
 80007f4:	463b      	mov	r3, r7
 80007f6:	2100      	movs	r1, #0
 80007f8:	4618      	mov	r0, r3
 80007fa:	f004 fe75 	bl	80054e8 <osThreadCreate>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a1b      	ldr	r2, [pc, #108]	; (8000870 <main+0x290>)
 8000802:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000804:	f004 fe69 	bl	80054da <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000808:	e7fe      	b.n	8000808 <main+0x228>
 800080a:	bf00      	nop
 800080c:	200026b4 	.word	0x200026b4
 8000810:	08009464 	.word	0x08009464
 8000814:	20002514 	.word	0x20002514
 8000818:	20002518 	.word	0x20002518
 800081c:	20002718 	.word	0x20002718
 8000820:	08000f99 	.word	0x08000f99
 8000824:	2000262c 	.word	0x2000262c
 8000828:	08000fb5 	.word	0x08000fb5
 800082c:	2000271c 	.word	0x2000271c
 8000830:	20002620 	.word	0x20002620
 8000834:	0800946c 	.word	0x0800946c
 8000838:	20002528 	.word	0x20002528
 800083c:	08009488 	.word	0x08009488
 8000840:	20002524 	.word	0x20002524
 8000844:	080094a4 	.word	0x080094a4
 8000848:	20002590 	.word	0x20002590
 800084c:	080094c0 	.word	0x080094c0
 8000850:	20002520 	.word	0x20002520
 8000854:	080094dc 	.word	0x080094dc
 8000858:	20002618 	.word	0x20002618
 800085c:	080094f8 	.word	0x080094f8
 8000860:	2000251c 	.word	0x2000251c
 8000864:	08009514 	.word	0x08009514
 8000868:	20002624 	.word	0x20002624
 800086c:	08009530 	.word	0x08009530
 8000870:	2000261c 	.word	0x2000261c

08000874 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b096      	sub	sp, #88	; 0x58
 8000878:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2244      	movs	r2, #68	; 0x44
 8000880:	2100      	movs	r1, #0
 8000882:	4618      	mov	r0, r3
 8000884:	f008 f96a 	bl	8008b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]
 8000890:	609a      	str	r2, [r3, #8]
 8000892:	60da      	str	r2, [r3, #12]
 8000894:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000896:	f44f 7000 	mov.w	r0, #512	; 0x200
 800089a:	f002 fa7d 	bl	8002d98 <HAL_PWREx_ControlVoltageScaling>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008a4:	f000 fbae 	bl	8001004 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80008a8:	2310      	movs	r3, #16
 80008aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008ac:	2301      	movs	r3, #1
 80008ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008b4:	2360      	movs	r3, #96	; 0x60
 80008b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fabf 	bl	8002e44 <HAL_RCC_OscConfig>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80008cc:	f000 fb9a 	bl	8001004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d0:	230f      	movs	r3, #15
 80008d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d8:	2300      	movs	r3, #0
 80008da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	2100      	movs	r1, #0
 80008e8:	4618      	mov	r0, r3
 80008ea:	f002 fe91 	bl	8003610 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80008f4:	f000 fb86 	bl	8001004 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3758      	adds	r7, #88	; 0x58
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
 8000920:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000922:	4b30      	ldr	r3, [pc, #192]	; (80009e4 <MX_ADC1_Init+0xe4>)
 8000924:	4a30      	ldr	r2, [pc, #192]	; (80009e8 <MX_ADC1_Init+0xe8>)
 8000926:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000928:	4b2e      	ldr	r3, [pc, #184]	; (80009e4 <MX_ADC1_Init+0xe4>)
 800092a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800092e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000930:	4b2c      	ldr	r3, [pc, #176]	; (80009e4 <MX_ADC1_Init+0xe4>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000936:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <MX_ADC1_Init+0xe4>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <MX_ADC1_Init+0xe4>)
 800093e:	2200      	movs	r2, #0
 8000940:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000942:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <MX_ADC1_Init+0xe4>)
 8000944:	2204      	movs	r2, #4
 8000946:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000948:	4b26      	ldr	r3, [pc, #152]	; (80009e4 <MX_ADC1_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800094e:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <MX_ADC1_Init+0xe4>)
 8000950:	2200      	movs	r2, #0
 8000952:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000954:	4b23      	ldr	r3, [pc, #140]	; (80009e4 <MX_ADC1_Init+0xe4>)
 8000956:	2201      	movs	r2, #1
 8000958:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800095a:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_ADC1_Init+0xe4>)
 800095c:	2200      	movs	r2, #0
 800095e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000962:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_ADC1_Init+0xe4>)
 8000964:	2200      	movs	r2, #0
 8000966:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000968:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <MX_ADC1_Init+0xe4>)
 800096a:	2200      	movs	r2, #0
 800096c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <MX_ADC1_Init+0xe4>)
 8000970:	2200      	movs	r2, #0
 8000972:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000976:	4b1b      	ldr	r3, [pc, #108]	; (80009e4 <MX_ADC1_Init+0xe4>)
 8000978:	2200      	movs	r2, #0
 800097a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800097c:	4b19      	ldr	r3, [pc, #100]	; (80009e4 <MX_ADC1_Init+0xe4>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000984:	4817      	ldr	r0, [pc, #92]	; (80009e4 <MX_ADC1_Init+0xe4>)
 8000986:	f001 f8fb 	bl	8001b80 <HAL_ADC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000990:	f000 fb38 	bl	8001004 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000998:	f107 031c 	add.w	r3, r7, #28
 800099c:	4619      	mov	r1, r3
 800099e:	4811      	ldr	r0, [pc, #68]	; (80009e4 <MX_ADC1_Init+0xe4>)
 80009a0:	f001 fe5a 	bl	8002658 <HAL_ADCEx_MultiModeConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80009aa:	f000 fb2b 	bl	8001004 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_ADC1_Init+0xec>)
 80009b0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009b2:	2306      	movs	r3, #6
 80009b4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009ba:	237f      	movs	r3, #127	; 0x7f
 80009bc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009be:	2304      	movs	r3, #4
 80009c0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4619      	mov	r1, r3
 80009ca:	4806      	ldr	r0, [pc, #24]	; (80009e4 <MX_ADC1_Init+0xe4>)
 80009cc:	f001 fa2e 	bl	8001e2c <HAL_ADC_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_ADC1_Init+0xda>
  {
    Error_Handler();
 80009d6:	f000 fb15 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	3728      	adds	r7, #40	; 0x28
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	2000252c 	.word	0x2000252c
 80009e8:	50040000 	.word	0x50040000
 80009ec:	08600004 	.word	0x08600004

080009f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009f4:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <MX_SPI1_Init+0x84>)
 80009f6:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <MX_SPI1_Init+0x88>)
 80009f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <MX_SPI1_Init+0x84>)
 80009fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a02:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a08:	4b1a      	ldr	r3, [pc, #104]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a0e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a16:	4b17      	ldr	r3, [pc, #92]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a1e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a22:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a2a:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a30:	4b10      	ldr	r3, [pc, #64]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a36:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a3e:	2207      	movs	r2, #7
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a42:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a48:	4b0a      	ldr	r3, [pc, #40]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a4a:	2208      	movs	r2, #8
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a4e:	4809      	ldr	r0, [pc, #36]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a50:	f003 fcd2 	bl	80043f8 <HAL_SPI_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 fad3 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <MX_SPI1_Init+0x84>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a6c:	601a      	str	r2, [r3, #0]
  /* USER CODE END SPI1_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200026b4 	.word	0x200026b4
 8000a78:	40013000 	.word	0x40013000

08000a7c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <MX_UART4_Init+0x6c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000abe:	4809      	ldr	r0, [pc, #36]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000ac0:	f004 f80e 	bl	8004ae0 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000aca:	f000 fa9b 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */
  __HAL_UART_ENABLE(&huart4);
 8000ace:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b03      	ldr	r3, [pc, #12]	; (8000ae4 <MX_UART4_Init+0x68>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f042 0201 	orr.w	r2, r2, #1
 8000adc:	601a      	str	r2, [r3, #0]
  /* USER CODE END UART4_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20002630 	.word	0x20002630
 8000ae8:	40004c00 	.word	0x40004c00

08000aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <MX_USART1_UART_Init+0x5c>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b30:	f003 ffd6 	bl	8004ae0 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 fa63 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20002594 	.word	0x20002594
 8000b48:	40013800 	.word	0x40013800

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	2200      	movs	r2, #0
 8000b58:	601a      	str	r2, [r3, #0]
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	609a      	str	r2, [r3, #8]
 8000b5e:	60da      	str	r2, [r3, #12]
 8000b60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	4b53      	ldr	r3, [pc, #332]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	4a52      	ldr	r2, [pc, #328]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b6e:	4b50      	ldr	r3, [pc, #320]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	f003 0304 	and.w	r3, r3, #4
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b4d      	ldr	r3, [pc, #308]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	4a4c      	ldr	r2, [pc, #304]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b86:	4b4a      	ldr	r3, [pc, #296]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b47      	ldr	r3, [pc, #284]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a46      	ldr	r2, [pc, #280]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000b98:	f043 0302 	orr.w	r3, r3, #2
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b44      	ldr	r3, [pc, #272]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0302 	and.w	r3, r3, #2
 8000ba6:	60bb      	str	r3, [r7, #8]
 8000ba8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000baa:	4b41      	ldr	r3, [pc, #260]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a40      	ldr	r2, [pc, #256]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bb0:	f043 0308 	orr.w	r3, r3, #8
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b3e      	ldr	r3, [pc, #248]	; (8000cb0 <MX_GPIO_Init+0x164>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0308 	and.w	r3, r3, #8
 8000bbe:	607b      	str	r3, [r7, #4]
 8000bc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ISR_LED_Pin|QUEUE_LED2_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f248 0108 	movw	r1, #32776	; 0x8008
 8000bc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bcc:	f002 f880 	bl	8002cd0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, QUEUE_LED2_Pin, GPIO_PIN_SET);
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bda:	f002 f879 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8000bde:	2200      	movs	r2, #0
 8000be0:	f244 0117 	movw	r1, #16407	; 0x4017
 8000be4:	4833      	ldr	r0, [pc, #204]	; (8000cb4 <MX_GPIO_Init+0x168>)
 8000be6:	f002 f873 	bl	8002cd0 <HAL_GPIO_WritePin>
                          |QUEUE_LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf0:	4831      	ldr	r0, [pc, #196]	; (8000cb8 <MX_GPIO_Init+0x16c>)
 8000bf2:	f002 f86d 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bfc:	482f      	ldr	r0, [pc, #188]	; (8000cbc <MX_GPIO_Init+0x170>)
 8000bfe:	f002 f867 	bl	8002cd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c08:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <MX_GPIO_Init+0x174>)
 8000c0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4829      	ldr	r0, [pc, #164]	; (8000cbc <MX_GPIO_Init+0x170>)
 8000c18:	f001 feb0 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : ISR_LED_Pin QUEUE_LED2_Pin */
  GPIO_InitStruct.Pin = ISR_LED_Pin|QUEUE_LED2_Pin;
 8000c1c:	f248 0308 	movw	r3, #32776	; 0x8008
 8000c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	4619      	mov	r1, r3
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f001 fea0 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB14
                           QUEUE_LED1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14
 8000c3c:	f244 0317 	movw	r3, #16407	; 0x4017
 8000c40:	617b      	str	r3, [r7, #20]
                          |QUEUE_LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4817      	ldr	r0, [pc, #92]	; (8000cb4 <MX_GPIO_Init+0x168>)
 8000c56:	f001 fe91 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c5a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c60:	2301      	movs	r3, #1
 8000c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	4619      	mov	r1, r3
 8000c72:	4811      	ldr	r0, [pc, #68]	; (8000cb8 <MX_GPIO_Init+0x16c>)
 8000c74:	f001 fe82 	bl	800297c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c86:	2300      	movs	r3, #0
 8000c88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 0314 	add.w	r3, r7, #20
 8000c8e:	4619      	mov	r1, r3
 8000c90:	480a      	ldr	r0, [pc, #40]	; (8000cbc <MX_GPIO_Init+0x170>)
 8000c92:	f001 fe73 	bl	800297c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2105      	movs	r1, #5
 8000c9a:	2028      	movs	r0, #40	; 0x28
 8000c9c:	f001 fe44 	bl	8002928 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ca0:	2028      	movs	r0, #40	; 0x28
 8000ca2:	f001 fe5d 	bl	8002960 <HAL_NVIC_EnableIRQ>

}
 8000ca6:	bf00      	nop
 8000ca8:	3728      	adds	r7, #40	; 0x28
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40021000 	.word	0x40021000
 8000cb4:	48000400 	.word	0x48000400
 8000cb8:	48000c00 	.word	0x48000c00
 8000cbc:	48000800 	.word	0x48000800
 8000cc0:	10110000 	.word	0x10110000

08000cc4 <evtGroupSetter1>:

/* USER CODE BEGIN 4 */
void evtGroupSetter1(void const * argument)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b090      	sub	sp, #64	; 0x40
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  char buf[50];
  for(;;)
  {
    snprintf(buf, sizeof(buf), "Event Task Setting Bit 0: \r\n");
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4a0e      	ldr	r2, [pc, #56]	; (8000d0c <evtGroupSetter1+0x48>)
 8000cd2:	2132      	movs	r1, #50	; 0x32
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f007 ff49 	bl	8008b6c <sniprintf>
	HAL_UART_Transmit(&huart4, (uint8_t  *)buf, strlen(buf), 1000);
 8000cda:	f107 030c 	add.w	r3, r7, #12
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fa76 	bl	80001d0 <strlen>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	b29a      	uxth	r2, r3
 8000ce8:	f107 010c 	add.w	r1, r7, #12
 8000cec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cf0:	4807      	ldr	r0, [pc, #28]	; (8000d10 <evtGroupSetter1+0x4c>)
 8000cf2:	f003 ff43 	bl	8004b7c <HAL_UART_Transmit>
	xEventGroupSetBits(evtGroup, 0x01);
 8000cf6:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <evtGroupSetter1+0x50>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fdfd 	bl	80058fc <xEventGroupSetBits>
	osDelay(1000);
 8000d02:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d06:	f004 fc3b 	bl	8005580 <osDelay>
  {
 8000d0a:	e7df      	b.n	8000ccc <evtGroupSetter1+0x8>
 8000d0c:	0800954c 	.word	0x0800954c
 8000d10:	20002630 	.word	0x20002630
 8000d14:	20002514 	.word	0x20002514

08000d18 <evtGroupSetter2>:
  }
}
void evtGroupSetter2(void const * argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b090      	sub	sp, #64	; 0x40
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  char buf[50];
  for(;;)
  {
    snprintf(buf, sizeof(buf), "Event Task Setting Bit 1: \r\n");
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4a0e      	ldr	r2, [pc, #56]	; (8000d60 <evtGroupSetter2+0x48>)
 8000d26:	2132      	movs	r1, #50	; 0x32
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f007 ff1f 	bl	8008b6c <sniprintf>
	HAL_UART_Transmit(&huart4, (uint8_t  *)buf, strlen(buf), 1000);
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fa4c 	bl	80001d0 <strlen>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	f107 010c 	add.w	r1, r7, #12
 8000d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d44:	4807      	ldr	r0, [pc, #28]	; (8000d64 <evtGroupSetter2+0x4c>)
 8000d46:	f003 ff19 	bl	8004b7c <HAL_UART_Transmit>
	xEventGroupSetBits(evtGroup, 0x02);
 8000d4a:	4b07      	ldr	r3, [pc, #28]	; (8000d68 <evtGroupSetter2+0x50>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	2102      	movs	r1, #2
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 fdd3 	bl	80058fc <xEventGroupSetBits>
	osDelay(2000);
 8000d56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d5a:	f004 fc11 	bl	8005580 <osDelay>
  {
 8000d5e:	e7df      	b.n	8000d20 <evtGroupSetter2+0x8>
 8000d60:	0800956c 	.word	0x0800956c
 8000d64:	20002630 	.word	0x20002630
 8000d68:	20002514 	.word	0x20002514

08000d6c <evtGroupWaiter>:
  }
}
void evtGroupWaiter(void const * argument)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b092      	sub	sp, #72	; 0x48
 8000d70:	af02      	add	r7, sp, #8
 8000d72:	6078      	str	r0, [r7, #4]
  char buf[50];
  for(;;)
  {
    xEventGroupWaitBits(evtGroup,
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <evtGroupWaiter+0x48>)
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	f04f 33ff 	mov.w	r3, #4294967295
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	2201      	movs	r2, #1
 8000d82:	2103      	movs	r1, #3
 8000d84:	f004 fcec 	bl	8005760 <xEventGroupWaitBits>
      0x03,
      pdTRUE,
      pdTRUE,
	  portMAX_DELAY );
    snprintf(buf, sizeof(buf), "Event Waiting Task Unblocked \r\n");
 8000d88:	f107 030c 	add.w	r3, r7, #12
 8000d8c:	4a0a      	ldr	r2, [pc, #40]	; (8000db8 <evtGroupWaiter+0x4c>)
 8000d8e:	2132      	movs	r1, #50	; 0x32
 8000d90:	4618      	mov	r0, r3
 8000d92:	f007 feeb 	bl	8008b6c <sniprintf>
	HAL_UART_Transmit(&huart4, (uint8_t  *)buf, strlen(buf), 1000);
 8000d96:	f107 030c 	add.w	r3, r7, #12
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f7ff fa18 	bl	80001d0 <strlen>
 8000da0:	4603      	mov	r3, r0
 8000da2:	b29a      	uxth	r2, r3
 8000da4:	f107 010c 	add.w	r1, r7, #12
 8000da8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <evtGroupWaiter+0x50>)
 8000dae:	f003 fee5 	bl	8004b7c <HAL_UART_Transmit>
  {
 8000db2:	e7df      	b.n	8000d74 <evtGroupWaiter+0x8>
 8000db4:	20002514 	.word	0x20002514
 8000db8:	0800958c 	.word	0x0800958c
 8000dbc:	20002630 	.word	0x20002630

08000dc0 <LCDTask2>:
  * @param  argument: Not used
  * @retval None
  */

void LCDTask2(void const * argument)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	osDelay(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f004 fbd8 	bl	8005580 <osDelay>
    xSemaphoreTake(lcdMutexHandle, portMAX_DELAY);
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <LCDTask2+0x70>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f005 faf1 	bl	80063c0 <xQueueSemaphoreTake>
    Nokia5110_SetCursor(hspi1.Instance, 0, lcd_count);
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <LCDTask2+0x74>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a15      	ldr	r2, [pc, #84]	; (8000e38 <LCDTask2+0x78>)
 8000de4:	6812      	ldr	r2, [r2, #0]
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 f93a 	bl	8001064 <Nokia5110_SetCursor>
    Nokia5110_OutString(hspi1.Instance, "Task 2:Hi ");
 8000df0:	4b10      	ldr	r3, [pc, #64]	; (8000e34 <LCDTask2+0x74>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4911      	ldr	r1, [pc, #68]	; (8000e3c <LCDTask2+0x7c>)
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f9fd 	bl	80011f6 <Nokia5110_OutString>
	++lcd_count;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <LCDTask2+0x78>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <LCDTask2+0x78>)
 8000e04:	6013      	str	r3, [r2, #0]
	if(lcd_count == 7)
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <LCDTask2+0x78>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	d107      	bne.n	8000e1e <LCDTask2+0x5e>
	{
	  Clear_Display(hspi1.Instance);
 8000e0e:	4b09      	ldr	r3, [pc, #36]	; (8000e34 <LCDTask2+0x74>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f94d 	bl	80010b2 <Clear_Display>
      lcd_count = 0;
 8000e18:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <LCDTask2+0x78>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
	}
	xSemaphoreGive(lcdMutexHandle);
 8000e1e:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <LCDTask2+0x70>)
 8000e20:	6818      	ldr	r0, [r3, #0]
 8000e22:	2300      	movs	r3, #0
 8000e24:	2200      	movs	r2, #0
 8000e26:	2100      	movs	r1, #0
 8000e28:	f005 f850 	bl	8005ecc <xQueueGenericSend>
	osDelay(1000);
 8000e2c:	e7cc      	b.n	8000dc8 <LCDTask2+0x8>
 8000e2e:	bf00      	nop
 8000e30:	20002518 	.word	0x20002518
 8000e34:	200026b4 	.word	0x200026b4
 8000e38:	20002628 	.word	0x20002628
 8000e3c:	080095ac 	.word	0x080095ac

08000e40 <LCDTask1>:
  }
}

/* USER CODE END Header_StartDefaultTask */
void LCDTask1(void const * argument)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    xSemaphoreTake(lcdMutexHandle, portMAX_DELAY);
 8000e48:	4b19      	ldr	r3, [pc, #100]	; (8000eb0 <LCDTask1+0x70>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e50:	4618      	mov	r0, r3
 8000e52:	f005 fab5 	bl	80063c0 <xQueueSemaphoreTake>
    Nokia5110_SetCursor(hspi1.Instance, 0, lcd_count);
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <LCDTask1+0x74>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a17      	ldr	r2, [pc, #92]	; (8000eb8 <LCDTask1+0x78>)
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f000 f8fe 	bl	8001064 <Nokia5110_SetCursor>
    Nokia5110_OutString(hspi1.Instance, "Task 1:Hello");
 8000e68:	4b12      	ldr	r3, [pc, #72]	; (8000eb4 <LCDTask1+0x74>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4913      	ldr	r1, [pc, #76]	; (8000ebc <LCDTask1+0x7c>)
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f000 f9c1 	bl	80011f6 <Nokia5110_OutString>
    ++lcd_count;
 8000e74:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <LCDTask1+0x78>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <LCDTask1+0x78>)
 8000e7c:	6013      	str	r3, [r2, #0]
    if(lcd_count == 7)
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <LCDTask1+0x78>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2b07      	cmp	r3, #7
 8000e84:	d107      	bne.n	8000e96 <LCDTask1+0x56>
    {
      Clear_Display(hspi1.Instance);
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <LCDTask1+0x74>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 f911 	bl	80010b2 <Clear_Display>
   	  lcd_count = 0;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <LCDTask1+0x78>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
    }
    xSemaphoreGive(lcdMutexHandle);
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <LCDTask1+0x70>)
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	f005 f814 	bl	8005ecc <xQueueGenericSend>
	osDelay(1000);
 8000ea4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea8:	f004 fb6a 	bl	8005580 <osDelay>
    xSemaphoreTake(lcdMutexHandle, portMAX_DELAY);
 8000eac:	e7cc      	b.n	8000e48 <LCDTask1+0x8>
 8000eae:	bf00      	nop
 8000eb0:	20002518 	.word	0x20002518
 8000eb4:	200026b4 	.word	0x200026b4
 8000eb8:	20002628 	.word	0x20002628
 8000ebc:	080095b8 	.word	0x080095b8

08000ec0 <ledTask1>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ledTask1 */
void ledTask1(void const * argument)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ledTask1 */
  /* Infinite loop */
  for(;;)
  {
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14|GPIO_PIN_1);
 8000ec8:	f244 0102 	movw	r1, #16386	; 0x4002
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <ledTask1+0x1c>)
 8000ece:	f001 ff17 	bl	8002d00 <HAL_GPIO_TogglePin>
    osDelay(500);
 8000ed2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ed6:	f004 fb53 	bl	8005580 <osDelay>
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14|GPIO_PIN_1);
 8000eda:	e7f5      	b.n	8000ec8 <ledTask1+0x8>
 8000edc:	48000400 	.word	0x48000400

08000ee0 <StartTask04>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask04 */
void StartTask04(void const * argument)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask04 */
  /* Infinite loop */
  cmd_type cmdToQueue = PING;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	73fb      	strb	r3, [r7, #15]
  cmd_type recvCmd;
  for(;;)
  {
    /* Should not delay becasue queue will never be full */
	xQueueSend(pingQueue, &cmdToQueue, 0);
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <StartTask04+0x4c>)
 8000eee:	6818      	ldr	r0, [r3, #0]
 8000ef0:	f107 010f 	add.w	r1, r7, #15
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	f004 ffe8 	bl	8005ecc <xQueueGenericSend>
	xQueueReceive(pingQueue, &recvCmd, portMAX_DELAY);
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <StartTask04+0x4c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f107 010e 	add.w	r1, r7, #14
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 f979 	bl	8006200 <xQueueReceive>
	if(recvCmd == PONG)
 8000f0e:	7bbb      	ldrb	r3, [r7, #14]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d1eb      	bne.n	8000eec <StartTask04+0xc>
	{
      HAL_GPIO_TogglePin(GPIOA, QUEUE_LED2_Pin);
 8000f14:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f001 fef0 	bl	8002d00 <HAL_GPIO_TogglePin>
      osDelay(500);
 8000f20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f24:	f004 fb2c 	bl	8005580 <osDelay>
	xQueueSend(pingQueue, &cmdToQueue, 0);
 8000f28:	e7e0      	b.n	8000eec <StartTask04+0xc>
 8000f2a:	bf00      	nop
 8000f2c:	20002620 	.word	0x20002620

08000f30 <StartTask05>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask05 */
void StartTask05(void const * argument)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask05 */
  cmd_type cmdToQueue = PONG;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	73fb      	strb	r3, [r7, #15]
  cmd_type recvCmd;
  /* Infinite loop */
  for(;;)
  {
	xQueueReceive(pingQueue, &recvCmd, portMAX_DELAY);
 8000f3c:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <StartTask05+0x60>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f107 010e 	add.w	r1, r7, #14
 8000f44:	f04f 32ff 	mov.w	r2, #4294967295
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f005 f959 	bl	8006200 <xQueueReceive>
	if(recvCmd == PING)
 8000f4e:	7bbb      	ldrb	r3, [r7, #14]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d110      	bne.n	8000f76 <StartTask05+0x46>
	{
	  HAL_GPIO_TogglePin(GPIOB, QUEUE_LED1_Pin);
 8000f54:	2110      	movs	r1, #16
 8000f56:	480f      	ldr	r0, [pc, #60]	; (8000f94 <StartTask05+0x64>)
 8000f58:	f001 fed2 	bl	8002d00 <HAL_GPIO_TogglePin>
	  xQueueSend(pingQueue, &cmdToQueue, 0);
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <StartTask05+0x60>)
 8000f5e:	6818      	ldr	r0, [r3, #0]
 8000f60:	f107 010f 	add.w	r1, r7, #15
 8000f64:	2300      	movs	r3, #0
 8000f66:	2200      	movs	r2, #0
 8000f68:	f004 ffb0 	bl	8005ecc <xQueueGenericSend>
	  osDelay(500);
 8000f6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f70:	f004 fb06 	bl	8005580 <osDelay>
 8000f74:	e7e2      	b.n	8000f3c <StartTask05+0xc>
	}
	else
	{
	  xQueueSend(pingQueue, &cmdToQueue, 0);
 8000f76:	4b06      	ldr	r3, [pc, #24]	; (8000f90 <StartTask05+0x60>)
 8000f78:	6818      	ldr	r0, [r3, #0]
 8000f7a:	f107 010f 	add.w	r1, r7, #15
 8000f7e:	2300      	movs	r3, #0
 8000f80:	2200      	movs	r2, #0
 8000f82:	f004 ffa3 	bl	8005ecc <xQueueGenericSend>
      osDelay(500);
 8000f86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f8a:	f004 faf9 	bl	8005580 <osDelay>
	xQueueReceive(pingQueue, &recvCmd, portMAX_DELAY);
 8000f8e:	e7d5      	b.n	8000f3c <StartTask05+0xc>
 8000f90:	20002620 	.word	0x20002620
 8000f94:	48000400 	.word	0x48000400

08000f98 <Callback01>:
  /* USER CODE END StartTask05 */
}

/* Callback01 function */
void Callback01(void const * argument)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
  HAL_GPIO_WritePin(GPIOA, ISR_LED_Pin, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2108      	movs	r1, #8
 8000fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa8:	f001 fe92 	bl	8002cd0 <HAL_GPIO_WritePin>
  /* USER CODE END Callback01 */
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <Callback02>:

/* Callback02 function */
void Callback02(void const * argument)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback02 */
  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000fbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fc0:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <Callback02+0x24>)
 8000fc2:	f001 fe9d 	bl	8002d00 <HAL_GPIO_TogglePin>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <Callback02+0x28>)
 8000fcc:	f001 fe98 	bl	8002d00 <HAL_GPIO_TogglePin>
  /* USER CODE END Callback02 */
}
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	48000800 	.word	0x48000800
 8000fdc:	48000c00 	.word	0x48000c00

08000fe0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ff2:	f000 fc19 	bl	8001828 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40012c00 	.word	0x40012c00

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	e7fe      	b.n	800100c <Error_Handler+0x8>
	...

08001010 <LCD_Write>:

#include "main.h"
#include "nokia_5110.h"

void LCD_Write(xmit_type type, SPI_TypeDef *instance, uint8_t data)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
 800101c:	4613      	mov	r3, r2
 800101e:	71bb      	strb	r3, [r7, #6]
    if(type == COMMAND)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d10a      	bne.n	800103c <LCD_Write+0x2c>
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	480d      	ldr	r0, [pc, #52]	; (8001060 <LCD_Write+0x50>)
 800102c:	f001 fe50 	bl	8002cd0 <HAL_GPIO_WritePin>
    	SPI_WriteByte(instance, &data);
 8001030:	1dbb      	adds	r3, r7, #6
 8001032:	4619      	mov	r1, r3
 8001034:	6838      	ldr	r0, [r7, #0]
 8001036:	f000 f881 	bl	800113c <SPI_WriteByte>
    else if(type == DATA)
    {
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
        SPI_WriteByte(instance, &data);
    }
}
 800103a:	e00c      	b.n	8001056 <LCD_Write+0x46>
    else if(type == DATA)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d109      	bne.n	8001056 <LCD_Write+0x46>
    	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001042:	2201      	movs	r2, #1
 8001044:	2101      	movs	r1, #1
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <LCD_Write+0x50>)
 8001048:	f001 fe42 	bl	8002cd0 <HAL_GPIO_WritePin>
        SPI_WriteByte(instance, &data);
 800104c:	1dbb      	adds	r3, r7, #6
 800104e:	4619      	mov	r1, r3
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f000 f873 	bl	800113c <SPI_WriteByte>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	48000400 	.word	0x48000400

08001064 <Nokia5110_SetCursor>:

void Nokia5110_SetCursor(SPI_TypeDef *instance, unsigned char newX, volatile unsigned char newY){
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
 8001070:	4613      	mov	r3, r2
 8001072:	70bb      	strb	r3, [r7, #2]
  if((newX > 80) || (newY > 5)){        // Error handling
 8001074:	78fb      	ldrb	r3, [r7, #3]
 8001076:	2b50      	cmp	r3, #80	; 0x50
 8001078:	d817      	bhi.n	80010aa <Nokia5110_SetCursor+0x46>
 800107a:	78bb      	ldrb	r3, [r7, #2]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b05      	cmp	r3, #5
 8001080:	d813      	bhi.n	80010aa <Nokia5110_SetCursor+0x46>
    return;
  }
  LCD_Write(COMMAND, instance, 0x80|(newX));     // setting bit 7 updates X-position
 8001082:	78fb      	ldrb	r3, [r7, #3]
 8001084:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001088:	b2db      	uxtb	r3, r3
 800108a:	461a      	mov	r2, r3
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff ffbe 	bl	8001010 <LCD_Write>
  LCD_Write(COMMAND, instance, 0x40|(newY));     // setting bit 6 updates Y-position
 8001094:	78bb      	ldrb	r3, [r7, #2]
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800109c:	b2db      	uxtb	r3, r3
 800109e:	461a      	mov	r2, r3
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	2000      	movs	r0, #0
 80010a4:	f7ff ffb4 	bl	8001010 <LCD_Write>
 80010a8:	e000      	b.n	80010ac <Nokia5110_SetCursor+0x48>
    return;
 80010aa:	bf00      	nop
}
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}

080010b2 <Clear_Display>:

void Clear_Display(SPI_TypeDef *instance)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  Nokia5110_SetCursor(instance,0,0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	2100      	movs	r1, #0
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ffd0 	bl	8001064 <Nokia5110_SetCursor>
  int idx1, idx2;
  for(idx2 = 0; idx2 < 6; ++idx2)
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	e010      	b.n	80010ec <Clear_Display+0x3a>
  {
    for(idx1 = 0; idx1 < 84; ++idx1)
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	e007      	b.n	80010e0 <Clear_Display+0x2e>
    {
      LCD_Write(DATA, instance, 0x00);
 80010d0:	2200      	movs	r2, #0
 80010d2:	6879      	ldr	r1, [r7, #4]
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff ff9b 	bl	8001010 <LCD_Write>
    for(idx1 = 0; idx1 < 84; ++idx1)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	3301      	adds	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	2b53      	cmp	r3, #83	; 0x53
 80010e4:	ddf4      	ble.n	80010d0 <Clear_Display+0x1e>
  for(idx2 = 0; idx2 < 6; ++idx2)
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	3301      	adds	r3, #1
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	ddeb      	ble.n	80010ca <Clear_Display+0x18>
    }
  }
  Nokia5110_SetCursor(instance,0,0);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2100      	movs	r1, #0
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffb4 	bl	8001064 <Nokia5110_SetCursor>
}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}

08001104 <Nokia_Reset>:

void Nokia_Reset()
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2104      	movs	r1, #4
 800110e:	480a      	ldr	r0, [pc, #40]	; (8001138 <Nokia_Reset+0x34>)
 8001110:	f001 fdde 	bl	8002cd0 <HAL_GPIO_WritePin>
	for(int i = 0; i < 100; ++i);
 8001114:	2300      	movs	r3, #0
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	e002      	b.n	8001120 <Nokia_Reset+0x1c>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3301      	adds	r3, #1
 800111e:	607b      	str	r3, [r7, #4]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b63      	cmp	r3, #99	; 0x63
 8001124:	ddf9      	ble.n	800111a <Nokia_Reset+0x16>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001126:	2201      	movs	r2, #1
 8001128:	2104      	movs	r1, #4
 800112a:	4803      	ldr	r0, [pc, #12]	; (8001138 <Nokia_Reset+0x34>)
 800112c:	f001 fdd0 	bl	8002cd0 <HAL_GPIO_WritePin>
}
 8001130:	bf00      	nop
 8001132:	3708      	adds	r7, #8
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	48000400 	.word	0x48000400

0800113c <SPI_WriteByte>:

void SPI_WriteByte(SPI_TypeDef *instance, uint8_t *data)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	uint8_t volatile dummy;
    while((instance->SR & 0x02) == 0);
 8001146:	bf00      	nop
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	689b      	ldr	r3, [r3, #8]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b00      	cmp	r3, #0
 8001152:	d0f9      	beq.n	8001148 <SPI_WriteByte+0xc>
    *((__IO uint8_t *)&instance->DR) = *data;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	330c      	adds	r3, #12
 8001158:	683a      	ldr	r2, [r7, #0]
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	701a      	strb	r2, [r3, #0]
    while ((instance->SR & SPI_FLAG_RXNE) != SPI_FLAG_RXNE);
 800115e:	bf00      	nop
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	2b01      	cmp	r3, #1
 800116a:	d1f9      	bne.n	8001160 <SPI_WriteByte+0x24>
    dummy = *((__IO uint8_t *)&instance->DR);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	330c      	adds	r3, #12
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	73fb      	strb	r3, [r7, #15]
    while((instance->SR & SPI_SR_BSY));
 8001176:	bf00      	nop
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f9      	bne.n	8001178 <SPI_WriteByte+0x3c>
}
 8001184:	bf00      	nop
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <Nokia_Config>:
	//*val = *((__IO uint8_t *)&instance->DR);
	while ((instance->SR & SPI_SR_BSY));
}

void Nokia_Config(SPI_TypeDef *instance)
{
 8001192:	b580      	push	{r7, lr}
 8001194:	b082      	sub	sp, #8
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  Nokia_Reset();
 800119a:	f7ff ffb3 	bl	8001104 <Nokia_Reset>
  LCD_Write(COMMAND, instance, 0x21);
 800119e:	2221      	movs	r2, #33	; 0x21
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	2000      	movs	r0, #0
 80011a4:	f7ff ff34 	bl	8001010 <LCD_Write>
  LCD_Write(COMMAND, instance, 0xC0);                // Contrast (Vop0 to Vop6) pp.14
 80011a8:	22c0      	movs	r2, #192	; 0xc0
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	2000      	movs	r0, #0
 80011ae:	f7ff ff2f 	bl	8001010 <LCD_Write>
  LCD_Write(COMMAND, instance, 0x04);                // Temperature Coeffecient pp.14
 80011b2:	2204      	movs	r2, #4
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff ff2a 	bl	8001010 <LCD_Write>
  LCD_Write(COMMAND, instance, 0x14);                // LCD bias mode
 80011bc:	2214      	movs	r2, #20
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff ff25 	bl	8001010 <LCD_Write>
  LCD_Write(COMMAND, instance,
 80011c6:	2220      	movs	r2, #32
 80011c8:	6879      	ldr	r1, [r7, #4]
 80011ca:	2000      	movs	r0, #0
 80011cc:	f7ff ff20 	bl	8001010 <LCD_Write>
	    0x20 | (0<<PD | 0 << V | 0 << H)); // PD = 0, V = 0, H = 0
                                           // Regular Instruction set
  LCD_Write(COMMAND, instance, 0x0C);                // Display Control normal
 80011d0:	220c      	movs	r2, #12
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff ff1b 	bl	8001010 <LCD_Write>

  // Set At Origin.
  LCD_Write(COMMAND, instance, 0x80);
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	6879      	ldr	r1, [r7, #4]
 80011de:	2000      	movs	r0, #0
 80011e0:	f7ff ff16 	bl	8001010 <LCD_Write>
  LCD_Write(COMMAND, instance, 0x40);
 80011e4:	2240      	movs	r2, #64	; 0x40
 80011e6:	6879      	ldr	r1, [r7, #4]
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff ff11 	bl	8001010 <LCD_Write>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <Nokia5110_OutString>:
// The string will automatically wrap, so padding spaces may
// be needed to make the output look optimal.
// inputs: ptr  pointer to NULL-terminated ASCII string
// outputs: none
// assumes: LCD is in default horizontal addressing mode (V = 0)
void Nokia5110_OutString(SPI_TypeDef *instance, char *ptr){
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
 80011fe:	6039      	str	r1, [r7, #0]
  while(*ptr){
 8001200:	e008      	b.n	8001214 <Nokia5110_OutString+0x1e>
    Nokia5110_OutChar(instance, (unsigned char)*ptr);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	4619      	mov	r1, r3
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 f80d 	bl	8001228 <Nokia5110_OutChar>
    ptr = ptr + 1;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	3301      	adds	r3, #1
 8001212:	603b      	str	r3, [r7, #0]
  while(*ptr){
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d1f2      	bne.n	8001202 <Nokia5110_OutString+0xc>
  }
}
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <Nokia5110_OutChar>:

void Nokia5110_OutChar(SPI_TypeDef *instance, unsigned char data){
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	70fb      	strb	r3, [r7, #3]
  int i;
  LCD_Write(DATA, instance, 0x00);                 // blank vertical line padding
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	2001      	movs	r0, #1
 800123a:	f7ff fee9 	bl	8001010 <LCD_Write>
  for(i=0; i<5; i=i+1){
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	e012      	b.n	800126a <Nokia5110_OutChar+0x42>
    LCD_Write(DATA, instance, ASCII[data - 0x20][i]);
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	f1a3 0220 	sub.w	r2, r3, #32
 800124a:	490e      	ldr	r1, [pc, #56]	; (8001284 <Nokia5110_OutChar+0x5c>)
 800124c:	4613      	mov	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4413      	add	r3, r2
 8001252:	18ca      	adds	r2, r1, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4413      	add	r3, r2
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	6879      	ldr	r1, [r7, #4]
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fed6 	bl	8001010 <LCD_Write>
  for(i=0; i<5; i=i+1){
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b04      	cmp	r3, #4
 800126e:	dde9      	ble.n	8001244 <Nokia5110_OutChar+0x1c>
  }
  LCD_Write(DATA, instance, 0x00);                 // blank vertical line padding
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	2001      	movs	r0, #1
 8001276:	f7ff fecb 	bl	8001010 <LCD_Write>
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	080095e4 	.word	0x080095e4

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <HAL_MspInit+0x4c>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	4a10      	ldr	r2, [pc, #64]	; (80012d4 <HAL_MspInit+0x4c>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6613      	str	r3, [r2, #96]	; 0x60
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <HAL_MspInit+0x4c>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <HAL_MspInit+0x4c>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <HAL_MspInit+0x4c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6593      	str	r3, [r2, #88]	; 0x58
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_MspInit+0x4c>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	210f      	movs	r1, #15
 80012c2:	f06f 0001 	mvn.w	r0, #1
 80012c6:	f001 fb2f 	bl	8002928 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40021000 	.word	0x40021000

080012d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b0ac      	sub	sp, #176	; 0xb0
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	2288      	movs	r2, #136	; 0x88
 80012f6:	2100      	movs	r1, #0
 80012f8:	4618      	mov	r0, r3
 80012fa:	f007 fc2f 	bl	8008b5c <memset>
  if(hadc->Instance==ADC1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_ADC_MspInit+0xc8>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d146      	bne.n	8001396 <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001308:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800130c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800130e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001312:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001316:	2301      	movs	r3, #1
 8001318:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800131a:	2301      	movs	r3, #1
 800131c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800131e:	2308      	movs	r3, #8
 8001320:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001322:	2307      	movs	r3, #7
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001326:	2302      	movs	r3, #2
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800132a:	2302      	movs	r3, #2
 800132c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800132e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001332:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4618      	mov	r0, r3
 800133a:	f002 fba1 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001344:	f7ff fe5e 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001348:	4b16      	ldr	r3, [pc, #88]	; (80013a4 <HAL_ADC_MspInit+0xcc>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	4a15      	ldr	r2, [pc, #84]	; (80013a4 <HAL_ADC_MspInit+0xcc>)
 800134e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <HAL_ADC_MspInit+0xcc>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_ADC_MspInit+0xcc>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <HAL_ADC_MspInit+0xcc>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136c:	4b0d      	ldr	r3, [pc, #52]	; (80013a4 <HAL_ADC_MspInit+0xcc>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001378:	2302      	movs	r3, #2
 800137a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800137e:	230b      	movs	r3, #11
 8001380:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800138a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800138e:	4619      	mov	r1, r3
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <HAL_ADC_MspInit+0xd0>)
 8001392:	f001 faf3 	bl	800297c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001396:	bf00      	nop
 8001398:	37b0      	adds	r7, #176	; 0xb0
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	50040000 	.word	0x50040000
 80013a4:	40021000 	.word	0x40021000
 80013a8:	48000800 	.word	0x48000800

080013ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08a      	sub	sp, #40	; 0x28
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b4:	f107 0314 	add.w	r3, r7, #20
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a17      	ldr	r2, [pc, #92]	; (8001428 <HAL_SPI_MspInit+0x7c>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d128      	bne.n	8001420 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_SPI_MspInit+0x80>)
 80013d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013d2:	4a16      	ldr	r2, [pc, #88]	; (800142c <HAL_SPI_MspInit+0x80>)
 80013d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013d8:	6613      	str	r3, [r2, #96]	; 0x60
 80013da:	4b14      	ldr	r3, [pc, #80]	; (800142c <HAL_SPI_MspInit+0x80>)
 80013dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b11      	ldr	r3, [pc, #68]	; (800142c <HAL_SPI_MspInit+0x80>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_SPI_MspInit+0x80>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b0e      	ldr	r3, [pc, #56]	; (800142c <HAL_SPI_MspInit+0x80>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013fe:	23f0      	movs	r3, #240	; 0xf0
 8001400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140a:	2303      	movs	r3, #3
 800140c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800140e:	2305      	movs	r3, #5
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0314 	add.w	r3, r7, #20
 8001416:	4619      	mov	r1, r3
 8001418:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800141c:	f001 faae 	bl	800297c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	; 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40013000 	.word	0x40013000
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b0ae      	sub	sp, #184	; 0xb8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001448:	f107 031c 	add.w	r3, r7, #28
 800144c:	2288      	movs	r2, #136	; 0x88
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f007 fb83 	bl	8008b5c <memset>
  if(huart->Instance==UART4)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a53      	ldr	r2, [pc, #332]	; (80015a8 <HAL_UART_MspInit+0x178>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d13c      	bne.n	80014da <HAL_UART_MspInit+0xaa>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001460:	2308      	movs	r3, #8
 8001462:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001464:	2300      	movs	r3, #0
 8001466:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4618      	mov	r0, r3
 800146e:	f002 fb07 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001478:	f7ff fdc4 	bl	8001004 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800147c:	4b4b      	ldr	r3, [pc, #300]	; (80015ac <HAL_UART_MspInit+0x17c>)
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	4a4a      	ldr	r2, [pc, #296]	; (80015ac <HAL_UART_MspInit+0x17c>)
 8001482:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001486:	6593      	str	r3, [r2, #88]	; 0x58
 8001488:	4b48      	ldr	r3, [pc, #288]	; (80015ac <HAL_UART_MspInit+0x17c>)
 800148a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	4b45      	ldr	r3, [pc, #276]	; (80015ac <HAL_UART_MspInit+0x17c>)
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	4a44      	ldr	r2, [pc, #272]	; (80015ac <HAL_UART_MspInit+0x17c>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a0:	4b42      	ldr	r3, [pc, #264]	; (80015ac <HAL_UART_MspInit+0x17c>)
 80014a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80014ac:	2303      	movs	r3, #3
 80014ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80014c4:	2308      	movs	r3, #8
 80014c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014ce:	4619      	mov	r1, r3
 80014d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d4:	f001 fa52 	bl	800297c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014d8:	e062      	b.n	80015a0 <HAL_UART_MspInit+0x170>
  else if(huart->Instance==USART1)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a34      	ldr	r2, [pc, #208]	; (80015b0 <HAL_UART_MspInit+0x180>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d15d      	bne.n	80015a0 <HAL_UART_MspInit+0x170>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014e8:	2300      	movs	r3, #0
 80014ea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fac5 	bl	8003a80 <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80014fc:	f7ff fd82 	bl	8001004 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001500:	4b2a      	ldr	r3, [pc, #168]	; (80015ac <HAL_UART_MspInit+0x17c>)
 8001502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001504:	4a29      	ldr	r2, [pc, #164]	; (80015ac <HAL_UART_MspInit+0x17c>)
 8001506:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800150a:	6613      	str	r3, [r2, #96]	; 0x60
 800150c:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_UART_MspInit+0x17c>)
 800150e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001510:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b24      	ldr	r3, [pc, #144]	; (80015ac <HAL_UART_MspInit+0x17c>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	4a23      	ldr	r2, [pc, #140]	; (80015ac <HAL_UART_MspInit+0x17c>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001524:	4b21      	ldr	r3, [pc, #132]	; (80015ac <HAL_UART_MspInit+0x17c>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <HAL_UART_MspInit+0x17c>)
 8001532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001534:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_UART_MspInit+0x17c>)
 8001536:	f043 0302 	orr.w	r3, r3, #2
 800153a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_UART_MspInit+0x17c>)
 800153e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	60bb      	str	r3, [r7, #8]
 8001546:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001562:	2307      	movs	r3, #7
 8001564:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001572:	f001 fa03 	bl	800297c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001576:	2340      	movs	r3, #64	; 0x40
 8001578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800158e:	2307      	movs	r3, #7
 8001590:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001598:	4619      	mov	r1, r3
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <HAL_UART_MspInit+0x184>)
 800159c:	f001 f9ee 	bl	800297c <HAL_GPIO_Init>
}
 80015a0:	bf00      	nop
 80015a2:	37b8      	adds	r7, #184	; 0xb8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	40004c00 	.word	0x40004c00
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40013800 	.word	0x40013800
 80015b4:	48000400 	.word	0x48000400

080015b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08c      	sub	sp, #48	; 0x30
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 80015c8:	2200      	movs	r2, #0
 80015ca:	6879      	ldr	r1, [r7, #4]
 80015cc:	2019      	movs	r0, #25
 80015ce:	f001 f9ab 	bl	8002928 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80015d2:	2019      	movs	r0, #25
 80015d4:	f001 f9c4 	bl	8002960 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80015d8:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_InitTick+0x9c>)
 80015da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015dc:	4a1d      	ldr	r2, [pc, #116]	; (8001654 <HAL_InitTick+0x9c>)
 80015de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015e2:	6613      	str	r3, [r2, #96]	; 0x60
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <HAL_InitTick+0x9c>)
 80015e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015f0:	f107 0210 	add.w	r2, r7, #16
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 f9ae 	bl	800395c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001600:	f002 f996 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 8001604:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001608:	4a13      	ldr	r2, [pc, #76]	; (8001658 <HAL_InitTick+0xa0>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	0c9b      	lsrs	r3, r3, #18
 8001610:	3b01      	subs	r3, #1
 8001612:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <HAL_InitTick+0xa4>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <HAL_InitTick+0xa8>)
 8001618:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_InitTick+0xa4>)
 800161c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001620:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001622:	4a0e      	ldr	r2, [pc, #56]	; (800165c <HAL_InitTick+0xa4>)
 8001624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001626:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001628:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_InitTick+0xa4>)
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162e:	4b0b      	ldr	r3, [pc, #44]	; (800165c <HAL_InitTick+0xa4>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001634:	4809      	ldr	r0, [pc, #36]	; (800165c <HAL_InitTick+0xa4>)
 8001636:	f002 ff82 	bl	800453e <HAL_TIM_Base_Init>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d104      	bne.n	800164a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <HAL_InitTick+0xa4>)
 8001642:	f002 ffdd 	bl	8004600 <HAL_TIM_Base_Start_IT>
 8001646:	4603      	mov	r3, r0
 8001648:	e000      	b.n	800164c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	3730      	adds	r7, #48	; 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	431bde83 	.word	0x431bde83
 800165c:	20002720 	.word	0x20002720
 8001660:	40012c00 	.word	0x40012c00

08001664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001668:	e7fe      	b.n	8001668 <NMI_Handler+0x4>

0800166a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166a:	b480      	push	{r7}
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800166e:	e7fe      	b.n	800166e <HardFault_Handler+0x4>

08001670 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <MemManage_Handler+0x4>

08001676 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <BusFault_Handler+0x4>

0800167c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <UsageFault_Handler+0x4>

08001682 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001696:	f003 f823 	bl	80046e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20002720 	.word	0x20002720

080016a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ac:	f001 fb42 	bl	8002d34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  osTimerStart(oneShotTimerHandle, 2000);
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <EXTI15_10_IRQHandler+0x2c>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 ffa9 	bl	8005610 <osTimerStart>
  HAL_GPIO_WritePin(GPIOA, ISR_LED_Pin, GPIO_PIN_SET);
 80016be:	2201      	movs	r2, #1
 80016c0:	2108      	movs	r1, #8
 80016c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c6:	f001 fb03 	bl	8002cd0 <HAL_GPIO_WritePin>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	2000262c 	.word	0x2000262c

080016d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016dc:	4a14      	ldr	r2, [pc, #80]	; (8001730 <_sbrk+0x5c>)
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <_sbrk+0x60>)
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e8:	4b13      	ldr	r3, [pc, #76]	; (8001738 <_sbrk+0x64>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d102      	bne.n	80016f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <_sbrk+0x64>)
 80016f2:	4a12      	ldr	r2, [pc, #72]	; (800173c <_sbrk+0x68>)
 80016f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	429a      	cmp	r2, r3
 8001702:	d207      	bcs.n	8001714 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001704:	f007 f9f2 	bl	8008aec <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	220c      	movs	r2, #12
 800170c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
 8001712:	e009      	b.n	8001728 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <_sbrk+0x64>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4413      	add	r3, r2
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <_sbrk+0x64>)
 8001724:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20018000 	.word	0x20018000
 8001734:	00000400 	.word	0x00000400
 8001738:	20000738 	.word	0x20000738
 800173c:	200027c0 	.word	0x200027c0

08001740 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <SystemInit+0x5c>)
 8001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174a:	4a14      	ldr	r2, [pc, #80]	; (800179c <SystemInit+0x5c>)
 800174c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <SystemInit+0x60>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a11      	ldr	r2, [pc, #68]	; (80017a0 <SystemInit+0x60>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <SystemInit+0x60>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <SystemInit+0x60>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <SystemInit+0x60>)
 800176c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001770:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001774:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <SystemInit+0x60>)
 8001778:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800177c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <SystemInit+0x60>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <SystemInit+0x60>)
 8001784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001788:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800178a:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <SystemInit+0x60>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000ed00 	.word	0xe000ed00
 80017a0:	40021000 	.word	0x40021000

080017a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a8:	f7ff ffca 	bl	8001740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017ae:	e003      	b.n	80017b8 <LoopCopyDataInit>

080017b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017b6:	3104      	adds	r1, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017b8:	480a      	ldr	r0, [pc, #40]	; (80017e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017ba:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017c0:	d3f6      	bcc.n	80017b0 <CopyDataInit>
	ldr	r2, =_sbss
 80017c2:	4a0a      	ldr	r2, [pc, #40]	; (80017ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80017c4:	e002      	b.n	80017cc <LoopFillZerobss>

080017c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017c8:	f842 3b04 	str.w	r3, [r2], #4

080017cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <LoopForever+0x16>)
	cmp	r2, r3
 80017ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017d0:	d3f9      	bcc.n	80017c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d2:	f007 f991 	bl	8008af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017d6:	f7fe ff03 	bl	80005e0 <main>

080017da <LoopForever>:

LoopForever:
    b LoopForever
 80017da:	e7fe      	b.n	80017da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017dc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80017e0:	08009850 	.word	0x08009850
	ldr	r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017e8:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80017ec:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80017f0:	200027c0 	.word	0x200027c0

080017f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC1_2_IRQHandler>

080017f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f001 f886 	bl	8002912 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001806:	2000      	movs	r0, #0
 8001808:	f7ff fed6 	bl	80015b8 <HAL_InitTick>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	71fb      	strb	r3, [r7, #7]
 8001816:	e001      	b.n	800181c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001818:	f7ff fd36 	bl	8001288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800181c:	79fb      	ldrb	r3, [r7, #7]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800182c:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x20>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	461a      	mov	r2, r3
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_IncTick+0x24>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4413      	add	r3, r2
 8001838:	4a04      	ldr	r2, [pc, #16]	; (800184c <HAL_IncTick+0x24>)
 800183a:	6013      	str	r3, [r2, #0]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	20000008 	.word	0x20000008
 800184c:	2000276c 	.word	0x2000276c

08001850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return uwTick;
 8001854:	4b03      	ldr	r3, [pc, #12]	; (8001864 <HAL_GetTick+0x14>)
 8001856:	681b      	ldr	r3, [r3, #0]
}
 8001858:	4618      	mov	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	2000276c 	.word	0x2000276c

08001868 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	609a      	str	r2, [r3, #8]
}
 8001882:	bf00      	nop
 8001884:	370c      	adds	r7, #12
 8001886:	46bd      	mov	sp, r7
 8001888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188c:	4770      	bx	lr

0800188e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800188e:	b480      	push	{r7}
 8001890:	b083      	sub	sp, #12
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	431a      	orrs	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	609a      	str	r2, [r3, #8]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b087      	sub	sp, #28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	3360      	adds	r3, #96	; 0x60
 80018e2:	461a      	mov	r2, r3
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <LL_ADC_SetOffset+0x44>)
 80018f2:	4013      	ands	r3, r2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	430a      	orrs	r2, r1
 80018fe:	4313      	orrs	r3, r2
 8001900:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001908:	bf00      	nop
 800190a:	371c      	adds	r7, #28
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	03fff000 	.word	0x03fff000

08001918 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3360      	adds	r3, #96	; 0x60
 8001926:	461a      	mov	r2, r3
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001938:	4618      	mov	r0, r3
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3360      	adds	r3, #96	; 0x60
 8001954:	461a      	mov	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	431a      	orrs	r2, r3
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800196e:	bf00      	nop
 8001970:	371c      	adds	r7, #28
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800197a:	b480      	push	{r7}
 800197c:	b087      	sub	sp, #28
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	3330      	adds	r3, #48	; 0x30
 800198a:	461a      	mov	r2, r3
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	f003 030c 	and.w	r3, r3, #12
 8001996:	4413      	add	r3, r2
 8001998:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	211f      	movs	r1, #31
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	401a      	ands	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	0e9b      	lsrs	r3, r3, #26
 80019b2:	f003 011f 	and.w	r1, r3, #31
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	f003 031f 	and.w	r3, r3, #31
 80019bc:	fa01 f303 	lsl.w	r3, r1, r3
 80019c0:	431a      	orrs	r2, r3
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019c6:	bf00      	nop
 80019c8:	371c      	adds	r7, #28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b087      	sub	sp, #28
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3314      	adds	r3, #20
 80019e2:	461a      	mov	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	0e5b      	lsrs	r3, r3, #25
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	f003 0304 	and.w	r3, r3, #4
 80019ee:	4413      	add	r3, r2
 80019f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	0d1b      	lsrs	r3, r3, #20
 80019fa:	f003 031f 	and.w	r3, r3, #31
 80019fe:	2107      	movs	r1, #7
 8001a00:	fa01 f303 	lsl.w	r3, r1, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	0d1b      	lsrs	r3, r3, #20
 8001a0c:	f003 031f 	and.w	r3, r3, #31
 8001a10:	6879      	ldr	r1, [r7, #4]
 8001a12:	fa01 f303 	lsl.w	r3, r1, r3
 8001a16:	431a      	orrs	r2, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a1c:	bf00      	nop
 8001a1e:	371c      	adds	r7, #28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0318 	and.w	r3, r3, #24
 8001a4a:	4908      	ldr	r1, [pc, #32]	; (8001a6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8001a4c:	40d9      	lsrs	r1, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	400b      	ands	r3, r1
 8001a52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a56:	431a      	orrs	r2, r3
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001a5e:	bf00      	nop
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	0007ffff 	.word	0x0007ffff

08001a70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001a80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	6093      	str	r3, [r2, #8]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001aa4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aa8:	d101      	bne.n	8001aae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001acc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ad0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001af8:	d101      	bne.n	8001afe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001afe:	2300      	movs	r3, #0
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d101      	bne.n	8001b24 <LL_ADC_IsEnabled+0x18>
 8001b20:	2301      	movs	r3, #1
 8001b22:	e000      	b.n	8001b26 <LL_ADC_IsEnabled+0x1a>
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b04      	cmp	r3, #4
 8001b44:	d101      	bne.n	8001b4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f003 0308 	and.w	r3, r3, #8
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d101      	bne.n	8001b70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	370c      	adds	r7, #12
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e136      	b.n	8001e08 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d109      	bne.n	8001bbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff fb95 	bl	80012d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff ff67 	bl	8001a94 <LL_ADC_IsDeepPowerDownEnabled>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff4d 	bl	8001a70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff ff82 	bl	8001ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d115      	bne.n	8001c12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ff66 	bl	8001abc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001bf0:	4b87      	ldr	r3, [pc, #540]	; (8001e10 <HAL_ADC_Init+0x290>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	099b      	lsrs	r3, r3, #6
 8001bf6:	4a87      	ldr	r2, [pc, #540]	; (8001e14 <HAL_ADC_Init+0x294>)
 8001bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfc:	099b      	lsrs	r3, r3, #6
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c04:	e002      	b.n	8001c0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f9      	bne.n	8001c06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff ff64 	bl	8001ae4 <LL_ADC_IsInternalRegulatorEnabled>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10d      	bne.n	8001c3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c26:	f043 0210 	orr.w	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	f043 0201 	orr.w	r2, r3, #1
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ff75 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8001c48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4e:	f003 0310 	and.w	r3, r3, #16
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f040 80cf 	bne.w	8001df6 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	f040 80cb 	bne.w	8001df6 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001c68:	f043 0202 	orr.w	r2, r3, #2
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff ff49 	bl	8001b0c <LL_ADC_IsEnabled>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d115      	bne.n	8001cac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001c80:	4865      	ldr	r0, [pc, #404]	; (8001e18 <HAL_ADC_Init+0x298>)
 8001c82:	f7ff ff43 	bl	8001b0c <LL_ADC_IsEnabled>
 8001c86:	4604      	mov	r4, r0
 8001c88:	4864      	ldr	r0, [pc, #400]	; (8001e1c <HAL_ADC_Init+0x29c>)
 8001c8a:	f7ff ff3f 	bl	8001b0c <LL_ADC_IsEnabled>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	431c      	orrs	r4, r3
 8001c92:	4863      	ldr	r0, [pc, #396]	; (8001e20 <HAL_ADC_Init+0x2a0>)
 8001c94:	f7ff ff3a 	bl	8001b0c <LL_ADC_IsEnabled>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4323      	orrs	r3, r4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d105      	bne.n	8001cac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	485f      	ldr	r0, [pc, #380]	; (8001e24 <HAL_ADC_Init+0x2a4>)
 8001ca8:	f7ff fdde 	bl	8001868 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7e5b      	ldrb	r3, [r3, #25]
 8001cb0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001cb6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001cbc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001cc2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cca:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d106      	bne.n	8001ce8 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	045b      	lsls	r3, r3, #17
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68da      	ldr	r2, [r3, #12]
 8001d0a:	4b47      	ldr	r3, [pc, #284]	; (8001e28 <HAL_ADC_Init+0x2a8>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6812      	ldr	r2, [r2, #0]
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	430b      	orrs	r3, r1
 8001d16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff08 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8001d22:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff15 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 8001d2e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d13d      	bne.n	8001db2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d13a      	bne.n	8001db2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d40:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d48:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d58:	f023 0302 	bic.w	r3, r3, #2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	69b9      	ldr	r1, [r7, #24]
 8001d62:	430b      	orrs	r3, r1
 8001d64:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d118      	bne.n	8001da2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d86:	4311      	orrs	r1, r2
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d8c:	4311      	orrs	r1, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d92:	430a      	orrs	r2, r1
 8001d94:	431a      	orrs	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0201 	orr.w	r2, r2, #1
 8001d9e:	611a      	str	r2, [r3, #16]
 8001da0:	e007      	b.n	8001db2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 0201 	bic.w	r2, r2, #1
 8001db0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d10c      	bne.n	8001dd4 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc0:	f023 010f 	bic.w	r1, r3, #15
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	1e5a      	subs	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8001dd2:	e007      	b.n	8001de4 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 020f 	bic.w	r2, r2, #15
 8001de2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de8:	f023 0303 	bic.w	r3, r3, #3
 8001dec:	f043 0201 	orr.w	r2, r3, #1
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	655a      	str	r2, [r3, #84]	; 0x54
 8001df4:	e007      	b.n	8001e06 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dfa:	f043 0210 	orr.w	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e06:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3724      	adds	r7, #36	; 0x24
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd90      	pop	{r4, r7, pc}
 8001e10:	20000000 	.word	0x20000000
 8001e14:	053e2d63 	.word	0x053e2d63
 8001e18:	50040000 	.word	0x50040000
 8001e1c:	50040100 	.word	0x50040100
 8001e20:	50040200 	.word	0x50040200
 8001e24:	50040300 	.word	0x50040300
 8001e28:	fff0c007 	.word	0xfff0c007

08001e2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b0b6      	sub	sp, #216	; 0xd8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e36:	2300      	movs	r3, #0
 8001e38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d101      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x22>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e3c7      	b.n	80025de <HAL_ADC_ConfigChannel+0x7b2>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fe69 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f040 83a8 	bne.w	80025b8 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b05      	cmp	r3, #5
 8001e6e:	d824      	bhi.n	8001eba <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	3b02      	subs	r3, #2
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d81b      	bhi.n	8001eb2 <HAL_ADC_ConfigChannel+0x86>
 8001e7a:	a201      	add	r2, pc, #4	; (adr r2, 8001e80 <HAL_ADC_ConfigChannel+0x54>)
 8001e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e80:	08001e91 	.word	0x08001e91
 8001e84:	08001e99 	.word	0x08001e99
 8001e88:	08001ea1 	.word	0x08001ea1
 8001e8c:	08001ea9 	.word	0x08001ea9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	220c      	movs	r2, #12
 8001e94:	605a      	str	r2, [r3, #4]
          break;
 8001e96:	e011      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2212      	movs	r2, #18
 8001e9c:	605a      	str	r2, [r3, #4]
          break;
 8001e9e:	e00d      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2218      	movs	r2, #24
 8001ea4:	605a      	str	r2, [r3, #4]
          break;
 8001ea6:	e009      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001eae:	605a      	str	r2, [r3, #4]
          break;
 8001eb0:	e004      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2206      	movs	r2, #6
 8001eb6:	605a      	str	r2, [r3, #4]
          break;
 8001eb8:	e000      	b.n	8001ebc <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8001eba:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	6859      	ldr	r1, [r3, #4]
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f7ff fd56 	bl	800197a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fe2d 	bl	8001b32 <LL_ADC_REG_IsConversionOngoing>
 8001ed8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7ff fe39 	bl	8001b58 <LL_ADC_INJ_IsConversionOngoing>
 8001ee6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001eea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f040 81a6 	bne.w	8002240 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ef4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f040 81a1 	bne.w	8002240 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	6819      	ldr	r1, [r3, #0]
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f7ff fd61 	bl	80019d2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	695a      	ldr	r2, [r3, #20]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	08db      	lsrs	r3, r3, #3
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d00a      	beq.n	8001f48 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6919      	ldr	r1, [r3, #16]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f42:	f7ff fcc5 	bl	80018d0 <LL_ADC_SetOffset>
 8001f46:	e17b      	b.n	8002240 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fce2 	bl	8001918 <LL_ADC_GetOffsetChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10a      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x148>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fcd7 	bl	8001918 <LL_ADC_GetOffsetChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	f003 021f 	and.w	r2, r3, #31
 8001f72:	e01e      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x186>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fccc 	bl	8001918 <LL_ADC_GetOffsetChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001f96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	e004      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8001fa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x19e>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0e9b      	lsrs	r3, r3, #26
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	e018      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x1d0>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001fe2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001fe6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d101      	bne.n	8001ff2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8001fee:	2320      	movs	r3, #32
 8001ff0:	e004      	b.n	8001ffc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8001ff2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ff6:	fab3 f383 	clz	r3, r3
 8001ffa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d106      	bne.n	800200e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2200      	movs	r2, #0
 8002006:	2100      	movs	r1, #0
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff fc9b 	bl	8001944 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2101      	movs	r1, #1
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fc7f 	bl	8001918 <LL_ADC_GetOffsetChannel>
 800201a:	4603      	mov	r3, r0
 800201c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <HAL_ADC_ConfigChannel+0x20e>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2101      	movs	r1, #1
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff fc74 	bl	8001918 <LL_ADC_GetOffsetChannel>
 8002030:	4603      	mov	r3, r0
 8002032:	0e9b      	lsrs	r3, r3, #26
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	e01e      	b.n	8002078 <HAL_ADC_ConfigChannel+0x24c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2101      	movs	r1, #1
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff fc69 	bl	8001918 <LL_ADC_GetOffsetChannel>
 8002046:	4603      	mov	r3, r0
 8002048:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800204c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002050:	fa93 f3a3 	rbit	r3, r3
 8002054:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002058:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800205c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002060:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002068:	2320      	movs	r3, #32
 800206a:	e004      	b.n	8002076 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800206c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002070:	fab3 f383 	clz	r3, r3
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002080:	2b00      	cmp	r3, #0
 8002082:	d105      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x264>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	e018      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x296>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80020ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80020b4:	2320      	movs	r3, #32
 80020b6:	e004      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80020b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d106      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	2101      	movs	r1, #1
 80020ce:	4618      	mov	r0, r3
 80020d0:	f7ff fc38 	bl	8001944 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2102      	movs	r1, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fc1c 	bl	8001918 <LL_ADC_GetOffsetChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10a      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x2d4>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2102      	movs	r1, #2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff fc11 	bl	8001918 <LL_ADC_GetOffsetChannel>
 80020f6:	4603      	mov	r3, r0
 80020f8:	0e9b      	lsrs	r3, r3, #26
 80020fa:	f003 021f 	and.w	r2, r3, #31
 80020fe:	e01e      	b.n	800213e <HAL_ADC_ConfigChannel+0x312>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2102      	movs	r1, #2
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fc06 	bl	8001918 <LL_ADC_GetOffsetChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002116:	fa93 f3a3 	rbit	r3, r3
 800211a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800211e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002122:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002126:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800212e:	2320      	movs	r3, #32
 8002130:	e004      	b.n	800213c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002132:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002136:	fab3 f383 	clz	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x32a>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	0e9b      	lsrs	r3, r3, #26
 8002150:	f003 031f 	and.w	r3, r3, #31
 8002154:	e016      	b.n	8002184 <HAL_ADC_ConfigChannel+0x358>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002162:	fa93 f3a3 	rbit	r3, r3
 8002166:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002168:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800216a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800216e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002172:	2b00      	cmp	r3, #0
 8002174:	d101      	bne.n	800217a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002176:	2320      	movs	r3, #32
 8002178:	e004      	b.n	8002184 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800217a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002184:	429a      	cmp	r2, r3
 8002186:	d106      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2200      	movs	r2, #0
 800218e:	2102      	movs	r1, #2
 8002190:	4618      	mov	r0, r3
 8002192:	f7ff fbd7 	bl	8001944 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2103      	movs	r1, #3
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff fbbb 	bl	8001918 <LL_ADC_GetOffsetChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10a      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x396>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2103      	movs	r1, #3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fbb0 	bl	8001918 <LL_ADC_GetOffsetChannel>
 80021b8:	4603      	mov	r3, r0
 80021ba:	0e9b      	lsrs	r3, r3, #26
 80021bc:	f003 021f 	and.w	r2, r3, #31
 80021c0:	e017      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x3c6>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2103      	movs	r1, #3
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff fba5 	bl	8001918 <LL_ADC_GetOffsetChannel>
 80021ce:	4603      	mov	r3, r0
 80021d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80021d4:	fa93 f3a3 	rbit	r3, r3
 80021d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80021da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80021de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d101      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80021e4:	2320      	movs	r3, #32
 80021e6:	e003      	b.n	80021f0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80021e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021ea:	fab3 f383 	clz	r3, r3
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d105      	bne.n	800220a <HAL_ADC_ConfigChannel+0x3de>
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	0e9b      	lsrs	r3, r3, #26
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	e011      	b.n	800222e <HAL_ADC_ConfigChannel+0x402>
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002212:	fa93 f3a3 	rbit	r3, r3
 8002216:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002218:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800221a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800221c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002222:	2320      	movs	r3, #32
 8002224:	e003      	b.n	800222e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002226:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800222e:	429a      	cmp	r2, r3
 8002230:	d106      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2200      	movs	r2, #0
 8002238:	2103      	movs	r1, #3
 800223a:	4618      	mov	r0, r3
 800223c:	f7ff fb82 	bl	8001944 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f7ff fc61 	bl	8001b0c <LL_ADC_IsEnabled>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 813f 	bne.w	80024d0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6819      	ldr	r1, [r3, #0]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	461a      	mov	r2, r3
 8002260:	f7ff fbe2 	bl	8001a28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a8e      	ldr	r2, [pc, #568]	; (80024a4 <HAL_ADC_ConfigChannel+0x678>)
 800226a:	4293      	cmp	r3, r2
 800226c:	f040 8130 	bne.w	80024d0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800227c:	2b00      	cmp	r3, #0
 800227e:	d10b      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x46c>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	0e9b      	lsrs	r3, r3, #26
 8002286:	3301      	adds	r3, #1
 8002288:	f003 031f 	and.w	r3, r3, #31
 800228c:	2b09      	cmp	r3, #9
 800228e:	bf94      	ite	ls
 8002290:	2301      	movls	r3, #1
 8002292:	2300      	movhi	r3, #0
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e019      	b.n	80022cc <HAL_ADC_ConfigChannel+0x4a0>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800229e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022a0:	fa93 f3a3 	rbit	r3, r3
 80022a4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80022b0:	2320      	movs	r3, #32
 80022b2:	e003      	b.n	80022bc <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80022b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022b6:	fab3 f383 	clz	r3, r3
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	3301      	adds	r3, #1
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2b09      	cmp	r3, #9
 80022c4:	bf94      	ite	ls
 80022c6:	2301      	movls	r3, #1
 80022c8:	2300      	movhi	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d079      	beq.n	80023c4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d107      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x4c0>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	3301      	adds	r3, #1
 80022e4:	069b      	lsls	r3, r3, #26
 80022e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ea:	e015      	b.n	8002318 <HAL_ADC_ConfigChannel+0x4ec>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80022fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80022fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e003      	b.n	8002310 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	069b      	lsls	r3, r3, #26
 8002314:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x50c>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	0e9b      	lsrs	r3, r3, #26
 800232a:	3301      	adds	r3, #1
 800232c:	f003 031f 	and.w	r3, r3, #31
 8002330:	2101      	movs	r1, #1
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	e017      	b.n	8002368 <HAL_ADC_ConfigChannel+0x53c>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800233e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002348:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800234a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002350:	2320      	movs	r3, #32
 8002352:	e003      	b.n	800235c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
 800235c:	3301      	adds	r3, #1
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	2101      	movs	r1, #1
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	ea42 0103 	orr.w	r1, r2, r3
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10a      	bne.n	800238e <HAL_ADC_ConfigChannel+0x562>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	3301      	adds	r3, #1
 8002380:	f003 021f 	and.w	r2, r3, #31
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	051b      	lsls	r3, r3, #20
 800238c:	e018      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x594>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002396:	fa93 f3a3 	rbit	r3, r3
 800239a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800239c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800239e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d101      	bne.n	80023aa <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80023a6:	2320      	movs	r3, #32
 80023a8:	e003      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80023aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f003 021f 	and.w	r2, r3, #31
 80023b8:	4613      	mov	r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	4413      	add	r3, r2
 80023be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80023c0:	430b      	orrs	r3, r1
 80023c2:	e080      	b.n	80024c6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_ADC_ConfigChannel+0x5b4>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	3301      	adds	r3, #1
 80023d8:	069b      	lsls	r3, r3, #26
 80023da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80023de:	e015      	b.n	800240c <HAL_ADC_ConfigChannel+0x5e0>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e8:	fa93 f3a3 	rbit	r3, r3
 80023ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80023ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80023f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80023f8:	2320      	movs	r3, #32
 80023fa:	e003      	b.n	8002404 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	fab3 f383 	clz	r3, r3
 8002402:	b2db      	uxtb	r3, r3
 8002404:	3301      	adds	r3, #1
 8002406:	069b      	lsls	r3, r3, #26
 8002408:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002414:	2b00      	cmp	r3, #0
 8002416:	d109      	bne.n	800242c <HAL_ADC_ConfigChannel+0x600>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0e9b      	lsrs	r3, r3, #26
 800241e:	3301      	adds	r3, #1
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	2101      	movs	r1, #1
 8002426:	fa01 f303 	lsl.w	r3, r1, r3
 800242a:	e017      	b.n	800245c <HAL_ADC_ConfigChannel+0x630>
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002432:	6a3b      	ldr	r3, [r7, #32]
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	61fb      	str	r3, [r7, #28]
  return result;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800243e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002444:	2320      	movs	r3, #32
 8002446:	e003      	b.n	8002450 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244a:	fab3 f383 	clz	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f003 031f 	and.w	r3, r3, #31
 8002456:	2101      	movs	r1, #1
 8002458:	fa01 f303 	lsl.w	r3, r1, r3
 800245c:	ea42 0103 	orr.w	r1, r2, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10d      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x65c>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	3301      	adds	r3, #1
 8002474:	f003 021f 	and.w	r2, r3, #31
 8002478:	4613      	mov	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	4413      	add	r3, r2
 800247e:	3b1e      	subs	r3, #30
 8002480:	051b      	lsls	r3, r3, #20
 8002482:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002486:	e01d      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x698>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	613b      	str	r3, [r7, #16]
  return result;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d103      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80024a0:	2320      	movs	r3, #32
 80024a2:	e005      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x684>
 80024a4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	fab3 f383 	clz	r3, r3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	3301      	adds	r3, #1
 80024b2:	f003 021f 	and.w	r2, r3, #31
 80024b6:	4613      	mov	r3, r2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	4413      	add	r3, r2
 80024bc:	3b1e      	subs	r3, #30
 80024be:	051b      	lsls	r3, r3, #20
 80024c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024c4:	430b      	orrs	r3, r1
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	6892      	ldr	r2, [r2, #8]
 80024ca:	4619      	mov	r1, r3
 80024cc:	f7ff fa81 	bl	80019d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <HAL_ADC_ConfigChannel+0x7bc>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d07a      	beq.n	80025d2 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024dc:	4843      	ldr	r0, [pc, #268]	; (80025ec <HAL_ADC_ConfigChannel+0x7c0>)
 80024de:	f7ff f9e9 	bl	80018b4 <LL_ADC_GetCommonPathInternalCh>
 80024e2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a41      	ldr	r2, [pc, #260]	; (80025f0 <HAL_ADC_ConfigChannel+0x7c4>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d12c      	bne.n	800254a <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d126      	bne.n	800254a <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a3c      	ldr	r2, [pc, #240]	; (80025f4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d004      	beq.n	8002510 <HAL_ADC_ConfigChannel+0x6e4>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a3b      	ldr	r2, [pc, #236]	; (80025f8 <HAL_ADC_ConfigChannel+0x7cc>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d15d      	bne.n	80025cc <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002510:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002514:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002518:	4619      	mov	r1, r3
 800251a:	4834      	ldr	r0, [pc, #208]	; (80025ec <HAL_ADC_ConfigChannel+0x7c0>)
 800251c:	f7ff f9b7 	bl	800188e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002520:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_ADC_ConfigChannel+0x7d0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	099b      	lsrs	r3, r3, #6
 8002526:	4a36      	ldr	r2, [pc, #216]	; (8002600 <HAL_ADC_ConfigChannel+0x7d4>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	099b      	lsrs	r3, r3, #6
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	4613      	mov	r3, r2
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	4413      	add	r3, r2
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800253a:	e002      	b.n	8002542 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	3b01      	subs	r3, #1
 8002540:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1f9      	bne.n	800253c <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002548:	e040      	b.n	80025cc <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a2d      	ldr	r2, [pc, #180]	; (8002604 <HAL_ADC_ConfigChannel+0x7d8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d118      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x75a>
 8002554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002558:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d112      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a23      	ldr	r2, [pc, #140]	; (80025f4 <HAL_ADC_ConfigChannel+0x7c8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <HAL_ADC_ConfigChannel+0x748>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a22      	ldr	r2, [pc, #136]	; (80025f8 <HAL_ADC_ConfigChannel+0x7cc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d12d      	bne.n	80025d0 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002574:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002578:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800257c:	4619      	mov	r1, r3
 800257e:	481b      	ldr	r0, [pc, #108]	; (80025ec <HAL_ADC_ConfigChannel+0x7c0>)
 8002580:	f7ff f985 	bl	800188e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002584:	e024      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1f      	ldr	r2, [pc, #124]	; (8002608 <HAL_ADC_ConfigChannel+0x7dc>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d120      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002590:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002594:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d11a      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a14      	ldr	r2, [pc, #80]	; (80025f4 <HAL_ADC_ConfigChannel+0x7c8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d115      	bne.n	80025d2 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80025a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ae:	4619      	mov	r1, r3
 80025b0:	480e      	ldr	r0, [pc, #56]	; (80025ec <HAL_ADC_ConfigChannel+0x7c0>)
 80025b2:	f7ff f96c 	bl	800188e <LL_ADC_SetCommonPathInternalCh>
 80025b6:	e00c      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	f043 0220 	orr.w	r2, r3, #32
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80025ca:	e002      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025cc:	bf00      	nop
 80025ce:	e000      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80025d0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025da:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025de:	4618      	mov	r0, r3
 80025e0:	37d8      	adds	r7, #216	; 0xd8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	80080000 	.word	0x80080000
 80025ec:	50040300 	.word	0x50040300
 80025f0:	c7520000 	.word	0xc7520000
 80025f4:	50040000 	.word	0x50040000
 80025f8:	50040200 	.word	0x50040200
 80025fc:	20000000 	.word	0x20000000
 8002600:	053e2d63 	.word	0x053e2d63
 8002604:	cb840000 	.word	0xcb840000
 8002608:	80000001 	.word	0x80000001

0800260c <LL_ADC_IsEnabled>:
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	2b01      	cmp	r3, #1
 800261e:	d101      	bne.n	8002624 <LL_ADC_IsEnabled+0x18>
 8002620:	2301      	movs	r3, #1
 8002622:	e000      	b.n	8002626 <LL_ADC_IsEnabled+0x1a>
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <LL_ADC_REG_IsConversionOngoing>:
{
 8002632:	b480      	push	{r7}
 8002634:	b083      	sub	sp, #12
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b04      	cmp	r3, #4
 8002644:	d101      	bne.n	800264a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b09f      	sub	sp, #124	; 0x7c
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002662:	2300      	movs	r3, #0
 8002664:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266e:	2b01      	cmp	r3, #1
 8002670:	d101      	bne.n	8002676 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002672:	2302      	movs	r3, #2
 8002674:	e093      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2201      	movs	r2, #1
 800267a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800267e:	2300      	movs	r3, #0
 8002680:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002682:	2300      	movs	r3, #0
 8002684:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a47      	ldr	r2, [pc, #284]	; (80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d102      	bne.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002690:	4b46      	ldr	r3, [pc, #280]	; (80027ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	e001      	b.n	800269a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10b      	bne.n	80026b8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e072      	b.n	800279e <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7ff ffb9 	bl	8002632 <LL_ADC_REG_IsConversionOngoing>
 80026c0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff ffb3 	bl	8002632 <LL_ADC_REG_IsConversionOngoing>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d154      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80026d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d151      	bne.n	800277c <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80026d8:	4b35      	ldr	r3, [pc, #212]	; (80027b0 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80026da:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d02c      	beq.n	800273e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80026e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026f6:	035b      	lsls	r3, r3, #13
 80026f8:	430b      	orrs	r3, r1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026fe:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002700:	4829      	ldr	r0, [pc, #164]	; (80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002702:	f7ff ff83 	bl	800260c <LL_ADC_IsEnabled>
 8002706:	4604      	mov	r4, r0
 8002708:	4828      	ldr	r0, [pc, #160]	; (80027ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800270a:	f7ff ff7f 	bl	800260c <LL_ADC_IsEnabled>
 800270e:	4603      	mov	r3, r0
 8002710:	431c      	orrs	r4, r3
 8002712:	4828      	ldr	r0, [pc, #160]	; (80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002714:	f7ff ff7a 	bl	800260c <LL_ADC_IsEnabled>
 8002718:	4603      	mov	r3, r0
 800271a:	4323      	orrs	r3, r4
 800271c:	2b00      	cmp	r3, #0
 800271e:	d137      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002728:	f023 030f 	bic.w	r3, r3, #15
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	6811      	ldr	r1, [r2, #0]
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	6892      	ldr	r2, [r2, #8]
 8002734:	430a      	orrs	r2, r1
 8002736:	431a      	orrs	r2, r3
 8002738:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800273c:	e028      	b.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800273e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002748:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800274a:	4817      	ldr	r0, [pc, #92]	; (80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800274c:	f7ff ff5e 	bl	800260c <LL_ADC_IsEnabled>
 8002750:	4604      	mov	r4, r0
 8002752:	4816      	ldr	r0, [pc, #88]	; (80027ac <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002754:	f7ff ff5a 	bl	800260c <LL_ADC_IsEnabled>
 8002758:	4603      	mov	r3, r0
 800275a:	431c      	orrs	r4, r3
 800275c:	4815      	ldr	r0, [pc, #84]	; (80027b4 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800275e:	f7ff ff55 	bl	800260c <LL_ADC_IsEnabled>
 8002762:	4603      	mov	r3, r0
 8002764:	4323      	orrs	r3, r4
 8002766:	2b00      	cmp	r3, #0
 8002768:	d112      	bne.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800276a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002772:	f023 030f 	bic.w	r3, r3, #15
 8002776:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002778:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800277a:	e009      	b.n	8002790 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	f043 0220 	orr.w	r2, r3, #32
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800278e:	e000      	b.n	8002792 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002790:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800279a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800279e:	4618      	mov	r0, r3
 80027a0:	377c      	adds	r7, #124	; 0x7c
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd90      	pop	{r4, r7, pc}
 80027a6:	bf00      	nop
 80027a8:	50040000 	.word	0x50040000
 80027ac:	50040100 	.word	0x50040100
 80027b0:	50040300 	.word	0x50040300
 80027b4:	50040200 	.word	0x50040200

080027b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f003 0307 	and.w	r3, r3, #7
 80027c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027ce:	68ba      	ldr	r2, [r7, #8]
 80027d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027d4:	4013      	ands	r3, r2
 80027d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ea:	4a04      	ldr	r2, [pc, #16]	; (80027fc <__NVIC_SetPriorityGrouping+0x44>)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	60d3      	str	r3, [r2, #12]
}
 80027f0:	bf00      	nop
 80027f2:	3714      	adds	r7, #20
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002804:	4b04      	ldr	r3, [pc, #16]	; (8002818 <__NVIC_GetPriorityGrouping+0x18>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	f003 0307 	and.w	r3, r3, #7
}
 800280e:	4618      	mov	r0, r3
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr
 8002818:	e000ed00 	.word	0xe000ed00

0800281c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	2b00      	cmp	r3, #0
 800282c:	db0b      	blt.n	8002846 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800282e:	79fb      	ldrb	r3, [r7, #7]
 8002830:	f003 021f 	and.w	r2, r3, #31
 8002834:	4907      	ldr	r1, [pc, #28]	; (8002854 <__NVIC_EnableIRQ+0x38>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2001      	movs	r0, #1
 800283e:	fa00 f202 	lsl.w	r2, r0, r2
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	e000e100 	.word	0xe000e100

08002858 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	4603      	mov	r3, r0
 8002860:	6039      	str	r1, [r7, #0]
 8002862:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002868:	2b00      	cmp	r3, #0
 800286a:	db0a      	blt.n	8002882 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	b2da      	uxtb	r2, r3
 8002870:	490c      	ldr	r1, [pc, #48]	; (80028a4 <__NVIC_SetPriority+0x4c>)
 8002872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	440b      	add	r3, r1
 800287c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002880:	e00a      	b.n	8002898 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	b2da      	uxtb	r2, r3
 8002886:	4908      	ldr	r1, [pc, #32]	; (80028a8 <__NVIC_SetPriority+0x50>)
 8002888:	79fb      	ldrb	r3, [r7, #7]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	3b04      	subs	r3, #4
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	440b      	add	r3, r1
 8002896:	761a      	strb	r2, [r3, #24]
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000e100 	.word	0xe000e100
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b089      	sub	sp, #36	; 0x24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	f1c3 0307 	rsb	r3, r3, #7
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	bf28      	it	cs
 80028ca:	2304      	movcs	r3, #4
 80028cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2b06      	cmp	r3, #6
 80028d4:	d902      	bls.n	80028dc <NVIC_EncodePriority+0x30>
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	3b03      	subs	r3, #3
 80028da:	e000      	b.n	80028de <NVIC_EncodePriority+0x32>
 80028dc:	2300      	movs	r3, #0
 80028de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43da      	mvns	r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	401a      	ands	r2, r3
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028f4:	f04f 31ff 	mov.w	r1, #4294967295
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa01 f303 	lsl.w	r3, r1, r3
 80028fe:	43d9      	mvns	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002904:	4313      	orrs	r3, r2
         );
}
 8002906:	4618      	mov	r0, r3
 8002908:	3724      	adds	r7, #36	; 0x24
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7ff ff4c 	bl	80027b8 <__NVIC_SetPriorityGrouping>
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	4603      	mov	r3, r0
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
 8002934:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800293a:	f7ff ff61 	bl	8002800 <__NVIC_GetPriorityGrouping>
 800293e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68b9      	ldr	r1, [r7, #8]
 8002944:	6978      	ldr	r0, [r7, #20]
 8002946:	f7ff ffb1 	bl	80028ac <NVIC_EncodePriority>
 800294a:	4602      	mov	r2, r0
 800294c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff80 	bl	8002858 <__NVIC_SetPriority>
}
 8002958:	bf00      	nop
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800296a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ff54 	bl	800281c <__NVIC_EnableIRQ>
}
 8002974:	bf00      	nop
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002986:	2300      	movs	r3, #0
 8002988:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800298a:	e17f      	b.n	8002c8c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	2101      	movs	r1, #1
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	fa01 f303 	lsl.w	r3, r1, r3
 8002998:	4013      	ands	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8171 	beq.w	8002c86 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d00b      	beq.n	80029c4 <HAL_GPIO_Init+0x48>
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b02      	cmp	r3, #2
 80029b2:	d007      	beq.n	80029c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029b8:	2b11      	cmp	r3, #17
 80029ba:	d003      	beq.n	80029c4 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b12      	cmp	r3, #18
 80029c2:	d130      	bne.n	8002a26 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	693a      	ldr	r2, [r7, #16]
 80029d8:	4013      	ands	r3, r2
 80029da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	005b      	lsls	r3, r3, #1
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029fa:	2201      	movs	r2, #1
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	4013      	ands	r3, r2
 8002a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	091b      	lsrs	r3, r3, #4
 8002a10:	f003 0201 	and.w	r2, r3, #1
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	693a      	ldr	r2, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	693a      	ldr	r2, [r7, #16]
 8002a24:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d118      	bne.n	8002a64 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a38:	2201      	movs	r2, #1
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	08db      	lsrs	r3, r3, #3
 8002a4e:	f003 0201 	and.w	r2, r3, #1
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	fa02 f303 	lsl.w	r3, r2, r3
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	693a      	ldr	r2, [r7, #16]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d003      	beq.n	8002aa4 <HAL_GPIO_Init+0x128>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	2b12      	cmp	r3, #18
 8002aa2:	d123      	bne.n	8002aec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	08da      	lsrs	r2, r3, #3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3208      	adds	r2, #8
 8002aac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	220f      	movs	r2, #15
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	691a      	ldr	r2, [r3, #16]
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	f003 0307 	and.w	r3, r3, #7
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	08da      	lsrs	r2, r3, #3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	3208      	adds	r2, #8
 8002ae6:	6939      	ldr	r1, [r7, #16]
 8002ae8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	2203      	movs	r2, #3
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0203 	and.w	r2, r3, #3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	f000 80ac 	beq.w	8002c86 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <HAL_GPIO_Init+0x330>)
 8002b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b32:	4a5e      	ldr	r2, [pc, #376]	; (8002cac <HAL_GPIO_Init+0x330>)
 8002b34:	f043 0301 	orr.w	r3, r3, #1
 8002b38:	6613      	str	r3, [r2, #96]	; 0x60
 8002b3a:	4b5c      	ldr	r3, [pc, #368]	; (8002cac <HAL_GPIO_Init+0x330>)
 8002b3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b46:	4a5a      	ldr	r2, [pc, #360]	; (8002cb0 <HAL_GPIO_Init+0x334>)
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	089b      	lsrs	r3, r3, #2
 8002b4c:	3302      	adds	r3, #2
 8002b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b52:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	220f      	movs	r2, #15
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	43db      	mvns	r3, r3
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	4013      	ands	r3, r2
 8002b68:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b70:	d025      	beq.n	8002bbe <HAL_GPIO_Init+0x242>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4f      	ldr	r2, [pc, #316]	; (8002cb4 <HAL_GPIO_Init+0x338>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d01f      	beq.n	8002bba <HAL_GPIO_Init+0x23e>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4e      	ldr	r2, [pc, #312]	; (8002cb8 <HAL_GPIO_Init+0x33c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d019      	beq.n	8002bb6 <HAL_GPIO_Init+0x23a>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4d      	ldr	r2, [pc, #308]	; (8002cbc <HAL_GPIO_Init+0x340>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d013      	beq.n	8002bb2 <HAL_GPIO_Init+0x236>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4c      	ldr	r2, [pc, #304]	; (8002cc0 <HAL_GPIO_Init+0x344>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00d      	beq.n	8002bae <HAL_GPIO_Init+0x232>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <HAL_GPIO_Init+0x348>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d007      	beq.n	8002baa <HAL_GPIO_Init+0x22e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a4a      	ldr	r2, [pc, #296]	; (8002cc8 <HAL_GPIO_Init+0x34c>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d101      	bne.n	8002ba6 <HAL_GPIO_Init+0x22a>
 8002ba2:	2306      	movs	r3, #6
 8002ba4:	e00c      	b.n	8002bc0 <HAL_GPIO_Init+0x244>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e00a      	b.n	8002bc0 <HAL_GPIO_Init+0x244>
 8002baa:	2305      	movs	r3, #5
 8002bac:	e008      	b.n	8002bc0 <HAL_GPIO_Init+0x244>
 8002bae:	2304      	movs	r3, #4
 8002bb0:	e006      	b.n	8002bc0 <HAL_GPIO_Init+0x244>
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e004      	b.n	8002bc0 <HAL_GPIO_Init+0x244>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	e002      	b.n	8002bc0 <HAL_GPIO_Init+0x244>
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e000      	b.n	8002bc0 <HAL_GPIO_Init+0x244>
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	f002 0203 	and.w	r2, r2, #3
 8002bc6:	0092      	lsls	r2, r2, #2
 8002bc8:	4093      	lsls	r3, r2
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002bd0:	4937      	ldr	r1, [pc, #220]	; (8002cb0 <HAL_GPIO_Init+0x334>)
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	089b      	lsrs	r3, r3, #2
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002bde:	4b3b      	ldr	r3, [pc, #236]	; (8002ccc <HAL_GPIO_Init+0x350>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c02:	4a32      	ldr	r2, [pc, #200]	; (8002ccc <HAL_GPIO_Init+0x350>)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c08:	4b30      	ldr	r3, [pc, #192]	; (8002ccc <HAL_GPIO_Init+0x350>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	43db      	mvns	r3, r3
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4013      	ands	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d003      	beq.n	8002c2c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c2c:	4a27      	ldr	r2, [pc, #156]	; (8002ccc <HAL_GPIO_Init+0x350>)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <HAL_GPIO_Init+0x350>)
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	693a      	ldr	r2, [r7, #16]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c56:	4a1d      	ldr	r2, [pc, #116]	; (8002ccc <HAL_GPIO_Init+0x350>)
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <HAL_GPIO_Init+0x350>)
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c80:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <HAL_GPIO_Init+0x350>)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	3301      	adds	r3, #1
 8002c8a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	fa22 f303 	lsr.w	r3, r2, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f47f ae78 	bne.w	800298c <HAL_GPIO_Init+0x10>
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	371c      	adds	r7, #28
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40010000 	.word	0x40010000
 8002cb4:	48000400 	.word	0x48000400
 8002cb8:	48000800 	.word	0x48000800
 8002cbc:	48000c00 	.word	0x48000c00
 8002cc0:	48001000 	.word	0x48001000
 8002cc4:	48001400 	.word	0x48001400
 8002cc8:	48001800 	.word	0x48001800
 8002ccc:	40010400 	.word	0x40010400

08002cd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	460b      	mov	r3, r1
 8002cda:	807b      	strh	r3, [r7, #2]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce0:	787b      	ldrb	r3, [r7, #1]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cec:	e002      	b.n	8002cf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d12:	887a      	ldrh	r2, [r7, #2]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4013      	ands	r3, r2
 8002d18:	041a      	lsls	r2, r3, #16
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43d9      	mvns	r1, r3
 8002d1e:	887b      	ldrh	r3, [r7, #2]
 8002d20:	400b      	ands	r3, r1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	619a      	str	r2, [r3, #24]
}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d3e:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d40:	695a      	ldr	r2, [r3, #20]
 8002d42:	88fb      	ldrh	r3, [r7, #6]
 8002d44:	4013      	ands	r3, r2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d4c:	88fb      	ldrh	r3, [r7, #6]
 8002d4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d50:	88fb      	ldrh	r3, [r7, #6]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f000 f806 	bl	8002d64 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d58:	bf00      	nop
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	40010400 	.word	0x40010400

08002d64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
	...

08002d7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002d80:	4b04      	ldr	r3, [pc, #16]	; (8002d94 <HAL_PWREx_GetVoltageRange+0x18>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40007000 	.word	0x40007000

08002d98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da6:	d130      	bne.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002da8:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db4:	d038      	beq.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002db6:	4b20      	ldr	r3, [pc, #128]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dc0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dc6:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2232      	movs	r2, #50	; 0x32
 8002dcc:	fb02 f303 	mul.w	r3, r2, r3
 8002dd0:	4a1b      	ldr	r2, [pc, #108]	; (8002e40 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9b      	lsrs	r3, r3, #18
 8002dd8:	3301      	adds	r3, #1
 8002dda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ddc:	e002      	b.n	8002de4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002de4:	4b14      	ldr	r3, [pc, #80]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002df0:	d102      	bne.n	8002df8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1f2      	bne.n	8002dde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002df8:	4b0f      	ldr	r3, [pc, #60]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002dfa:	695b      	ldr	r3, [r3, #20]
 8002dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e04:	d110      	bne.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e00f      	b.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e0a:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e16:	d007      	beq.n	8002e28 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e20:	4a05      	ldr	r2, [pc, #20]	; (8002e38 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e26:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
 8002e36:	bf00      	nop
 8002e38:	40007000 	.word	0x40007000
 8002e3c:	20000000 	.word	0x20000000
 8002e40:	431bde83 	.word	0x431bde83

08002e44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d101      	bne.n	8002e56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e3d4      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e56:	4ba1      	ldr	r3, [pc, #644]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e60:	4b9e      	ldr	r3, [pc, #632]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f000 80e4 	beq.w	8003040 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d007      	beq.n	8002e8e <HAL_RCC_OscConfig+0x4a>
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	2b0c      	cmp	r3, #12
 8002e82:	f040 808b 	bne.w	8002f9c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	f040 8087 	bne.w	8002f9c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e8e:	4b93      	ldr	r3, [pc, #588]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x62>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e3ac      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1a      	ldr	r2, [r3, #32]
 8002eaa:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d004      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x7c>
 8002eb6:	4b89      	ldr	r3, [pc, #548]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ebe:	e005      	b.n	8002ecc <HAL_RCC_OscConfig+0x88>
 8002ec0:	4b86      	ldr	r3, [pc, #536]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ec6:	091b      	lsrs	r3, r3, #4
 8002ec8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d223      	bcs.n	8002f18 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fd73 	bl	80039c0 <RCC_SetFlashLatencyFromMSIRange>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e38d      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ee4:	4b7d      	ldr	r3, [pc, #500]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a7c      	ldr	r2, [pc, #496]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002eea:	f043 0308 	orr.w	r3, r3, #8
 8002eee:	6013      	str	r3, [r2, #0]
 8002ef0:	4b7a      	ldr	r3, [pc, #488]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4977      	ldr	r1, [pc, #476]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f02:	4b76      	ldr	r3, [pc, #472]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	021b      	lsls	r3, r3, #8
 8002f10:	4972      	ldr	r1, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	604b      	str	r3, [r1, #4]
 8002f16:	e025      	b.n	8002f64 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f18:	4b70      	ldr	r3, [pc, #448]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a6f      	ldr	r2, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002f1e:	f043 0308 	orr.w	r3, r3, #8
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b6d      	ldr	r3, [pc, #436]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	496a      	ldr	r1, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f36:	4b69      	ldr	r3, [pc, #420]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	021b      	lsls	r3, r3, #8
 8002f44:	4965      	ldr	r1, [pc, #404]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d109      	bne.n	8002f64 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a1b      	ldr	r3, [r3, #32]
 8002f54:	4618      	mov	r0, r3
 8002f56:	f000 fd33 	bl	80039c0 <RCC_SetFlashLatencyFromMSIRange>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e34d      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f64:	f000 fc36 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	4b5c      	ldr	r3, [pc, #368]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	091b      	lsrs	r3, r3, #4
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	495a      	ldr	r1, [pc, #360]	; (80030e0 <HAL_RCC_OscConfig+0x29c>)
 8002f76:	5ccb      	ldrb	r3, [r1, r3]
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f80:	4a58      	ldr	r2, [pc, #352]	; (80030e4 <HAL_RCC_OscConfig+0x2a0>)
 8002f82:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002f84:	4b58      	ldr	r3, [pc, #352]	; (80030e8 <HAL_RCC_OscConfig+0x2a4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fe fb15 	bl	80015b8 <HAL_InitTick>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002f92:	7bfb      	ldrb	r3, [r7, #15]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d052      	beq.n	800303e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
 8002f9a:	e331      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d032      	beq.n	800300a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002fa4:	4b4d      	ldr	r3, [pc, #308]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a4c      	ldr	r2, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002faa:	f043 0301 	orr.w	r3, r3, #1
 8002fae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002fb0:	f7fe fc4e 	bl	8001850 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002fb8:	f7fe fc4a 	bl	8001850 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e31a      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fca:	4b44      	ldr	r3, [pc, #272]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d0f0      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd6:	4b41      	ldr	r3, [pc, #260]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a40      	ldr	r2, [pc, #256]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002fdc:	f043 0308 	orr.w	r3, r3, #8
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	4b3e      	ldr	r3, [pc, #248]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	493b      	ldr	r1, [pc, #236]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ff4:	4b39      	ldr	r3, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	021b      	lsls	r3, r3, #8
 8003002:	4936      	ldr	r1, [pc, #216]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8003004:	4313      	orrs	r3, r2
 8003006:	604b      	str	r3, [r1, #4]
 8003008:	e01a      	b.n	8003040 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800300a:	4b34      	ldr	r3, [pc, #208]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a33      	ldr	r2, [pc, #204]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8003010:	f023 0301 	bic.w	r3, r3, #1
 8003014:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003016:	f7fe fc1b 	bl	8001850 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800301e:	f7fe fc17 	bl	8001850 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e2e7      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x1da>
 800303c:	e000      	b.n	8003040 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800303e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	d074      	beq.n	8003136 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	2b08      	cmp	r3, #8
 8003050:	d005      	beq.n	800305e <HAL_RCC_OscConfig+0x21a>
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b0c      	cmp	r3, #12
 8003056:	d10e      	bne.n	8003076 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	2b03      	cmp	r3, #3
 800305c:	d10b      	bne.n	8003076 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800305e:	4b1f      	ldr	r3, [pc, #124]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d064      	beq.n	8003134 <HAL_RCC_OscConfig+0x2f0>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d160      	bne.n	8003134 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e2c4      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800307e:	d106      	bne.n	800308e <HAL_RCC_OscConfig+0x24a>
 8003080:	4b16      	ldr	r3, [pc, #88]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a15      	ldr	r2, [pc, #84]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 8003086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	e01d      	b.n	80030ca <HAL_RCC_OscConfig+0x286>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003096:	d10c      	bne.n	80030b2 <HAL_RCC_OscConfig+0x26e>
 8003098:	4b10      	ldr	r3, [pc, #64]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a0f      	ldr	r2, [pc, #60]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 800309e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a0c      	ldr	r2, [pc, #48]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 80030aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	e00b      	b.n	80030ca <HAL_RCC_OscConfig+0x286>
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a09      	ldr	r2, [pc, #36]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 80030b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a06      	ldr	r2, [pc, #24]	; (80030dc <HAL_RCC_OscConfig+0x298>)
 80030c4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030c8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01c      	beq.n	800310c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d2:	f7fe fbbd 	bl	8001850 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d8:	e011      	b.n	80030fe <HAL_RCC_OscConfig+0x2ba>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	080097c4 	.word	0x080097c4
 80030e4:	20000000 	.word	0x20000000
 80030e8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030ec:	f7fe fbb0 	bl	8001850 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	; 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e280      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030fe:	4baf      	ldr	r3, [pc, #700]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0x2a8>
 800310a:	e014      	b.n	8003136 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe fba0 	bl	8001850 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003114:	f7fe fb9c 	bl	8001850 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	; 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e26c      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003126:	4ba5      	ldr	r3, [pc, #660]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x2d0>
 8003132:	e000      	b.n	8003136 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d060      	beq.n	8003204 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	2b04      	cmp	r3, #4
 8003146:	d005      	beq.n	8003154 <HAL_RCC_OscConfig+0x310>
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b0c      	cmp	r3, #12
 800314c:	d119      	bne.n	8003182 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b02      	cmp	r3, #2
 8003152:	d116      	bne.n	8003182 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003154:	4b99      	ldr	r3, [pc, #612]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800315c:	2b00      	cmp	r3, #0
 800315e:	d005      	beq.n	800316c <HAL_RCC_OscConfig+0x328>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d101      	bne.n	800316c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e249      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800316c:	4b93      	ldr	r3, [pc, #588]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	4990      	ldr	r1, [pc, #576]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800317c:	4313      	orrs	r3, r2
 800317e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003180:	e040      	b.n	8003204 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d023      	beq.n	80031d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800318a:	4b8c      	ldr	r3, [pc, #560]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a8b      	ldr	r2, [pc, #556]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003190:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003194:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003196:	f7fe fb5b 	bl	8001850 <HAL_GetTick>
 800319a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800319c:	e008      	b.n	80031b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800319e:	f7fe fb57 	bl	8001850 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b02      	cmp	r3, #2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e227      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031b0:	4b82      	ldr	r3, [pc, #520]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031bc:	4b7f      	ldr	r3, [pc, #508]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	061b      	lsls	r3, r3, #24
 80031ca:	497c      	ldr	r1, [pc, #496]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
 80031d0:	e018      	b.n	8003204 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d2:	4b7a      	ldr	r3, [pc, #488]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a79      	ldr	r2, [pc, #484]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 80031d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031de:	f7fe fb37 	bl	8001850 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e6:	f7fe fb33 	bl	8001850 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e203      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80031f8:	4b70      	ldr	r3, [pc, #448]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003200:	2b00      	cmp	r3, #0
 8003202:	d1f0      	bne.n	80031e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0308 	and.w	r3, r3, #8
 800320c:	2b00      	cmp	r3, #0
 800320e:	d03c      	beq.n	800328a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d01c      	beq.n	8003252 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003218:	4b68      	ldr	r3, [pc, #416]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800321a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800321e:	4a67      	ldr	r2, [pc, #412]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003220:	f043 0301 	orr.w	r3, r3, #1
 8003224:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003228:	f7fe fb12 	bl	8001850 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003230:	f7fe fb0e 	bl	8001850 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1de      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003242:	4b5e      	ldr	r3, [pc, #376]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003248:	f003 0302 	and.w	r3, r3, #2
 800324c:	2b00      	cmp	r3, #0
 800324e:	d0ef      	beq.n	8003230 <HAL_RCC_OscConfig+0x3ec>
 8003250:	e01b      	b.n	800328a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003252:	4b5a      	ldr	r3, [pc, #360]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003258:	4a58      	ldr	r2, [pc, #352]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800325a:	f023 0301 	bic.w	r3, r3, #1
 800325e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003262:	f7fe faf5 	bl	8001850 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800326a:	f7fe faf1 	bl	8001850 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e1c1      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800327c:	4b4f      	ldr	r3, [pc, #316]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800327e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d1ef      	bne.n	800326a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 80a6 	beq.w	80033e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003298:	2300      	movs	r3, #0
 800329a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800329c:	4b47      	ldr	r3, [pc, #284]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800329e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10d      	bne.n	80032c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a8:	4b44      	ldr	r3, [pc, #272]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 80032aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ac:	4a43      	ldr	r2, [pc, #268]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 80032ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032b2:	6593      	str	r3, [r2, #88]	; 0x58
 80032b4:	4b41      	ldr	r3, [pc, #260]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 80032b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032c0:	2301      	movs	r3, #1
 80032c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032c4:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <HAL_RCC_OscConfig+0x57c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d118      	bne.n	8003302 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_RCC_OscConfig+0x57c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a3a      	ldr	r2, [pc, #232]	; (80033c0 <HAL_RCC_OscConfig+0x57c>)
 80032d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032dc:	f7fe fab8 	bl	8001850 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032e2:	e008      	b.n	80032f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032e4:	f7fe fab4 	bl	8001850 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e184      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80032f6:	4b32      	ldr	r3, [pc, #200]	; (80033c0 <HAL_RCC_OscConfig+0x57c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0f0      	beq.n	80032e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	689b      	ldr	r3, [r3, #8]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d108      	bne.n	800331c <HAL_RCC_OscConfig+0x4d8>
 800330a:	4b2c      	ldr	r3, [pc, #176]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800330c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003310:	4a2a      	ldr	r2, [pc, #168]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003312:	f043 0301 	orr.w	r3, r3, #1
 8003316:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800331a:	e024      	b.n	8003366 <HAL_RCC_OscConfig+0x522>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2b05      	cmp	r3, #5
 8003322:	d110      	bne.n	8003346 <HAL_RCC_OscConfig+0x502>
 8003324:	4b25      	ldr	r3, [pc, #148]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332a:	4a24      	ldr	r2, [pc, #144]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800332c:	f043 0304 	orr.w	r3, r3, #4
 8003330:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003334:	4b21      	ldr	r3, [pc, #132]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800333a:	4a20      	ldr	r2, [pc, #128]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800333c:	f043 0301 	orr.w	r3, r3, #1
 8003340:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003344:	e00f      	b.n	8003366 <HAL_RCC_OscConfig+0x522>
 8003346:	4b1d      	ldr	r3, [pc, #116]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334c:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800334e:	f023 0301 	bic.w	r3, r3, #1
 8003352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003356:	4b19      	ldr	r3, [pc, #100]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335c:	4a17      	ldr	r2, [pc, #92]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800335e:	f023 0304 	bic.w	r3, r3, #4
 8003362:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d016      	beq.n	800339c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800336e:	f7fe fa6f 	bl	8001850 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003374:	e00a      	b.n	800338c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fe fa6b 	bl	8001850 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e139      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800338c:	4b0b      	ldr	r3, [pc, #44]	; (80033bc <HAL_RCC_OscConfig+0x578>)
 800338e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0ed      	beq.n	8003376 <HAL_RCC_OscConfig+0x532>
 800339a:	e01a      	b.n	80033d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fe fa58 	bl	8001850 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033a2:	e00f      	b.n	80033c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7fe fa54 	bl	8001850 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d906      	bls.n	80033c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e122      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
 80033ba:	bf00      	nop
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80033c4:	4b90      	ldr	r3, [pc, #576]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1e8      	bne.n	80033a4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d2:	7ffb      	ldrb	r3, [r7, #31]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d8:	4b8b      	ldr	r3, [pc, #556]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033dc:	4a8a      	ldr	r2, [pc, #552]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80033de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8108 	beq.w	80035fe <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	f040 80d0 	bne.w	8003598 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80033f8:	4b83      	ldr	r3, [pc, #524]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	f003 0203 	and.w	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	429a      	cmp	r2, r3
 800340a:	d130      	bne.n	800346e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	3b01      	subs	r3, #1
 8003418:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d127      	bne.n	800346e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800342a:	429a      	cmp	r2, r3
 800342c:	d11f      	bne.n	800346e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003438:	2a07      	cmp	r2, #7
 800343a:	bf14      	ite	ne
 800343c:	2201      	movne	r2, #1
 800343e:	2200      	moveq	r2, #0
 8003440:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003442:	4293      	cmp	r3, r2
 8003444:	d113      	bne.n	800346e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003450:	085b      	lsrs	r3, r3, #1
 8003452:	3b01      	subs	r3, #1
 8003454:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003456:	429a      	cmp	r2, r3
 8003458:	d109      	bne.n	800346e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	3b01      	subs	r3, #1
 8003468:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d06e      	beq.n	800354c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b0c      	cmp	r3, #12
 8003472:	d069      	beq.n	8003548 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003474:	4b64      	ldr	r3, [pc, #400]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d105      	bne.n	800348c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003480:	4b61      	ldr	r3, [pc, #388]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0b7      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003490:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a5c      	ldr	r2, [pc, #368]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 8003496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800349a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800349c:	f7fe f9d8 	bl	8001850 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a4:	f7fe f9d4 	bl	8001850 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e0a4      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80034b6:	4b54      	ldr	r3, [pc, #336]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034c2:	4b51      	ldr	r3, [pc, #324]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80034c4:	68da      	ldr	r2, [r3, #12]
 80034c6:	4b51      	ldr	r3, [pc, #324]	; (800360c <HAL_RCC_OscConfig+0x7c8>)
 80034c8:	4013      	ands	r3, r2
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80034d2:	3a01      	subs	r2, #1
 80034d4:	0112      	lsls	r2, r2, #4
 80034d6:	4311      	orrs	r1, r2
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034dc:	0212      	lsls	r2, r2, #8
 80034de:	4311      	orrs	r1, r2
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80034e4:	0852      	lsrs	r2, r2, #1
 80034e6:	3a01      	subs	r2, #1
 80034e8:	0552      	lsls	r2, r2, #21
 80034ea:	4311      	orrs	r1, r2
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80034f0:	0852      	lsrs	r2, r2, #1
 80034f2:	3a01      	subs	r2, #1
 80034f4:	0652      	lsls	r2, r2, #25
 80034f6:	4311      	orrs	r1, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034fc:	0912      	lsrs	r2, r2, #4
 80034fe:	0452      	lsls	r2, r2, #17
 8003500:	430a      	orrs	r2, r1
 8003502:	4941      	ldr	r1, [pc, #260]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 8003504:	4313      	orrs	r3, r2
 8003506:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003508:	4b3f      	ldr	r3, [pc, #252]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a3e      	ldr	r2, [pc, #248]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 800350e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003512:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003514:	4b3c      	ldr	r3, [pc, #240]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	4a3b      	ldr	r2, [pc, #236]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 800351a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800351e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003520:	f7fe f996 	bl	8001850 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003526:	e008      	b.n	800353a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003528:	f7fe f992 	bl	8001850 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e062      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800353a:	4b33      	ldr	r3, [pc, #204]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d0f0      	beq.n	8003528 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003546:	e05a      	b.n	80035fe <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e059      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800354c:	4b2e      	ldr	r3, [pc, #184]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003554:	2b00      	cmp	r3, #0
 8003556:	d152      	bne.n	80035fe <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003558:	4b2b      	ldr	r3, [pc, #172]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a2a      	ldr	r2, [pc, #168]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 800355e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003562:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003564:	4b28      	ldr	r3, [pc, #160]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a27      	ldr	r2, [pc, #156]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003570:	f7fe f96e 	bl	8001850 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe f96a 	bl	8001850 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e03a      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800358a:	4b1f      	ldr	r3, [pc, #124]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x734>
 8003596:	e032      	b.n	80035fe <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b0c      	cmp	r3, #12
 800359c:	d02d      	beq.n	80035fa <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800359e:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a19      	ldr	r2, [pc, #100]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80035a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80035aa:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d105      	bne.n	80035c2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	4a13      	ldr	r2, [pc, #76]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80035bc:	f023 0303 	bic.w	r3, r3, #3
 80035c0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	4a10      	ldr	r2, [pc, #64]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80035c8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80035cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d2:	f7fe f93d 	bl	8001850 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035da:	f7fe f939 	bl	8001850 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e009      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <HAL_RCC_OscConfig+0x7c4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1f0      	bne.n	80035da <HAL_RCC_OscConfig+0x796>
 80035f8:	e001      	b.n	80035fe <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e000      	b.n	8003600 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3720      	adds	r7, #32
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000
 800360c:	f99d808c 	.word	0xf99d808c

08003610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0c8      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b66      	ldr	r3, [pc, #408]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b63      	ldr	r3, [pc, #396]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4961      	ldr	r1, [pc, #388]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b5f      	ldr	r3, [pc, #380]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b0      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0301 	and.w	r3, r3, #1
 800365c:	2b00      	cmp	r3, #0
 800365e:	d04c      	beq.n	80036fa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2b03      	cmp	r3, #3
 8003666:	d107      	bne.n	8003678 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003668:	4b56      	ldr	r3, [pc, #344]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d121      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e09e      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d107      	bne.n	8003690 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003680:	4b50      	ldr	r3, [pc, #320]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d115      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e092      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d107      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003698:	4b4a      	ldr	r3, [pc, #296]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d109      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e086      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80036a8:	4b46      	ldr	r3, [pc, #280]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e07e      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b8:	4b42      	ldr	r3, [pc, #264]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f023 0203 	bic.w	r2, r3, #3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	493f      	ldr	r1, [pc, #252]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 80036c6:	4313      	orrs	r3, r2
 80036c8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036ca:	f7fe f8c1 	bl	8001850 <HAL_GetTick>
 80036ce:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d2:	f7fe f8bd 	bl	8001850 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e066      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e8:	4b36      	ldr	r3, [pc, #216]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 020c 	and.w	r2, r3, #12
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d1eb      	bne.n	80036d2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003706:	4b2f      	ldr	r3, [pc, #188]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	492c      	ldr	r1, [pc, #176]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003718:	4b29      	ldr	r3, [pc, #164]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	429a      	cmp	r2, r3
 8003724:	d210      	bcs.n	8003748 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003726:	4b26      	ldr	r3, [pc, #152]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f023 0207 	bic.w	r2, r3, #7
 800372e:	4924      	ldr	r1, [pc, #144]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003736:	4b22      	ldr	r3, [pc, #136]	; (80037c0 <HAL_RCC_ClockConfig+0x1b0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	683a      	ldr	r2, [r7, #0]
 8003740:	429a      	cmp	r2, r3
 8003742:	d001      	beq.n	8003748 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e036      	b.n	80037b6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003754:	4b1b      	ldr	r3, [pc, #108]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	4918      	ldr	r1, [pc, #96]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003762:	4313      	orrs	r3, r2
 8003764:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0308 	and.w	r3, r3, #8
 800376e:	2b00      	cmp	r3, #0
 8003770:	d009      	beq.n	8003786 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4910      	ldr	r1, [pc, #64]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 8003782:	4313      	orrs	r3, r2
 8003784:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003786:	f000 f825 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 800378a:	4602      	mov	r2, r0
 800378c:	4b0d      	ldr	r3, [pc, #52]	; (80037c4 <HAL_RCC_ClockConfig+0x1b4>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	490c      	ldr	r1, [pc, #48]	; (80037c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	5ccb      	ldrb	r3, [r1, r3]
 800379a:	f003 031f 	and.w	r3, r3, #31
 800379e:	fa22 f303 	lsr.w	r3, r2, r3
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7fd ff04 	bl	80015b8 <HAL_InitTick>
 80037b0:	4603      	mov	r3, r0
 80037b2:	72fb      	strb	r3, [r7, #11]

  return status;
 80037b4:	7afb      	ldrb	r3, [r7, #11]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	40022000 	.word	0x40022000
 80037c4:	40021000 	.word	0x40021000
 80037c8:	080097c4 	.word	0x080097c4
 80037cc:	20000000 	.word	0x20000000
 80037d0:	20000004 	.word	0x20000004

080037d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	; 0x24
 80037d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80037da:	2300      	movs	r3, #0
 80037dc:	61fb      	str	r3, [r7, #28]
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037e2:	4b3e      	ldr	r3, [pc, #248]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037ec:	4b3b      	ldr	r3, [pc, #236]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x34>
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d121      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d11e      	bne.n	8003846 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003808:	4b34      	ldr	r3, [pc, #208]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d107      	bne.n	8003824 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003814:	4b31      	ldr	r3, [pc, #196]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003816:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800381a:	0a1b      	lsrs	r3, r3, #8
 800381c:	f003 030f 	and.w	r3, r3, #15
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	e005      	b.n	8003830 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003824:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	091b      	lsrs	r3, r3, #4
 800382a:	f003 030f 	and.w	r3, r3, #15
 800382e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003830:	4a2b      	ldr	r2, [pc, #172]	; (80038e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10d      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003844:	e00a      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	2b04      	cmp	r3, #4
 800384a:	d102      	bne.n	8003852 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800384c:	4b25      	ldr	r3, [pc, #148]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800384e:	61bb      	str	r3, [r7, #24]
 8003850:	e004      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d101      	bne.n	800385c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003858:	4b23      	ldr	r3, [pc, #140]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800385a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b0c      	cmp	r3, #12
 8003860:	d134      	bne.n	80038cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003862:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d003      	beq.n	800387a <HAL_RCC_GetSysClockFreq+0xa6>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b03      	cmp	r3, #3
 8003876:	d003      	beq.n	8003880 <HAL_RCC_GetSysClockFreq+0xac>
 8003878:	e005      	b.n	8003886 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800387a:	4b1a      	ldr	r3, [pc, #104]	; (80038e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800387c:	617b      	str	r3, [r7, #20]
      break;
 800387e:	e005      	b.n	800388c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003882:	617b      	str	r3, [r7, #20]
      break;
 8003884:	e002      	b.n	800388c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	617b      	str	r3, [r7, #20]
      break;
 800388a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800388c:	4b13      	ldr	r3, [pc, #76]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	091b      	lsrs	r3, r3, #4
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	3301      	adds	r3, #1
 8003898:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800389a:	4b10      	ldr	r3, [pc, #64]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	0a1b      	lsrs	r3, r3, #8
 80038a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	fb02 f203 	mul.w	r2, r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80038b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <HAL_RCC_GetSysClockFreq+0x108>)
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	0e5b      	lsrs	r3, r3, #25
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	3301      	adds	r3, #1
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80038cc:	69bb      	ldr	r3, [r7, #24]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3724      	adds	r7, #36	; 0x24
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	080097dc 	.word	0x080097dc
 80038e4:	00f42400 	.word	0x00f42400
 80038e8:	007a1200 	.word	0x007a1200

080038ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038ec:	b480      	push	{r7}
 80038ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038f0:	4b03      	ldr	r3, [pc, #12]	; (8003900 <HAL_RCC_GetHCLKFreq+0x14>)
 80038f2:	681b      	ldr	r3, [r3, #0]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
 80038fe:	bf00      	nop
 8003900:	20000000 	.word	0x20000000

08003904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003908:	f7ff fff0 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 800390c:	4602      	mov	r2, r0
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	0a1b      	lsrs	r3, r3, #8
 8003914:	f003 0307 	and.w	r3, r3, #7
 8003918:	4904      	ldr	r1, [pc, #16]	; (800392c <HAL_RCC_GetPCLK1Freq+0x28>)
 800391a:	5ccb      	ldrb	r3, [r1, r3]
 800391c:	f003 031f 	and.w	r3, r3, #31
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000
 800392c:	080097d4 	.word	0x080097d4

08003930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003934:	f7ff ffda 	bl	80038ec <HAL_RCC_GetHCLKFreq>
 8003938:	4602      	mov	r2, r0
 800393a:	4b06      	ldr	r3, [pc, #24]	; (8003954 <HAL_RCC_GetPCLK2Freq+0x24>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	0adb      	lsrs	r3, r3, #11
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	4904      	ldr	r1, [pc, #16]	; (8003958 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003946:	5ccb      	ldrb	r3, [r1, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003950:	4618      	mov	r0, r3
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40021000 	.word	0x40021000
 8003958:	080097d4 	.word	0x080097d4

0800395c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	220f      	movs	r2, #15
 800396a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800396c:	4b12      	ldr	r3, [pc, #72]	; (80039b8 <HAL_RCC_GetClockConfig+0x5c>)
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f003 0203 	and.w	r2, r3, #3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003978:	4b0f      	ldr	r3, [pc, #60]	; (80039b8 <HAL_RCC_GetClockConfig+0x5c>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003984:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003990:	4b09      	ldr	r3, [pc, #36]	; (80039b8 <HAL_RCC_GetClockConfig+0x5c>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	08db      	lsrs	r3, r3, #3
 8003996:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800399e:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_RCC_GetClockConfig+0x60>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0207 	and.w	r2, r3, #7
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	601a      	str	r2, [r3, #0]
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000
 80039bc:	40022000 	.word	0x40022000

080039c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b086      	sub	sp, #24
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80039c8:	2300      	movs	r3, #0
 80039ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80039cc:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d003      	beq.n	80039e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80039d8:	f7ff f9d0 	bl	8002d7c <HAL_PWREx_GetVoltageRange>
 80039dc:	6178      	str	r0, [r7, #20]
 80039de:	e014      	b.n	8003a0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	4a24      	ldr	r2, [pc, #144]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ea:	6593      	str	r3, [r2, #88]	; 0x58
 80039ec:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80039ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80039f8:	f7ff f9c0 	bl	8002d7c <HAL_PWREx_GetVoltageRange>
 80039fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	4a1d      	ldr	r2, [pc, #116]	; (8003a78 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a10:	d10b      	bne.n	8003a2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b80      	cmp	r3, #128	; 0x80
 8003a16:	d919      	bls.n	8003a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2ba0      	cmp	r3, #160	; 0xa0
 8003a1c:	d902      	bls.n	8003a24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a1e:	2302      	movs	r3, #2
 8003a20:	613b      	str	r3, [r7, #16]
 8003a22:	e013      	b.n	8003a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a24:	2301      	movs	r3, #1
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	e010      	b.n	8003a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b80      	cmp	r3, #128	; 0x80
 8003a2e:	d902      	bls.n	8003a36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003a30:	2303      	movs	r3, #3
 8003a32:	613b      	str	r3, [r7, #16]
 8003a34:	e00a      	b.n	8003a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b80      	cmp	r3, #128	; 0x80
 8003a3a:	d102      	bne.n	8003a42 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	613b      	str	r3, [r7, #16]
 8003a40:	e004      	b.n	8003a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b70      	cmp	r3, #112	; 0x70
 8003a46:	d101      	bne.n	8003a4c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003a48:	2301      	movs	r3, #1
 8003a4a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 0207 	bic.w	r2, r3, #7
 8003a54:	4909      	ldr	r1, [pc, #36]	; (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003a5c:	4b07      	ldr	r3, [pc, #28]	; (8003a7c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d001      	beq.n	8003a6e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40021000 	.word	0x40021000
 8003a7c:	40022000 	.word	0x40022000

08003a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a88:	2300      	movs	r3, #0
 8003a8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d041      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003aa0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aa4:	d02a      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003aa6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003aaa:	d824      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003aac:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab0:	d008      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ab2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ab6:	d81e      	bhi.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d00a      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003abc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac0:	d010      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003ac2:	e018      	b.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003ac4:	4b86      	ldr	r3, [pc, #536]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac6:	68db      	ldr	r3, [r3, #12]
 8003ac8:	4a85      	ldr	r2, [pc, #532]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ace:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ad0:	e015      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3304      	adds	r3, #4
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fabb 	bl	8004054 <RCCEx_PLLSAI1_Config>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ae2:	e00c      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3320      	adds	r3, #32
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4618      	mov	r0, r3
 8003aec:	f000 fba6 	bl	800423c <RCCEx_PLLSAI2_Config>
 8003af0:	4603      	mov	r3, r0
 8003af2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003af4:	e003      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	74fb      	strb	r3, [r7, #19]
      break;
 8003afa:	e000      	b.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003afe:	7cfb      	ldrb	r3, [r7, #19]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b04:	4b76      	ldr	r3, [pc, #472]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b12:	4973      	ldr	r1, [pc, #460]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b1a:	e001      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b1c:	7cfb      	ldrb	r3, [r7, #19]
 8003b1e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d041      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b30:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b34:	d02a      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003b36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b3a:	d824      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b3c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b40:	d008      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003b42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b46:	d81e      	bhi.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003b4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b50:	d010      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003b52:	e018      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003b54:	4b62      	ldr	r3, [pc, #392]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	4a61      	ldr	r2, [pc, #388]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b5e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b60:	e015      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3304      	adds	r3, #4
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fa73 	bl	8004054 <RCCEx_PLLSAI1_Config>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b72:	e00c      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3320      	adds	r3, #32
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fb5e 	bl	800423c <RCCEx_PLLSAI2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003b84:	e003      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	74fb      	strb	r3, [r7, #19]
      break;
 8003b8a:	e000      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b94:	4b52      	ldr	r3, [pc, #328]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ba2:	494f      	ldr	r1, [pc, #316]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003baa:	e001      	b.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bac:	7cfb      	ldrb	r3, [r7, #19]
 8003bae:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	f000 80a0 	beq.w	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bc2:	4b47      	ldr	r3, [pc, #284]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	4b41      	ldr	r3, [pc, #260]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	4a40      	ldr	r2, [pc, #256]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	6593      	str	r3, [r2, #88]	; 0x58
 8003be4:	4b3e      	ldr	r3, [pc, #248]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bf4:	4b3b      	ldr	r3, [pc, #236]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a3a      	ldr	r2, [pc, #232]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bfe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c00:	f7fd fe26 	bl	8001850 <HAL_GetTick>
 8003c04:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c06:	e009      	b.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c08:	f7fd fe22 	bl	8001850 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d902      	bls.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	74fb      	strb	r3, [r7, #19]
        break;
 8003c1a:	e005      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c1c:	4b31      	ldr	r3, [pc, #196]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ef      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003c28:	7cfb      	ldrb	r3, [r7, #19]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d15c      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c38:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d01f      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d019      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c4c:	4b24      	ldr	r3, [pc, #144]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c58:	4b21      	ldr	r3, [pc, #132]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c5e:	4a20      	ldr	r2, [pc, #128]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c8a:	f7fd fde1 	bl	8001850 <HAL_GetTick>
 8003c8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c90:	e00b      	b.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fd fddd 	bl	8001850 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d902      	bls.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	74fb      	strb	r3, [r7, #19]
            break;
 8003ca8:	e006      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003caa:	4b0d      	ldr	r3, [pc, #52]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d0ec      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003cb8:	7cfb      	ldrb	r3, [r7, #19]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cbe:	4b08      	ldr	r3, [pc, #32]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cce:	4904      	ldr	r1, [pc, #16]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cd6:	e009      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cd8:	7cfb      	ldrb	r3, [r7, #19]
 8003cda:	74bb      	strb	r3, [r7, #18]
 8003cdc:	e006      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce8:	7cfb      	ldrb	r3, [r7, #19]
 8003cea:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cec:	7c7b      	ldrb	r3, [r7, #17]
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d105      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf2:	4b9e      	ldr	r3, [pc, #632]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf6:	4a9d      	ldr	r2, [pc, #628]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0a:	4b98      	ldr	r3, [pc, #608]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d10:	f023 0203 	bic.w	r2, r3, #3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d18:	4994      	ldr	r1, [pc, #592]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d2c:	4b8f      	ldr	r3, [pc, #572]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d32:	f023 020c 	bic.w	r2, r3, #12
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d3a:	498c      	ldr	r1, [pc, #560]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d4e:	4b87      	ldr	r3, [pc, #540]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5c:	4983      	ldr	r1, [pc, #524]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0308 	and.w	r3, r3, #8
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d70:	4b7e      	ldr	r3, [pc, #504]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d76:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d7e:	497b      	ldr	r1, [pc, #492]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003d92:	4b76      	ldr	r3, [pc, #472]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da0:	4972      	ldr	r1, [pc, #456]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003db4:	4b6d      	ldr	r3, [pc, #436]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dc2:	496a      	ldr	r1, [pc, #424]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003dd6:	4b65      	ldr	r3, [pc, #404]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ddc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de4:	4961      	ldr	r1, [pc, #388]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003df8:	4b5c      	ldr	r3, [pc, #368]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e06:	4959      	ldr	r1, [pc, #356]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003e1a:	4b54      	ldr	r3, [pc, #336]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e28:	4950      	ldr	r1, [pc, #320]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e3c:	4b4b      	ldr	r3, [pc, #300]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e42:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	4948      	ldr	r1, [pc, #288]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00a      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003e5e:	4b43      	ldr	r3, [pc, #268]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6c:	493f      	ldr	r1, [pc, #252]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d028      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e80:	4b3a      	ldr	r3, [pc, #232]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8e:	4937      	ldr	r1, [pc, #220]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e9e:	d106      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ea0:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4a31      	ldr	r2, [pc, #196]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ea6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003eaa:	60d3      	str	r3, [r2, #12]
 8003eac:	e011      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003eb6:	d10c      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f000 f8c8 	bl	8004054 <RCCEx_PLLSAI1_Config>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003ec8:	7cfb      	ldrb	r3, [r7, #19]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d001      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003ece:	7cfb      	ldrb	r3, [r7, #19]
 8003ed0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d028      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ede:	4b23      	ldr	r3, [pc, #140]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eec:	491f      	ldr	r1, [pc, #124]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003efc:	d106      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003efe:	4b1b      	ldr	r3, [pc, #108]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4a1a      	ldr	r2, [pc, #104]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f08:	60d3      	str	r3, [r2, #12]
 8003f0a:	e011      	b.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f14:	d10c      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	3304      	adds	r3, #4
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 f899 	bl	8004054 <RCCEx_PLLSAI1_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f26:	7cfb      	ldrb	r3, [r7, #19]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003f2c:	7cfb      	ldrb	r3, [r7, #19]
 8003f2e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d02b      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003f3c:	4b0b      	ldr	r3, [pc, #44]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4a:	4908      	ldr	r1, [pc, #32]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f5a:	d109      	bne.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003f5c:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	4a02      	ldr	r2, [pc, #8]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003f66:	60d3      	str	r3, [r2, #12]
 8003f68:	e014      	b.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f74:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003f78:	d10c      	bne.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3304      	adds	r3, #4
 8003f7e:	2101      	movs	r1, #1
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 f867 	bl	8004054 <RCCEx_PLLSAI1_Config>
 8003f86:	4603      	mov	r3, r0
 8003f88:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003f8a:	7cfb      	ldrb	r3, [r7, #19]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d001      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
 8003f92:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d02f      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fa0:	4b2b      	ldr	r3, [pc, #172]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fa6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fae:	4928      	ldr	r1, [pc, #160]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003fbe:	d10d      	bne.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	2102      	movs	r1, #2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 f844 	bl	8004054 <RCCEx_PLLSAI1_Config>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003fd0:	7cfb      	ldrb	r3, [r7, #19]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d014      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	74bb      	strb	r3, [r7, #18]
 8003fda:	e011      	b.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	3320      	adds	r3, #32
 8003fea:	2102      	movs	r1, #2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f925 	bl	800423c <RCCEx_PLLSAI2_Config>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ff6:	7cfb      	ldrb	r3, [r7, #19]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003ffc:	7cfb      	ldrb	r3, [r7, #19]
 8003ffe:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800400c:	4b10      	ldr	r3, [pc, #64]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800401a:	490d      	ldr	r1, [pc, #52]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800402e:	4b08      	ldr	r3, [pc, #32]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800403e:	4904      	ldr	r1, [pc, #16]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004046:	7cbb      	ldrb	r3, [r7, #18]
}
 8004048:	4618      	mov	r0, r3
 800404a:	3718      	adds	r7, #24
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000

08004054 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b084      	sub	sp, #16
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405e:	2300      	movs	r3, #0
 8004060:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004062:	4b75      	ldr	r3, [pc, #468]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d018      	beq.n	80040a0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800406e:	4b72      	ldr	r3, [pc, #456]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f003 0203 	and.w	r2, r3, #3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d10d      	bne.n	800409a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
       ||
 8004082:	2b00      	cmp	r3, #0
 8004084:	d009      	beq.n	800409a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004086:	4b6c      	ldr	r3, [pc, #432]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	685b      	ldr	r3, [r3, #4]
       ||
 8004096:	429a      	cmp	r2, r3
 8004098:	d047      	beq.n	800412a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
 800409e:	e044      	b.n	800412a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d018      	beq.n	80040da <RCCEx_PLLSAI1_Config+0x86>
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d825      	bhi.n	80040f8 <RCCEx_PLLSAI1_Config+0xa4>
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d002      	beq.n	80040b6 <RCCEx_PLLSAI1_Config+0x62>
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d009      	beq.n	80040c8 <RCCEx_PLLSAI1_Config+0x74>
 80040b4:	e020      	b.n	80040f8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040b6:	4b60      	ldr	r3, [pc, #384]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11d      	bne.n	80040fe <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040c6:	e01a      	b.n	80040fe <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80040c8:	4b5b      	ldr	r3, [pc, #364]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d116      	bne.n	8004102 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040d8:	e013      	b.n	8004102 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80040da:	4b57      	ldr	r3, [pc, #348]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d10f      	bne.n	8004106 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80040e6:	4b54      	ldr	r3, [pc, #336]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80040f6:	e006      	b.n	8004106 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
      break;
 80040fc:	e004      	b.n	8004108 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80040fe:	bf00      	nop
 8004100:	e002      	b.n	8004108 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004102:	bf00      	nop
 8004104:	e000      	b.n	8004108 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004106:	bf00      	nop
    }

    if(status == HAL_OK)
 8004108:	7bfb      	ldrb	r3, [r7, #15]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10d      	bne.n	800412a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800410e:	4b4a      	ldr	r3, [pc, #296]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6819      	ldr	r1, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	011b      	lsls	r3, r3, #4
 8004122:	430b      	orrs	r3, r1
 8004124:	4944      	ldr	r1, [pc, #272]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004126:	4313      	orrs	r3, r2
 8004128:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800412a:	7bfb      	ldrb	r3, [r7, #15]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d17d      	bne.n	800422c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004130:	4b41      	ldr	r3, [pc, #260]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a40      	ldr	r2, [pc, #256]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004136:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800413a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800413c:	f7fd fb88 	bl	8001850 <HAL_GetTick>
 8004140:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004142:	e009      	b.n	8004158 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004144:	f7fd fb84 	bl	8001850 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d902      	bls.n	8004158 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	73fb      	strb	r3, [r7, #15]
        break;
 8004156:	e005      	b.n	8004164 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004158:	4b37      	ldr	r3, [pc, #220]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1ef      	bne.n	8004144 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004164:	7bfb      	ldrb	r3, [r7, #15]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d160      	bne.n	800422c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d111      	bne.n	8004194 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004170:	4b31      	ldr	r3, [pc, #196]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6892      	ldr	r2, [r2, #8]
 8004180:	0211      	lsls	r1, r2, #8
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68d2      	ldr	r2, [r2, #12]
 8004186:	0912      	lsrs	r2, r2, #4
 8004188:	0452      	lsls	r2, r2, #17
 800418a:	430a      	orrs	r2, r1
 800418c:	492a      	ldr	r1, [pc, #168]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 800418e:	4313      	orrs	r3, r2
 8004190:	610b      	str	r3, [r1, #16]
 8004192:	e027      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d112      	bne.n	80041c0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800419a:	4b27      	ldr	r3, [pc, #156]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80041a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041a6:	687a      	ldr	r2, [r7, #4]
 80041a8:	6892      	ldr	r2, [r2, #8]
 80041aa:	0211      	lsls	r1, r2, #8
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6912      	ldr	r2, [r2, #16]
 80041b0:	0852      	lsrs	r2, r2, #1
 80041b2:	3a01      	subs	r2, #1
 80041b4:	0552      	lsls	r2, r2, #21
 80041b6:	430a      	orrs	r2, r1
 80041b8:	491f      	ldr	r1, [pc, #124]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	610b      	str	r3, [r1, #16]
 80041be:	e011      	b.n	80041e4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80041c0:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80041c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6892      	ldr	r2, [r2, #8]
 80041d0:	0211      	lsls	r1, r2, #8
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6952      	ldr	r2, [r2, #20]
 80041d6:	0852      	lsrs	r2, r2, #1
 80041d8:	3a01      	subs	r2, #1
 80041da:	0652      	lsls	r2, r2, #25
 80041dc:	430a      	orrs	r2, r1
 80041de:	4916      	ldr	r1, [pc, #88]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80041e4:	4b14      	ldr	r3, [pc, #80]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a13      	ldr	r2, [pc, #76]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 80041ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fd fb2e 	bl	8001850 <HAL_GetTick>
 80041f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80041f6:	e009      	b.n	800420c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80041f8:	f7fd fb2a 	bl	8001850 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	2b02      	cmp	r3, #2
 8004204:	d902      	bls.n	800420c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	73fb      	strb	r3, [r7, #15]
          break;
 800420a:	e005      	b.n	8004218 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800420c:	4b0a      	ldr	r3, [pc, #40]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ef      	beq.n	80041f8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004218:	7bfb      	ldrb	r3, [r7, #15]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d106      	bne.n	800422c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800421e:	4b06      	ldr	r3, [pc, #24]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004220:	691a      	ldr	r2, [r3, #16]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	4904      	ldr	r1, [pc, #16]	; (8004238 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004228:	4313      	orrs	r3, r2
 800422a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40021000 	.word	0x40021000

0800423c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004246:	2300      	movs	r3, #0
 8004248:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800424a:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	2b00      	cmp	r3, #0
 8004254:	d018      	beq.n	8004288 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004256:	4b67      	ldr	r3, [pc, #412]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0203 	and.w	r2, r3, #3
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d10d      	bne.n	8004282 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
       ||
 800426a:	2b00      	cmp	r3, #0
 800426c:	d009      	beq.n	8004282 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800426e:	4b61      	ldr	r3, [pc, #388]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	091b      	lsrs	r3, r3, #4
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
       ||
 800427e:	429a      	cmp	r2, r3
 8004280:	d047      	beq.n	8004312 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	73fb      	strb	r3, [r7, #15]
 8004286:	e044      	b.n	8004312 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2b03      	cmp	r3, #3
 800428e:	d018      	beq.n	80042c2 <RCCEx_PLLSAI2_Config+0x86>
 8004290:	2b03      	cmp	r3, #3
 8004292:	d825      	bhi.n	80042e0 <RCCEx_PLLSAI2_Config+0xa4>
 8004294:	2b01      	cmp	r3, #1
 8004296:	d002      	beq.n	800429e <RCCEx_PLLSAI2_Config+0x62>
 8004298:	2b02      	cmp	r3, #2
 800429a:	d009      	beq.n	80042b0 <RCCEx_PLLSAI2_Config+0x74>
 800429c:	e020      	b.n	80042e0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800429e:	4b55      	ldr	r3, [pc, #340]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d11d      	bne.n	80042e6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042ae:	e01a      	b.n	80042e6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d116      	bne.n	80042ea <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042c0:	e013      	b.n	80042ea <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80042c2:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10f      	bne.n	80042ee <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80042ce:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80042de:	e006      	b.n	80042ee <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	73fb      	strb	r3, [r7, #15]
      break;
 80042e4:	e004      	b.n	80042f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042e6:	bf00      	nop
 80042e8:	e002      	b.n	80042f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ea:	bf00      	nop
 80042ec:	e000      	b.n	80042f0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80042ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80042f0:	7bfb      	ldrb	r3, [r7, #15]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10d      	bne.n	8004312 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80042f6:	4b3f      	ldr	r3, [pc, #252]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6819      	ldr	r1, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	3b01      	subs	r3, #1
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	430b      	orrs	r3, r1
 800430c:	4939      	ldr	r1, [pc, #228]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800430e:	4313      	orrs	r3, r2
 8004310:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004312:	7bfb      	ldrb	r3, [r7, #15]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d167      	bne.n	80043e8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004318:	4b36      	ldr	r3, [pc, #216]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a35      	ldr	r2, [pc, #212]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800431e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004324:	f7fd fa94 	bl	8001850 <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800432a:	e009      	b.n	8004340 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800432c:	f7fd fa90 	bl	8001850 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d902      	bls.n	8004340 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	73fb      	strb	r3, [r7, #15]
        break;
 800433e:	e005      	b.n	800434c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004340:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1ef      	bne.n	800432c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800434c:	7bfb      	ldrb	r3, [r7, #15]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d14a      	bne.n	80043e8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d111      	bne.n	800437c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004358:	4b26      	ldr	r3, [pc, #152]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800435a:	695b      	ldr	r3, [r3, #20]
 800435c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004360:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6892      	ldr	r2, [r2, #8]
 8004368:	0211      	lsls	r1, r2, #8
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	68d2      	ldr	r2, [r2, #12]
 800436e:	0912      	lsrs	r2, r2, #4
 8004370:	0452      	lsls	r2, r2, #17
 8004372:	430a      	orrs	r2, r1
 8004374:	491f      	ldr	r1, [pc, #124]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	614b      	str	r3, [r1, #20]
 800437a:	e011      	b.n	80043a0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800437c:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004384:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	6892      	ldr	r2, [r2, #8]
 800438c:	0211      	lsls	r1, r2, #8
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6912      	ldr	r2, [r2, #16]
 8004392:	0852      	lsrs	r2, r2, #1
 8004394:	3a01      	subs	r2, #1
 8004396:	0652      	lsls	r2, r2, #25
 8004398:	430a      	orrs	r2, r1
 800439a:	4916      	ldr	r1, [pc, #88]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a13      	ldr	r2, [pc, #76]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fd fa50 	bl	8001850 <HAL_GetTick>
 80043b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043b2:	e009      	b.n	80043c8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80043b4:	f7fd fa4c 	bl	8001850 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d902      	bls.n	80043c8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	73fb      	strb	r3, [r7, #15]
          break;
 80043c6:	e005      	b.n	80043d4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ef      	beq.n	80043b4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80043d4:	7bfb      	ldrb	r3, [r7, #15]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d106      	bne.n	80043e8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80043da:	4b06      	ldr	r3, [pc, #24]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	4904      	ldr	r1, [pc, #16]	; (80043f4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000

080043f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e095      	b.n	8004536 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	2b00      	cmp	r3, #0
 8004410:	d108      	bne.n	8004424 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800441a:	d009      	beq.n	8004430 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	61da      	str	r2, [r3, #28]
 8004422:	e005      	b.n	8004430 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fc ffae 	bl	80013ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004466:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004470:	d902      	bls.n	8004478 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e002      	b.n	800447e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800447c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004486:	d007      	beq.n	8004498 <HAL_SPI_Init+0xa0>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004490:	d002      	beq.n	8004498 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044a8:	431a      	orrs	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	695b      	ldr	r3, [r3, #20]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	431a      	orrs	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	ea42 0103 	orr.w	r1, r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	0c1b      	lsrs	r3, r3, #16
 80044f4:	f003 0204 	and.w	r2, r3, #4
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	f003 0310 	and.w	r3, r3, #16
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004514:	ea42 0103 	orr.w	r1, r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b082      	sub	sp, #8
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d101      	bne.n	8004550 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e049      	b.n	80045e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f000 f841 	bl	80045ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	3304      	adds	r3, #4
 800457a:	4619      	mov	r1, r3
 800457c:	4610      	mov	r0, r2
 800457e:	f000 f9f7 	bl	8004970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b01      	cmp	r3, #1
 8004612:	d001      	beq.n	8004618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e04f      	b.n	80046b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a23      	ldr	r2, [pc, #140]	; (80046c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01d      	beq.n	8004676 <HAL_TIM_Base_Start_IT+0x76>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004642:	d018      	beq.n	8004676 <HAL_TIM_Base_Start_IT+0x76>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1f      	ldr	r2, [pc, #124]	; (80046c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d013      	beq.n	8004676 <HAL_TIM_Base_Start_IT+0x76>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <HAL_TIM_Base_Start_IT+0xcc>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d00e      	beq.n	8004676 <HAL_TIM_Base_Start_IT+0x76>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a1c      	ldr	r2, [pc, #112]	; (80046d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d009      	beq.n	8004676 <HAL_TIM_Base_Start_IT+0x76>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d004      	beq.n	8004676 <HAL_TIM_Base_Start_IT+0x76>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a19      	ldr	r2, [pc, #100]	; (80046d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d115      	bne.n	80046a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	4b17      	ldr	r3, [pc, #92]	; (80046dc <HAL_TIM_Base_Start_IT+0xdc>)
 800467e:	4013      	ands	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	2b06      	cmp	r3, #6
 8004686:	d015      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0xb4>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800468e:	d011      	beq.n	80046b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a0:	e008      	b.n	80046b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f042 0201 	orr.w	r2, r2, #1
 80046b0:	601a      	str	r2, [r3, #0]
 80046b2:	e000      	b.n	80046b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	40012c00 	.word	0x40012c00
 80046c8:	40000400 	.word	0x40000400
 80046cc:	40000800 	.word	0x40000800
 80046d0:	40000c00 	.word	0x40000c00
 80046d4:	40013400 	.word	0x40013400
 80046d8:	40014000 	.word	0x40014000
 80046dc:	00010007 	.word	0x00010007

080046e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b082      	sub	sp, #8
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d122      	bne.n	800473c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b02      	cmp	r3, #2
 8004702:	d11b      	bne.n	800473c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0202 	mvn.w	r2, #2
 800470c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f003 0303 	and.w	r3, r3, #3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f905 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 8004728:	e005      	b.n	8004736 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f8f7 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f908 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	691b      	ldr	r3, [r3, #16]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b04      	cmp	r3, #4
 8004748:	d122      	bne.n	8004790 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b04      	cmp	r3, #4
 8004756:	d11b      	bne.n	8004790 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f06f 0204 	mvn.w	r2, #4
 8004760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2202      	movs	r2, #2
 8004766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f8db 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 800477c:	e005      	b.n	800478a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f000 f8cd 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f8de 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b08      	cmp	r3, #8
 800479c:	d122      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d11b      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f06f 0208 	mvn.w	r2, #8
 80047b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2204      	movs	r2, #4
 80047ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 f8b1 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 80047d0:	e005      	b.n	80047de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f8a3 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f8b4 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d122      	bne.n	8004838 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d11b      	bne.n	8004838 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0210 	mvn.w	r2, #16
 8004808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2208      	movs	r2, #8
 800480e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f887 	bl	8004932 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f879 	bl	800491e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f88a 	bl	8004946 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b01      	cmp	r3, #1
 8004844:	d10e      	bne.n	8004864 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b01      	cmp	r3, #1
 8004852:	d107      	bne.n	8004864 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0201 	mvn.w	r2, #1
 800485c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fc fbbe 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800486e:	2b80      	cmp	r3, #128	; 0x80
 8004870:	d10e      	bne.n	8004890 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800487c:	2b80      	cmp	r3, #128	; 0x80
 800487e:	d107      	bne.n	8004890 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f914 	bl	8004ab8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	691b      	ldr	r3, [r3, #16]
 8004896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800489a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489e:	d10e      	bne.n	80048be <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	d107      	bne.n	80048be <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f907 	bl	8004acc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	2b40      	cmp	r3, #64	; 0x40
 80048ca:	d10e      	bne.n	80048ea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d6:	2b40      	cmp	r3, #64	; 0x40
 80048d8:	d107      	bne.n	80048ea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f838 	bl	800495a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d10e      	bne.n	8004916 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b20      	cmp	r3, #32
 8004904:	d107      	bne.n	8004916 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0220 	mvn.w	r2, #32
 800490e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f8c7 	bl	8004aa4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004932:	b480      	push	{r7}
 8004934:	b083      	sub	sp, #12
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr

08004946 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004946:	b480      	push	{r7}
 8004948:	b083      	sub	sp, #12
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800495a:	b480      	push	{r7}
 800495c:	b083      	sub	sp, #12
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a40      	ldr	r2, [pc, #256]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498e:	d00f      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a3d      	ldr	r2, [pc, #244]	; (8004a88 <TIM_Base_SetConfig+0x118>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d00b      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a3c      	ldr	r2, [pc, #240]	; (8004a8c <TIM_Base_SetConfig+0x11c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d007      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a3b      	ldr	r2, [pc, #236]	; (8004a90 <TIM_Base_SetConfig+0x120>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d108      	bne.n	80049c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	4313      	orrs	r3, r2
 80049c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2f      	ldr	r2, [pc, #188]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01f      	beq.n	8004a0a <TIM_Base_SetConfig+0x9a>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d0:	d01b      	beq.n	8004a0a <TIM_Base_SetConfig+0x9a>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2c      	ldr	r2, [pc, #176]	; (8004a88 <TIM_Base_SetConfig+0x118>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d017      	beq.n	8004a0a <TIM_Base_SetConfig+0x9a>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2b      	ldr	r2, [pc, #172]	; (8004a8c <TIM_Base_SetConfig+0x11c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <TIM_Base_SetConfig+0x9a>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a2a      	ldr	r2, [pc, #168]	; (8004a90 <TIM_Base_SetConfig+0x120>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00f      	beq.n	8004a0a <TIM_Base_SetConfig+0x9a>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a29      	ldr	r2, [pc, #164]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <TIM_Base_SetConfig+0x9a>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a28      	ldr	r2, [pc, #160]	; (8004a98 <TIM_Base_SetConfig+0x128>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <TIM_Base_SetConfig+0x9a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a27      	ldr	r2, [pc, #156]	; (8004a9c <TIM_Base_SetConfig+0x12c>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_Base_SetConfig+0x9a>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <TIM_Base_SetConfig+0x130>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d108      	bne.n	8004a1c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a10      	ldr	r2, [pc, #64]	; (8004a84 <TIM_Base_SetConfig+0x114>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d00f      	beq.n	8004a68 <TIM_Base_SetConfig+0xf8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a12      	ldr	r2, [pc, #72]	; (8004a94 <TIM_Base_SetConfig+0x124>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00b      	beq.n	8004a68 <TIM_Base_SetConfig+0xf8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a11      	ldr	r2, [pc, #68]	; (8004a98 <TIM_Base_SetConfig+0x128>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d007      	beq.n	8004a68 <TIM_Base_SetConfig+0xf8>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <TIM_Base_SetConfig+0x12c>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d003      	beq.n	8004a68 <TIM_Base_SetConfig+0xf8>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a0f      	ldr	r2, [pc, #60]	; (8004aa0 <TIM_Base_SetConfig+0x130>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d103      	bne.n	8004a70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	615a      	str	r2, [r3, #20]
}
 8004a76:	bf00      	nop
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
 8004a82:	bf00      	nop
 8004a84:	40012c00 	.word	0x40012c00
 8004a88:	40000400 	.word	0x40000400
 8004a8c:	40000800 	.word	0x40000800
 8004a90:	40000c00 	.word	0x40000c00
 8004a94:	40013400 	.word	0x40013400
 8004a98:	40014000 	.word	0x40014000
 8004a9c:	40014400 	.word	0x40014400
 8004aa0:	40014800 	.word	0x40014800

08004aa4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ac0:	bf00      	nop
 8004ac2:	370c      	adds	r7, #12
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e040      	b.n	8004b74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fc fc94 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2224      	movs	r2, #36	; 0x24
 8004b0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 f8c0 	bl	8004ca4 <UART_SetConfig>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d101      	bne.n	8004b2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e022      	b.n	8004b74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fb3e 	bl	80051b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689a      	ldr	r2, [r3, #8]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fbc5 	bl	80052fc <UART_CheckIdleState>
 8004b72:	4603      	mov	r3, r0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b08a      	sub	sp, #40	; 0x28
 8004b80:	af02      	add	r7, sp, #8
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	603b      	str	r3, [r7, #0]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	f040 8082 	bne.w	8004c9a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_UART_Transmit+0x26>
 8004b9c:	88fb      	ldrh	r3, [r7, #6]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d101      	bne.n	8004ba6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e07a      	b.n	8004c9c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d101      	bne.n	8004bb4 <HAL_UART_Transmit+0x38>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e073      	b.n	8004c9c <HAL_UART_Transmit+0x120>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2221      	movs	r2, #33	; 0x21
 8004bc8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bca:	f7fc fe41 	bl	8001850 <HAL_GetTick>
 8004bce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	88fa      	ldrh	r2, [r7, #6]
 8004bd4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	88fa      	ldrh	r2, [r7, #6]
 8004bdc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004be8:	d108      	bne.n	8004bfc <HAL_UART_Transmit+0x80>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	61bb      	str	r3, [r7, #24]
 8004bfa:	e003      	b.n	8004c04 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c00:	2300      	movs	r3, #0
 8004c02:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004c0c:	e02d      	b.n	8004c6a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2180      	movs	r1, #128	; 0x80
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fbb8 	bl	800538e <UART_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e039      	b.n	8004c9c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004c28:	69fb      	ldr	r3, [r7, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	881a      	ldrh	r2, [r3, #0]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c3a:	b292      	uxth	r2, r2
 8004c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c3e:	69bb      	ldr	r3, [r7, #24]
 8004c40:	3302      	adds	r3, #2
 8004c42:	61bb      	str	r3, [r7, #24]
 8004c44:	e008      	b.n	8004c58 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	781a      	ldrb	r2, [r3, #0]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	b292      	uxth	r2, r2
 8004c50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	3301      	adds	r3, #1
 8004c56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1cb      	bne.n	8004c0e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2140      	movs	r1, #64	; 0x40
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 fb84 	bl	800538e <UART_WaitOnFlagUntilTimeout>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d001      	beq.n	8004c90 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e005      	b.n	8004c9c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2220      	movs	r2, #32
 8004c94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e000      	b.n	8004c9c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c9a:	2302      	movs	r3, #2
  }
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3720      	adds	r7, #32
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	b5b0      	push	{r4, r5, r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cac:	2300      	movs	r3, #0
 8004cae:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689a      	ldr	r2, [r3, #8]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	431a      	orrs	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4bad      	ldr	r3, [pc, #692]	; (8004f84 <UART_SetConfig+0x2e0>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	69f9      	ldr	r1, [r7, #28]
 8004cd8:	430b      	orrs	r3, r1
 8004cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68da      	ldr	r2, [r3, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	430a      	orrs	r2, r1
 8004cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4aa2      	ldr	r2, [pc, #648]	; (8004f88 <UART_SetConfig+0x2e4>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d004      	beq.n	8004d0c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a99      	ldr	r2, [pc, #612]	; (8004f8c <UART_SetConfig+0x2e8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d121      	bne.n	8004d6e <UART_SetConfig+0xca>
 8004d2a:	4b99      	ldr	r3, [pc, #612]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d30:	f003 0303 	and.w	r3, r3, #3
 8004d34:	2b03      	cmp	r3, #3
 8004d36:	d817      	bhi.n	8004d68 <UART_SetConfig+0xc4>
 8004d38:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0x9c>)
 8004d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3e:	bf00      	nop
 8004d40:	08004d51 	.word	0x08004d51
 8004d44:	08004d5d 	.word	0x08004d5d
 8004d48:	08004d57 	.word	0x08004d57
 8004d4c:	08004d63 	.word	0x08004d63
 8004d50:	2301      	movs	r3, #1
 8004d52:	76fb      	strb	r3, [r7, #27]
 8004d54:	e0e7      	b.n	8004f26 <UART_SetConfig+0x282>
 8004d56:	2302      	movs	r3, #2
 8004d58:	76fb      	strb	r3, [r7, #27]
 8004d5a:	e0e4      	b.n	8004f26 <UART_SetConfig+0x282>
 8004d5c:	2304      	movs	r3, #4
 8004d5e:	76fb      	strb	r3, [r7, #27]
 8004d60:	e0e1      	b.n	8004f26 <UART_SetConfig+0x282>
 8004d62:	2308      	movs	r3, #8
 8004d64:	76fb      	strb	r3, [r7, #27]
 8004d66:	e0de      	b.n	8004f26 <UART_SetConfig+0x282>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	76fb      	strb	r3, [r7, #27]
 8004d6c:	e0db      	b.n	8004f26 <UART_SetConfig+0x282>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a88      	ldr	r2, [pc, #544]	; (8004f94 <UART_SetConfig+0x2f0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d132      	bne.n	8004dde <UART_SetConfig+0x13a>
 8004d78:	4b85      	ldr	r3, [pc, #532]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b0c      	cmp	r3, #12
 8004d84:	d828      	bhi.n	8004dd8 <UART_SetConfig+0x134>
 8004d86:	a201      	add	r2, pc, #4	; (adr r2, 8004d8c <UART_SetConfig+0xe8>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004dc1 	.word	0x08004dc1
 8004d90:	08004dd9 	.word	0x08004dd9
 8004d94:	08004dd9 	.word	0x08004dd9
 8004d98:	08004dd9 	.word	0x08004dd9
 8004d9c:	08004dcd 	.word	0x08004dcd
 8004da0:	08004dd9 	.word	0x08004dd9
 8004da4:	08004dd9 	.word	0x08004dd9
 8004da8:	08004dd9 	.word	0x08004dd9
 8004dac:	08004dc7 	.word	0x08004dc7
 8004db0:	08004dd9 	.word	0x08004dd9
 8004db4:	08004dd9 	.word	0x08004dd9
 8004db8:	08004dd9 	.word	0x08004dd9
 8004dbc:	08004dd3 	.word	0x08004dd3
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	76fb      	strb	r3, [r7, #27]
 8004dc4:	e0af      	b.n	8004f26 <UART_SetConfig+0x282>
 8004dc6:	2302      	movs	r3, #2
 8004dc8:	76fb      	strb	r3, [r7, #27]
 8004dca:	e0ac      	b.n	8004f26 <UART_SetConfig+0x282>
 8004dcc:	2304      	movs	r3, #4
 8004dce:	76fb      	strb	r3, [r7, #27]
 8004dd0:	e0a9      	b.n	8004f26 <UART_SetConfig+0x282>
 8004dd2:	2308      	movs	r3, #8
 8004dd4:	76fb      	strb	r3, [r7, #27]
 8004dd6:	e0a6      	b.n	8004f26 <UART_SetConfig+0x282>
 8004dd8:	2310      	movs	r3, #16
 8004dda:	76fb      	strb	r3, [r7, #27]
 8004ddc:	e0a3      	b.n	8004f26 <UART_SetConfig+0x282>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a6d      	ldr	r2, [pc, #436]	; (8004f98 <UART_SetConfig+0x2f4>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d120      	bne.n	8004e2a <UART_SetConfig+0x186>
 8004de8:	4b69      	ldr	r3, [pc, #420]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004df2:	2b30      	cmp	r3, #48	; 0x30
 8004df4:	d013      	beq.n	8004e1e <UART_SetConfig+0x17a>
 8004df6:	2b30      	cmp	r3, #48	; 0x30
 8004df8:	d814      	bhi.n	8004e24 <UART_SetConfig+0x180>
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d009      	beq.n	8004e12 <UART_SetConfig+0x16e>
 8004dfe:	2b20      	cmp	r3, #32
 8004e00:	d810      	bhi.n	8004e24 <UART_SetConfig+0x180>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <UART_SetConfig+0x168>
 8004e06:	2b10      	cmp	r3, #16
 8004e08:	d006      	beq.n	8004e18 <UART_SetConfig+0x174>
 8004e0a:	e00b      	b.n	8004e24 <UART_SetConfig+0x180>
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	76fb      	strb	r3, [r7, #27]
 8004e10:	e089      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e12:	2302      	movs	r3, #2
 8004e14:	76fb      	strb	r3, [r7, #27]
 8004e16:	e086      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e18:	2304      	movs	r3, #4
 8004e1a:	76fb      	strb	r3, [r7, #27]
 8004e1c:	e083      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e1e:	2308      	movs	r3, #8
 8004e20:	76fb      	strb	r3, [r7, #27]
 8004e22:	e080      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e24:	2310      	movs	r3, #16
 8004e26:	76fb      	strb	r3, [r7, #27]
 8004e28:	e07d      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a5b      	ldr	r2, [pc, #364]	; (8004f9c <UART_SetConfig+0x2f8>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d120      	bne.n	8004e76 <UART_SetConfig+0x1d2>
 8004e34:	4b56      	ldr	r3, [pc, #344]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e3e:	2bc0      	cmp	r3, #192	; 0xc0
 8004e40:	d013      	beq.n	8004e6a <UART_SetConfig+0x1c6>
 8004e42:	2bc0      	cmp	r3, #192	; 0xc0
 8004e44:	d814      	bhi.n	8004e70 <UART_SetConfig+0x1cc>
 8004e46:	2b80      	cmp	r3, #128	; 0x80
 8004e48:	d009      	beq.n	8004e5e <UART_SetConfig+0x1ba>
 8004e4a:	2b80      	cmp	r3, #128	; 0x80
 8004e4c:	d810      	bhi.n	8004e70 <UART_SetConfig+0x1cc>
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d002      	beq.n	8004e58 <UART_SetConfig+0x1b4>
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	d006      	beq.n	8004e64 <UART_SetConfig+0x1c0>
 8004e56:	e00b      	b.n	8004e70 <UART_SetConfig+0x1cc>
 8004e58:	2300      	movs	r3, #0
 8004e5a:	76fb      	strb	r3, [r7, #27]
 8004e5c:	e063      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	76fb      	strb	r3, [r7, #27]
 8004e62:	e060      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e64:	2304      	movs	r3, #4
 8004e66:	76fb      	strb	r3, [r7, #27]
 8004e68:	e05d      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e6a:	2308      	movs	r3, #8
 8004e6c:	76fb      	strb	r3, [r7, #27]
 8004e6e:	e05a      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e70:	2310      	movs	r3, #16
 8004e72:	76fb      	strb	r3, [r7, #27]
 8004e74:	e057      	b.n	8004f26 <UART_SetConfig+0x282>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a49      	ldr	r2, [pc, #292]	; (8004fa0 <UART_SetConfig+0x2fc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d125      	bne.n	8004ecc <UART_SetConfig+0x228>
 8004e80:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e8e:	d017      	beq.n	8004ec0 <UART_SetConfig+0x21c>
 8004e90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e94:	d817      	bhi.n	8004ec6 <UART_SetConfig+0x222>
 8004e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e9a:	d00b      	beq.n	8004eb4 <UART_SetConfig+0x210>
 8004e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ea0:	d811      	bhi.n	8004ec6 <UART_SetConfig+0x222>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d003      	beq.n	8004eae <UART_SetConfig+0x20a>
 8004ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eaa:	d006      	beq.n	8004eba <UART_SetConfig+0x216>
 8004eac:	e00b      	b.n	8004ec6 <UART_SetConfig+0x222>
 8004eae:	2300      	movs	r3, #0
 8004eb0:	76fb      	strb	r3, [r7, #27]
 8004eb2:	e038      	b.n	8004f26 <UART_SetConfig+0x282>
 8004eb4:	2302      	movs	r3, #2
 8004eb6:	76fb      	strb	r3, [r7, #27]
 8004eb8:	e035      	b.n	8004f26 <UART_SetConfig+0x282>
 8004eba:	2304      	movs	r3, #4
 8004ebc:	76fb      	strb	r3, [r7, #27]
 8004ebe:	e032      	b.n	8004f26 <UART_SetConfig+0x282>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	76fb      	strb	r3, [r7, #27]
 8004ec4:	e02f      	b.n	8004f26 <UART_SetConfig+0x282>
 8004ec6:	2310      	movs	r3, #16
 8004ec8:	76fb      	strb	r3, [r7, #27]
 8004eca:	e02c      	b.n	8004f26 <UART_SetConfig+0x282>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a2d      	ldr	r2, [pc, #180]	; (8004f88 <UART_SetConfig+0x2e4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d125      	bne.n	8004f22 <UART_SetConfig+0x27e>
 8004ed6:	4b2e      	ldr	r3, [pc, #184]	; (8004f90 <UART_SetConfig+0x2ec>)
 8004ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004edc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ee0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ee4:	d017      	beq.n	8004f16 <UART_SetConfig+0x272>
 8004ee6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eea:	d817      	bhi.n	8004f1c <UART_SetConfig+0x278>
 8004eec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef0:	d00b      	beq.n	8004f0a <UART_SetConfig+0x266>
 8004ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ef6:	d811      	bhi.n	8004f1c <UART_SetConfig+0x278>
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <UART_SetConfig+0x260>
 8004efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f00:	d006      	beq.n	8004f10 <UART_SetConfig+0x26c>
 8004f02:	e00b      	b.n	8004f1c <UART_SetConfig+0x278>
 8004f04:	2300      	movs	r3, #0
 8004f06:	76fb      	strb	r3, [r7, #27]
 8004f08:	e00d      	b.n	8004f26 <UART_SetConfig+0x282>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	76fb      	strb	r3, [r7, #27]
 8004f0e:	e00a      	b.n	8004f26 <UART_SetConfig+0x282>
 8004f10:	2304      	movs	r3, #4
 8004f12:	76fb      	strb	r3, [r7, #27]
 8004f14:	e007      	b.n	8004f26 <UART_SetConfig+0x282>
 8004f16:	2308      	movs	r3, #8
 8004f18:	76fb      	strb	r3, [r7, #27]
 8004f1a:	e004      	b.n	8004f26 <UART_SetConfig+0x282>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	76fb      	strb	r3, [r7, #27]
 8004f20:	e001      	b.n	8004f26 <UART_SetConfig+0x282>
 8004f22:	2310      	movs	r3, #16
 8004f24:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a17      	ldr	r2, [pc, #92]	; (8004f88 <UART_SetConfig+0x2e4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	f040 8087 	bne.w	8005040 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f32:	7efb      	ldrb	r3, [r7, #27]
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d837      	bhi.n	8004fa8 <UART_SetConfig+0x304>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0x29c>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004fa9 	.word	0x08004fa9
 8004f48:	08004f6d 	.word	0x08004f6d
 8004f4c:	08004fa9 	.word	0x08004fa9
 8004f50:	08004f73 	.word	0x08004f73
 8004f54:	08004fa9 	.word	0x08004fa9
 8004f58:	08004fa9 	.word	0x08004fa9
 8004f5c:	08004fa9 	.word	0x08004fa9
 8004f60:	08004f7b 	.word	0x08004f7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7fe fcce 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8004f68:	6178      	str	r0, [r7, #20]
        break;
 8004f6a:	e022      	b.n	8004fb2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <UART_SetConfig+0x300>)
 8004f6e:	617b      	str	r3, [r7, #20]
        break;
 8004f70:	e01f      	b.n	8004fb2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f72:	f7fe fc2f 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8004f76:	6178      	str	r0, [r7, #20]
        break;
 8004f78:	e01b      	b.n	8004fb2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f7e:	617b      	str	r3, [r7, #20]
        break;
 8004f80:	e017      	b.n	8004fb2 <UART_SetConfig+0x30e>
 8004f82:	bf00      	nop
 8004f84:	efff69f3 	.word	0xefff69f3
 8004f88:	40008000 	.word	0x40008000
 8004f8c:	40013800 	.word	0x40013800
 8004f90:	40021000 	.word	0x40021000
 8004f94:	40004400 	.word	0x40004400
 8004f98:	40004800 	.word	0x40004800
 8004f9c:	40004c00 	.word	0x40004c00
 8004fa0:	40005000 	.word	0x40005000
 8004fa4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	76bb      	strb	r3, [r7, #26]
        break;
 8004fb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80f1 	beq.w	800519c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4413      	add	r3, r2
 8004fc4:	697a      	ldr	r2, [r7, #20]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d305      	bcc.n	8004fd6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004fd0:	697a      	ldr	r2, [r7, #20]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d902      	bls.n	8004fdc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	76bb      	strb	r3, [r7, #26]
 8004fda:	e0df      	b.n	800519c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f04f 0100 	mov.w	r1, #0
 8004fe4:	f04f 0200 	mov.w	r2, #0
 8004fe8:	f04f 0300 	mov.w	r3, #0
 8004fec:	020b      	lsls	r3, r1, #8
 8004fee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ff2:	0202      	lsls	r2, r0, #8
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	6849      	ldr	r1, [r1, #4]
 8004ff8:	0849      	lsrs	r1, r1, #1
 8004ffa:	4608      	mov	r0, r1
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	1814      	adds	r4, r2, r0
 8005002:	eb43 0501 	adc.w	r5, r3, r1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	461a      	mov	r2, r3
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	4620      	mov	r0, r4
 8005012:	4629      	mov	r1, r5
 8005014:	f7fb f934 	bl	8000280 <__aeabi_uldivmod>
 8005018:	4602      	mov	r2, r0
 800501a:	460b      	mov	r3, r1
 800501c:	4613      	mov	r3, r2
 800501e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005026:	d308      	bcc.n	800503a <UART_SetConfig+0x396>
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800502e:	d204      	bcs.n	800503a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	60da      	str	r2, [r3, #12]
 8005038:	e0b0      	b.n	800519c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	76bb      	strb	r3, [r7, #26]
 800503e:	e0ad      	b.n	800519c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005048:	d15c      	bne.n	8005104 <UART_SetConfig+0x460>
  {
    switch (clocksource)
 800504a:	7efb      	ldrb	r3, [r7, #27]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d828      	bhi.n	80050a2 <UART_SetConfig+0x3fe>
 8005050:	a201      	add	r2, pc, #4	; (adr r2, 8005058 <UART_SetConfig+0x3b4>)
 8005052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005056:	bf00      	nop
 8005058:	0800507d 	.word	0x0800507d
 800505c:	08005085 	.word	0x08005085
 8005060:	0800508d 	.word	0x0800508d
 8005064:	080050a3 	.word	0x080050a3
 8005068:	08005093 	.word	0x08005093
 800506c:	080050a3 	.word	0x080050a3
 8005070:	080050a3 	.word	0x080050a3
 8005074:	080050a3 	.word	0x080050a3
 8005078:	0800509b 	.word	0x0800509b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507c:	f7fe fc42 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8005080:	6178      	str	r0, [r7, #20]
        break;
 8005082:	e013      	b.n	80050ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005084:	f7fe fc54 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 8005088:	6178      	str	r0, [r7, #20]
        break;
 800508a:	e00f      	b.n	80050ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800508c:	4b49      	ldr	r3, [pc, #292]	; (80051b4 <UART_SetConfig+0x510>)
 800508e:	617b      	str	r3, [r7, #20]
        break;
 8005090:	e00c      	b.n	80050ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005092:	f7fe fb9f 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 8005096:	6178      	str	r0, [r7, #20]
        break;
 8005098:	e008      	b.n	80050ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800509a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800509e:	617b      	str	r3, [r7, #20]
        break;
 80050a0:	e004      	b.n	80050ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	76bb      	strb	r3, [r7, #26]
        break;
 80050aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d074      	beq.n	800519c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	005a      	lsls	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	085b      	lsrs	r3, r3, #1
 80050bc:	441a      	add	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	2b0f      	cmp	r3, #15
 80050ce:	d916      	bls.n	80050fe <UART_SetConfig+0x45a>
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d6:	d212      	bcs.n	80050fe <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f023 030f 	bic.w	r3, r3, #15
 80050e0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	085b      	lsrs	r3, r3, #1
 80050e6:	b29b      	uxth	r3, r3
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	89fb      	ldrh	r3, [r7, #14]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	89fa      	ldrh	r2, [r7, #14]
 80050fa:	60da      	str	r2, [r3, #12]
 80050fc:	e04e      	b.n	800519c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	76bb      	strb	r3, [r7, #26]
 8005102:	e04b      	b.n	800519c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005104:	7efb      	ldrb	r3, [r7, #27]
 8005106:	2b08      	cmp	r3, #8
 8005108:	d827      	bhi.n	800515a <UART_SetConfig+0x4b6>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <UART_SetConfig+0x46c>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005135 	.word	0x08005135
 8005114:	0800513d 	.word	0x0800513d
 8005118:	08005145 	.word	0x08005145
 800511c:	0800515b 	.word	0x0800515b
 8005120:	0800514b 	.word	0x0800514b
 8005124:	0800515b 	.word	0x0800515b
 8005128:	0800515b 	.word	0x0800515b
 800512c:	0800515b 	.word	0x0800515b
 8005130:	08005153 	.word	0x08005153
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005134:	f7fe fbe6 	bl	8003904 <HAL_RCC_GetPCLK1Freq>
 8005138:	6178      	str	r0, [r7, #20]
        break;
 800513a:	e013      	b.n	8005164 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800513c:	f7fe fbf8 	bl	8003930 <HAL_RCC_GetPCLK2Freq>
 8005140:	6178      	str	r0, [r7, #20]
        break;
 8005142:	e00f      	b.n	8005164 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005144:	4b1b      	ldr	r3, [pc, #108]	; (80051b4 <UART_SetConfig+0x510>)
 8005146:	617b      	str	r3, [r7, #20]
        break;
 8005148:	e00c      	b.n	8005164 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800514a:	f7fe fb43 	bl	80037d4 <HAL_RCC_GetSysClockFreq>
 800514e:	6178      	str	r0, [r7, #20]
        break;
 8005150:	e008      	b.n	8005164 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005156:	617b      	str	r3, [r7, #20]
        break;
 8005158:	e004      	b.n	8005164 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800515a:	2300      	movs	r3, #0
 800515c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	76bb      	strb	r3, [r7, #26]
        break;
 8005162:	bf00      	nop
    }

    if (pclk != 0U)
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d018      	beq.n	800519c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	085a      	lsrs	r2, r3, #1
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	441a      	add	r2, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	fbb2 f3f3 	udiv	r3, r2, r3
 800517c:	b29b      	uxth	r3, r3
 800517e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	2b0f      	cmp	r3, #15
 8005184:	d908      	bls.n	8005198 <UART_SetConfig+0x4f4>
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800518c:	d204      	bcs.n	8005198 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	60da      	str	r2, [r3, #12]
 8005196:	e001      	b.n	800519c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80051a8:	7ebb      	ldrb	r3, [r7, #26]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bdb0      	pop	{r4, r5, r7, pc}
 80051b2:	bf00      	nop
 80051b4:	00f42400 	.word	0x00f42400

080051b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524c:	f003 0310 	and.w	r3, r3, #16
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	f003 0320 	and.w	r3, r3, #32
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005294:	2b00      	cmp	r3, #0
 8005296:	d01a      	beq.n	80052ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052b6:	d10a      	bne.n	80052ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d00a      	beq.n	80052f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]
  }
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af02      	add	r7, sp, #8
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2200      	movs	r2, #0
 8005308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800530c:	f7fc faa0 	bl	8001850 <HAL_GetTick>
 8005310:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0308 	and.w	r3, r3, #8
 800531c:	2b08      	cmp	r3, #8
 800531e:	d10e      	bne.n	800533e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2200      	movs	r2, #0
 800532a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f82d 	bl	800538e <UART_WaitOnFlagUntilTimeout>
 8005334:	4603      	mov	r3, r0
 8005336:	2b00      	cmp	r3, #0
 8005338:	d001      	beq.n	800533e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e023      	b.n	8005386 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0304 	and.w	r3, r3, #4
 8005348:	2b04      	cmp	r3, #4
 800534a:	d10e      	bne.n	800536a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800534c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f817 	bl	800538e <UART_WaitOnFlagUntilTimeout>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005366:	2303      	movs	r3, #3
 8005368:	e00d      	b.n	8005386 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2220      	movs	r2, #32
 800536e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2220      	movs	r2, #32
 8005374:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800538e:	b580      	push	{r7, lr}
 8005390:	b084      	sub	sp, #16
 8005392:	af00      	add	r7, sp, #0
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	603b      	str	r3, [r7, #0]
 800539a:	4613      	mov	r3, r2
 800539c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800539e:	e05e      	b.n	800545e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a6:	d05a      	beq.n	800545e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053a8:	f7fc fa52 	bl	8001850 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	69ba      	ldr	r2, [r7, #24]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d302      	bcc.n	80053be <UART_WaitOnFlagUntilTimeout+0x30>
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d11b      	bne.n	80053f6 <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80053cc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 0201 	bic.w	r2, r2, #1
 80053dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2220      	movs	r2, #32
 80053e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e043      	b.n	800547e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0304 	and.w	r3, r3, #4
 8005400:	2b00      	cmp	r3, #0
 8005402:	d02c      	beq.n	800545e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800540e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005412:	d124      	bne.n	800545e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800541c:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800542c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0201 	bic.w	r2, r2, #1
 800543c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2220      	movs	r2, #32
 8005442:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2220      	movs	r2, #32
 8005448:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e00f      	b.n	800547e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	4013      	ands	r3, r2
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	429a      	cmp	r2, r3
 800546c:	bf0c      	ite	eq
 800546e:	2301      	moveq	r3, #1
 8005470:	2300      	movne	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	461a      	mov	r2, r3
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	429a      	cmp	r2, r3
 800547a:	d091      	beq.n	80053a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800547c:	2300      	movs	r3, #0
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005486:	b480      	push	{r7}
 8005488:	b085      	sub	sp, #20
 800548a:	af00      	add	r7, sp, #0
 800548c:	4603      	mov	r3, r0
 800548e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005494:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005498:	2b84      	cmp	r3, #132	; 0x84
 800549a:	d005      	beq.n	80054a8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800549c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	4413      	add	r3, r2
 80054a4:	3303      	adds	r3, #3
 80054a6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80054a8:	68fb      	ldr	r3, [r7, #12]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3714      	adds	r7, #20
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054bc:	f3ef 8305 	mrs	r3, IPSR
 80054c0:	607b      	str	r3, [r7, #4]
  return(result);
 80054c2:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	bf14      	ite	ne
 80054c8:	2301      	movne	r3, #1
 80054ca:	2300      	moveq	r3, #0
 80054cc:	b2db      	uxtb	r3, r3
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	370c      	adds	r7, #12
 80054d2:	46bd      	mov	sp, r7
 80054d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d8:	4770      	bx	lr

080054da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80054de:	f001 fbc9 	bl	8006c74 <vTaskStartScheduler>
  
  return osOK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80054e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ea:	b089      	sub	sp, #36	; 0x24
 80054ec:	af04      	add	r7, sp, #16
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d020      	beq.n	800553c <osThreadCreate+0x54>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d01c      	beq.n	800553c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685c      	ldr	r4, [r3, #4]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681d      	ldr	r5, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691e      	ldr	r6, [r3, #16]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff ffb6 	bl	8005486 <makeFreeRtosPriority>
 800551a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005524:	9202      	str	r2, [sp, #8]
 8005526:	9301      	str	r3, [sp, #4]
 8005528:	9100      	str	r1, [sp, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	4632      	mov	r2, r6
 800552e:	4629      	mov	r1, r5
 8005530:	4620      	mov	r0, r4
 8005532:	f001 f9d7 	bl	80068e4 <xTaskCreateStatic>
 8005536:	4603      	mov	r3, r0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	e01c      	b.n	8005576 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	685c      	ldr	r4, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005548:	b29e      	uxth	r6, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff ff98 	bl	8005486 <makeFreeRtosPriority>
 8005556:	4602      	mov	r2, r0
 8005558:	f107 030c 	add.w	r3, r7, #12
 800555c:	9301      	str	r3, [sp, #4]
 800555e:	9200      	str	r2, [sp, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	4632      	mov	r2, r6
 8005564:	4629      	mov	r1, r5
 8005566:	4620      	mov	r0, r4
 8005568:	f001 fa19 	bl	800699e <xTaskCreate>
 800556c:	4603      	mov	r3, r0
 800556e:	2b01      	cmp	r3, #1
 8005570:	d001      	beq.n	8005576 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005572:	2300      	movs	r3, #0
 8005574:	e000      	b.n	8005578 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005576:	68fb      	ldr	r3, [r7, #12]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005580 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d001      	beq.n	8005596 <osDelay+0x16>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	e000      	b.n	8005598 <osDelay+0x18>
 8005596:	2301      	movs	r3, #1
 8005598:	4618      	mov	r0, r3
 800559a:	f001 fb37 	bl	8006c0c <vTaskDelay>
  
  return osOK;
 800559e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}

080055a8 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af02      	add	r7, sp, #8
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	460b      	mov	r3, r1
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d013      	beq.n	80055e6 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 80055be:	7afb      	ldrb	r3, [r7, #11]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <osTimerCreate+0x20>
 80055c4:	2101      	movs	r1, #1
 80055c6:	e000      	b.n	80055ca <osTimerCreate+0x22>
 80055c8:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer,
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 80055d2:	9201      	str	r2, [sp, #4]
 80055d4:	9300      	str	r3, [sp, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	460a      	mov	r2, r1
 80055da:	2101      	movs	r1, #1
 80055dc:	480b      	ldr	r0, [pc, #44]	; (800560c <osTimerCreate+0x64>)
 80055de:	f002 faca 	bl	8007b76 <xTimerCreateStatic>
 80055e2:	4603      	mov	r3, r0
 80055e4:	e00e      	b.n	8005604 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80055e6:	7afb      	ldrb	r3, [r7, #11]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <osTimerCreate+0x48>
 80055ec:	2201      	movs	r2, #1
 80055ee:	e000      	b.n	80055f2 <osTimerCreate+0x4a>
 80055f0:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TimerCallbackFunction_t)timer_def->ptimer);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80055f6:	9300      	str	r3, [sp, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2101      	movs	r1, #1
 80055fc:	4803      	ldr	r0, [pc, #12]	; (800560c <osTimerCreate+0x64>)
 80055fe:	f002 fa99 	bl	8007b34 <xTimerCreate>
 8005602:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	080095c8 	.word	0x080095c8

08005610 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b088      	sub	sp, #32
 8005614:	af02      	add	r7, sp, #8
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 800561a:	2300      	movs	r3, #0
 800561c:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800561e:	2300      	movs	r3, #0
 8005620:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <osTimerStart+0x20>
    ticks = 1;
 800562c:	2301      	movs	r3, #1
 800562e:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 8005630:	f7ff ff41 	bl	80054b6 <inHandlerMode>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d01a      	beq.n	8005670 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800563a:	f107 030c 	add.w	r3, r7, #12
 800563e:	2200      	movs	r2, #0
 8005640:	9200      	str	r2, [sp, #0]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	2109      	movs	r1, #9
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f002 fb0e 	bl	8007c68 <xTimerGenericCommand>
 800564c:	4603      	mov	r3, r0
 800564e:	2b01      	cmp	r3, #1
 8005650:	d002      	beq.n	8005658 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8005652:	23ff      	movs	r3, #255	; 0xff
 8005654:	617b      	str	r3, [r7, #20]
 8005656:	e018      	b.n	800568a <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d015      	beq.n	800568a <osTimerStart+0x7a>
 800565e:	4b0d      	ldr	r3, [pc, #52]	; (8005694 <osTimerStart+0x84>)
 8005660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	e00c      	b.n	800568a <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8005670:	2300      	movs	r3, #0
 8005672:	9300      	str	r3, [sp, #0]
 8005674:	2300      	movs	r3, #0
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	2104      	movs	r1, #4
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f002 faf4 	bl	8007c68 <xTimerGenericCommand>
 8005680:	4603      	mov	r3, r0
 8005682:	2b01      	cmp	r3, #1
 8005684:	d001      	beq.n	800568a <osTimerStart+0x7a>
      result = osErrorOS;
 8005686:	23ff      	movs	r3, #255	; 0xff
 8005688:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 800568a:	697b      	ldr	r3, [r7, #20]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}
 8005694:	e000ed04 	.word	0xe000ed04

08005698 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d007      	beq.n	80056b8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4619      	mov	r1, r3
 80056ae:	2001      	movs	r0, #1
 80056b0:	f000 fbf1 	bl	8005e96 <xQueueCreateMutexStatic>
 80056b4:	4603      	mov	r3, r0
 80056b6:	e003      	b.n	80056c0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80056b8:	2001      	movs	r0, #1
 80056ba:	f000 fbd4 	bl	8005e66 <xQueueCreateMutex>
 80056be:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af02      	add	r7, sp, #8
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00f      	beq.n	80056fa <osSemaphoreCreate+0x32>
    if (count == 1) {
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d10a      	bne.n	80056f6 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2203      	movs	r2, #3
 80056e6:	9200      	str	r2, [sp, #0]
 80056e8:	2200      	movs	r2, #0
 80056ea:	2100      	movs	r1, #0
 80056ec:	2001      	movs	r0, #1
 80056ee:	f000 facf 	bl	8005c90 <xQueueGenericCreateStatic>
 80056f2:	4603      	mov	r3, r0
 80056f4:	e016      	b.n	8005724 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80056f6:	2300      	movs	r3, #0
 80056f8:	e014      	b.n	8005724 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d110      	bne.n	8005722 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8005700:	2203      	movs	r2, #3
 8005702:	2100      	movs	r1, #0
 8005704:	2001      	movs	r0, #1
 8005706:	f000 fb3b 	bl	8005d80 <xQueueGenericCreate>
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d005      	beq.n	800571e <osSemaphoreCreate+0x56>
 8005712:	2300      	movs	r3, #0
 8005714:	2200      	movs	r2, #0
 8005716:	2100      	movs	r1, #0
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f000 fbd7 	bl	8005ecc <xQueueGenericSend>
      return sema;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	e000      	b.n	8005724 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8005722:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8005724:	4618      	mov	r0, r3
 8005726:	3710      	adds	r7, #16
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005732:	201c      	movs	r0, #28
 8005734:	f002 fff0 	bl	8008718 <pvPortMalloc>
 8005738:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00a      	beq.n	8005756 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3304      	adds	r3, #4
 800574a:	4618      	mov	r0, r3
 800574c:	f000 f983 	bl	8005a56 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	761a      	strb	r2, [r3, #24]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005756:	687b      	ldr	r3, [r7, #4]
	}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b090      	sub	sp, #64	; 0x40
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
 800576c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005776:	2300      	movs	r3, #0
 8005778:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00a      	beq.n	80057b6 <xEventGroupWaitBits+0x56>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	f383 8811 	msr	BASEPRI, r3
 80057a8:	f3bf 8f6f 	isb	sy
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	61fb      	str	r3, [r7, #28]
}
 80057b2:	bf00      	nop
 80057b4:	e7fe      	b.n	80057b4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10a      	bne.n	80057d2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80057bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c0:	f383 8811 	msr	BASEPRI, r3
 80057c4:	f3bf 8f6f 	isb	sy
 80057c8:	f3bf 8f4f 	dsb	sy
 80057cc:	61bb      	str	r3, [r7, #24]
}
 80057ce:	bf00      	nop
 80057d0:	e7fe      	b.n	80057d0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057d2:	f001 ff2d 	bl	8007630 <xTaskGetSchedulerState>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <xEventGroupWaitBits+0x82>
 80057dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d101      	bne.n	80057e6 <xEventGroupWaitBits+0x86>
 80057e2:	2301      	movs	r3, #1
 80057e4:	e000      	b.n	80057e8 <xEventGroupWaitBits+0x88>
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	617b      	str	r3, [r7, #20]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8005802:	f001 fa9d 	bl	8006d40 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	68b9      	ldr	r1, [r7, #8]
 8005810:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005812:	f000 f8fe 	bl	8005a12 <prvTestWaitCondition>
 8005816:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8005818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00e      	beq.n	800583c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005822:	2300      	movs	r3, #0
 8005824:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d028      	beq.n	800587e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	43db      	mvns	r3, r3
 8005834:	401a      	ands	r2, r3
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	e020      	b.n	800587e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800583c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800583e:	2b00      	cmp	r3, #0
 8005840:	d104      	bne.n	800584c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005844:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8005846:	2301      	movs	r3, #1
 8005848:	633b      	str	r3, [r7, #48]	; 0x30
 800584a:	e018      	b.n	800587e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005858:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005862:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005866:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800586a:	1d18      	adds	r0, r3, #4
 800586c:	68ba      	ldr	r2, [r7, #8]
 800586e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005870:	4313      	orrs	r3, r2
 8005872:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005874:	4619      	mov	r1, r3
 8005876:	f001 fc55 	bl	8007124 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800587e:	f001 fa6d 	bl	8006d5c <xTaskResumeAll>
 8005882:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005886:	2b00      	cmp	r3, #0
 8005888:	d031      	beq.n	80058ee <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588c:	2b00      	cmp	r3, #0
 800588e:	d107      	bne.n	80058a0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005890:	4b19      	ldr	r3, [pc, #100]	; (80058f8 <xEventGroupWaitBits+0x198>)
 8005892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	f3bf 8f4f 	dsb	sy
 800589c:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80058a0:	f002 f86e 	bl	8007980 <uxTaskResetEventItemValue>
 80058a4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80058a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d11a      	bne.n	80058e6 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80058b0:	f002 fe10 	bl	80084d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80058b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80058c0:	f000 f8a7 	bl	8005a12 <prvTestWaitCondition>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d009      	beq.n	80058de <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d006      	beq.n	80058de <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80058d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	43db      	mvns	r3, r3
 80058d8:	401a      	ands	r2, r3
 80058da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058dc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80058de:	2301      	movs	r3, #1
 80058e0:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80058e2:	f002 fe27 	bl	8008534 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80058e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80058ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3740      	adds	r7, #64	; 0x40
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	e000ed04 	.word	0xe000ed04

080058fc <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b08e      	sub	sp, #56	; 0x38
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005906:	2300      	movs	r3, #0
 8005908:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800590e:	2300      	movs	r3, #0
 8005910:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xEventGroupSetBits+0x32>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	613b      	str	r3, [r7, #16]
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00a      	beq.n	800594e <xEventGroupSetBits+0x52>
	__asm volatile
 8005938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800593c:	f383 8811 	msr	BASEPRI, r3
 8005940:	f3bf 8f6f 	isb	sy
 8005944:	f3bf 8f4f 	dsb	sy
 8005948:	60fb      	str	r3, [r7, #12]
}
 800594a:	bf00      	nop
 800594c:	e7fe      	b.n	800594c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	3304      	adds	r3, #4
 8005952:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	3308      	adds	r3, #8
 8005958:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800595a:	f001 f9f1 	bl	8006d40 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800595e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	431a      	orrs	r2, r3
 800596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005970:	e03c      	b.n	80059ec <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800597e:	2300      	movs	r3, #0
 8005980:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005988:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800598a:	69bb      	ldr	r3, [r7, #24]
 800598c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005990:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d108      	bne.n	80059ae <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800599c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	4013      	ands	r3, r2
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00b      	beq.n	80059c0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ac:	e008      	b.n	80059c0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	4013      	ands	r3, r2
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d101      	bne.n	80059c0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80059bc:	2301      	movs	r3, #1
 80059be:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80059c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d010      	beq.n	80059e8 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80059d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80059e0:	4619      	mov	r1, r3
 80059e2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80059e4:	f001 fc68 	bl	80072b8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80059ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059ee:	6a3b      	ldr	r3, [r7, #32]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d1be      	bne.n	8005972 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80059f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fa:	43db      	mvns	r3, r3
 80059fc:	401a      	ands	r2, r3
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005a02:	f001 f9ab 	bl	8006d5c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	681b      	ldr	r3, [r3, #0]
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3738      	adds	r7, #56	; 0x38
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005a12:	b480      	push	{r7}
 8005a14:	b087      	sub	sp, #28
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	60f8      	str	r0, [r7, #12]
 8005a1a:	60b9      	str	r1, [r7, #8]
 8005a1c:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d107      	bne.n	8005a38 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e007      	b.n	8005a48 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	68ba      	ldr	r2, [r7, #8]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d101      	bne.n	8005a48 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005a48:	697b      	ldr	r3, [r7, #20]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	371c      	adds	r7, #28
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr

08005a56 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f103 0208 	add.w	r2, r3, #8
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a6e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f103 0208 	add.w	r2, r3, #8
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f103 0208 	add.w	r2, r3, #8
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005aa4:	bf00      	nop
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	683a      	ldr	r2, [r7, #0]
 8005ad4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	683a      	ldr	r2, [r7, #0]
 8005ada:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	601a      	str	r2, [r3, #0]
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0e:	d103      	bne.n	8005b18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	60fb      	str	r3, [r7, #12]
 8005b16:	e00c      	b.n	8005b32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	3308      	adds	r3, #8
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e002      	b.n	8005b26 <vListInsert+0x2e>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	60fb      	str	r3, [r7, #12]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	d2f6      	bcs.n	8005b20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	685a      	ldr	r2, [r3, #4]
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	683a      	ldr	r2, [r7, #0]
 8005b40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	683a      	ldr	r2, [r7, #0]
 8005b4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	687a      	ldr	r2, [r7, #4]
 8005b52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	1c5a      	adds	r2, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
}
 8005b5e:	bf00      	nop
 8005b60:	3714      	adds	r7, #20
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr

08005b6a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b085      	sub	sp, #20
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6892      	ldr	r2, [r2, #8]
 8005b80:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	687a      	ldr	r2, [r7, #4]
 8005b88:	6852      	ldr	r2, [r2, #4]
 8005b8a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d103      	bne.n	8005b9e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	689a      	ldr	r2, [r3, #8]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	1e5a      	subs	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3714      	adds	r7, #20
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b084      	sub	sp, #16
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10a      	bne.n	8005bea <xQueueGenericReset+0x2a>
	__asm volatile
 8005bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd8:	f383 8811 	msr	BASEPRI, r3
 8005bdc:	f3bf 8f6f 	isb	sy
 8005be0:	f3bf 8f4f 	dsb	sy
 8005be4:	60bb      	str	r3, [r7, #8]
}
 8005be6:	bf00      	nop
 8005be8:	e7fe      	b.n	8005be8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005bea:	f002 fc73 	bl	80084d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bf6:	68f9      	ldr	r1, [r7, #12]
 8005bf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005bfa:	fb01 f303 	mul.w	r3, r1, r3
 8005bfe:	441a      	add	r2, r3
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	68f9      	ldr	r1, [r7, #12]
 8005c1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	441a      	add	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	22ff      	movs	r2, #255	; 0xff
 8005c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	22ff      	movs	r2, #255	; 0xff
 8005c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d114      	bne.n	8005c6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d01a      	beq.n	8005c7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	3310      	adds	r3, #16
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 fad1 	bl	80071f4 <xTaskRemoveFromEventList>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d012      	beq.n	8005c7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c58:	4b0c      	ldr	r3, [pc, #48]	; (8005c8c <xQueueGenericReset+0xcc>)
 8005c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	e009      	b.n	8005c7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3310      	adds	r3, #16
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fef1 	bl	8005a56 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3324      	adds	r3, #36	; 0x24
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f7ff feec 	bl	8005a56 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c7e:	f002 fc59 	bl	8008534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c82:	2301      	movs	r3, #1
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	e000ed04 	.word	0xe000ed04

08005c90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08e      	sub	sp, #56	; 0x38
 8005c94:	af02      	add	r7, sp, #8
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10a      	bne.n	8005cba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cb6:	bf00      	nop
 8005cb8:	e7fe      	b.n	8005cb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10a      	bne.n	8005cd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc4:	f383 8811 	msr	BASEPRI, r3
 8005cc8:	f3bf 8f6f 	isb	sy
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cd2:	bf00      	nop
 8005cd4:	e7fe      	b.n	8005cd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <xQueueGenericCreateStatic+0x52>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <xQueueGenericCreateStatic+0x56>
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e000      	b.n	8005ce8 <xQueueGenericCreateStatic+0x58>
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf0:	f383 8811 	msr	BASEPRI, r3
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	623b      	str	r3, [r7, #32]
}
 8005cfe:	bf00      	nop
 8005d00:	e7fe      	b.n	8005d00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d102      	bne.n	8005d0e <xQueueGenericCreateStatic+0x7e>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d101      	bne.n	8005d12 <xQueueGenericCreateStatic+0x82>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <xQueueGenericCreateStatic+0x84>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	61fb      	str	r3, [r7, #28]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d2e:	2348      	movs	r3, #72	; 0x48
 8005d30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b48      	cmp	r3, #72	; 0x48
 8005d36:	d00a      	beq.n	8005d4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	61bb      	str	r3, [r7, #24]
}
 8005d4a:	bf00      	nop
 8005d4c:	e7fe      	b.n	8005d4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	68b9      	ldr	r1, [r7, #8]
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f000 f83f 	bl	8005df4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3730      	adds	r7, #48	; 0x30
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b08a      	sub	sp, #40	; 0x28
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d10a      	bne.n	8005daa <xQueueGenericCreate+0x2a>
	__asm volatile
 8005d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d98:	f383 8811 	msr	BASEPRI, r3
 8005d9c:	f3bf 8f6f 	isb	sy
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	613b      	str	r3, [r7, #16]
}
 8005da6:	bf00      	nop
 8005da8:	e7fe      	b.n	8005da8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	fb02 f303 	mul.w	r3, r2, r3
 8005db2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	3348      	adds	r3, #72	; 0x48
 8005db8:	4618      	mov	r0, r3
 8005dba:	f002 fcad 	bl	8008718 <pvPortMalloc>
 8005dbe:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d011      	beq.n	8005dea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005dc6:	69bb      	ldr	r3, [r7, #24]
 8005dc8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	3348      	adds	r3, #72	; 0x48
 8005dce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dd8:	79fa      	ldrb	r2, [r7, #7]
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	4613      	mov	r3, r2
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	68f8      	ldr	r0, [r7, #12]
 8005de6:	f000 f805 	bl	8005df4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005dea:	69bb      	ldr	r3, [r7, #24]
	}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3720      	adds	r7, #32
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
 8005e00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d103      	bne.n	8005e10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	69ba      	ldr	r2, [r7, #24]
 8005e0c:	601a      	str	r2, [r3, #0]
 8005e0e:	e002      	b.n	8005e16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e10:	69bb      	ldr	r3, [r7, #24]
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e1c:	69bb      	ldr	r3, [r7, #24]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e22:	2101      	movs	r1, #1
 8005e24:	69b8      	ldr	r0, [r7, #24]
 8005e26:	f7ff fecb 	bl	8005bc0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e2a:	bf00      	nop
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b082      	sub	sp, #8
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00e      	beq.n	8005e5e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005e52:	2300      	movs	r3, #0
 8005e54:	2200      	movs	r2, #0
 8005e56:	2100      	movs	r1, #0
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f837 	bl	8005ecc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005e5e:	bf00      	nop
 8005e60:	3708      	adds	r7, #8
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}

08005e66 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b086      	sub	sp, #24
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005e70:	2301      	movs	r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	2300      	movs	r3, #0
 8005e76:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005e78:	79fb      	ldrb	r3, [r7, #7]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6939      	ldr	r1, [r7, #16]
 8005e7e:	6978      	ldr	r0, [r7, #20]
 8005e80:	f7ff ff7e 	bl	8005d80 <xQueueGenericCreate>
 8005e84:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f7ff ffd3 	bl	8005e32 <prvInitialiseMutex>

		return xNewQueue;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
	}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b088      	sub	sp, #32
 8005e9a:	af02      	add	r7, sp, #8
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	6039      	str	r1, [r7, #0]
 8005ea0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005eaa:	79fb      	ldrb	r3, [r7, #7]
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	6939      	ldr	r1, [r7, #16]
 8005eb4:	6978      	ldr	r0, [r7, #20]
 8005eb6:	f7ff feeb 	bl	8005c90 <xQueueGenericCreateStatic>
 8005eba:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f7ff ffb8 	bl	8005e32 <prvInitialiseMutex>

		return xNewQueue;
 8005ec2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3718      	adds	r7, #24
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08e      	sub	sp, #56	; 0x38
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005eda:	2300      	movs	r3, #0
 8005edc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10a      	bne.n	8005efe <xQueueGenericSend+0x32>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005efa:	bf00      	nop
 8005efc:	e7fe      	b.n	8005efc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <xQueueGenericSend+0x40>
 8005f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <xQueueGenericSend+0x44>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <xQueueGenericSend+0x46>
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10a      	bne.n	8005f2c <xQueueGenericSend+0x60>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f28:	bf00      	nop
 8005f2a:	e7fe      	b.n	8005f2a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d103      	bne.n	8005f3a <xQueueGenericSend+0x6e>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d101      	bne.n	8005f3e <xQueueGenericSend+0x72>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e000      	b.n	8005f40 <xQueueGenericSend+0x74>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d10a      	bne.n	8005f5a <xQueueGenericSend+0x8e>
	__asm volatile
 8005f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f48:	f383 8811 	msr	BASEPRI, r3
 8005f4c:	f3bf 8f6f 	isb	sy
 8005f50:	f3bf 8f4f 	dsb	sy
 8005f54:	623b      	str	r3, [r7, #32]
}
 8005f56:	bf00      	nop
 8005f58:	e7fe      	b.n	8005f58 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f5a:	f001 fb69 	bl	8007630 <xTaskGetSchedulerState>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d102      	bne.n	8005f6a <xQueueGenericSend+0x9e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <xQueueGenericSend+0xa2>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <xQueueGenericSend+0xa4>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <xQueueGenericSend+0xbe>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	61fb      	str	r3, [r7, #28]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f8a:	f002 faa3 	bl	80084d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d302      	bcc.n	8005fa0 <xQueueGenericSend+0xd4>
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d129      	bne.n	8005ff4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005fa6:	f000 fb2f 	bl	8006608 <prvCopyDataToQueue>
 8005faa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d010      	beq.n	8005fd6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb6:	3324      	adds	r3, #36	; 0x24
 8005fb8:	4618      	mov	r0, r3
 8005fba:	f001 f91b 	bl	80071f4 <xTaskRemoveFromEventList>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d013      	beq.n	8005fec <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fc4:	4b3f      	ldr	r3, [pc, #252]	; (80060c4 <xQueueGenericSend+0x1f8>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	e00a      	b.n	8005fec <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d007      	beq.n	8005fec <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fdc:	4b39      	ldr	r3, [pc, #228]	; (80060c4 <xQueueGenericSend+0x1f8>)
 8005fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	f3bf 8f4f 	dsb	sy
 8005fe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fec:	f002 faa2 	bl	8008534 <vPortExitCritical>
				return pdPASS;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e063      	b.n	80060bc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d103      	bne.n	8006002 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ffa:	f002 fa9b 	bl	8008534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e05c      	b.n	80060bc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006004:	2b00      	cmp	r3, #0
 8006006:	d106      	bne.n	8006016 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	4618      	mov	r0, r3
 800600e:	f001 f9b5 	bl	800737c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006012:	2301      	movs	r3, #1
 8006014:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006016:	f002 fa8d 	bl	8008534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800601a:	f000 fe91 	bl	8006d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800601e:	f002 fa59 	bl	80084d4 <vPortEnterCritical>
 8006022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006024:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006028:	b25b      	sxtb	r3, r3
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d103      	bne.n	8006038 <xQueueGenericSend+0x16c>
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	2200      	movs	r2, #0
 8006034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800603e:	b25b      	sxtb	r3, r3
 8006040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006044:	d103      	bne.n	800604e <xQueueGenericSend+0x182>
 8006046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006048:	2200      	movs	r2, #0
 800604a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800604e:	f002 fa71 	bl	8008534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006052:	1d3a      	adds	r2, r7, #4
 8006054:	f107 0314 	add.w	r3, r7, #20
 8006058:	4611      	mov	r1, r2
 800605a:	4618      	mov	r0, r3
 800605c:	f001 f9a4 	bl	80073a8 <xTaskCheckForTimeOut>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d124      	bne.n	80060b0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006066:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006068:	f000 fbc6 	bl	80067f8 <prvIsQueueFull>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d018      	beq.n	80060a4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	3310      	adds	r3, #16
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	4611      	mov	r1, r2
 800607a:	4618      	mov	r0, r3
 800607c:	f001 f82e 	bl	80070dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006082:	f000 fb51 	bl	8006728 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006086:	f000 fe69 	bl	8006d5c <xTaskResumeAll>
 800608a:	4603      	mov	r3, r0
 800608c:	2b00      	cmp	r3, #0
 800608e:	f47f af7c 	bne.w	8005f8a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006092:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <xQueueGenericSend+0x1f8>)
 8006094:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006098:	601a      	str	r2, [r3, #0]
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	e772      	b.n	8005f8a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060a6:	f000 fb3f 	bl	8006728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060aa:	f000 fe57 	bl	8006d5c <xTaskResumeAll>
 80060ae:	e76c      	b.n	8005f8a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80060b2:	f000 fb39 	bl	8006728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060b6:	f000 fe51 	bl	8006d5c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3738      	adds	r7, #56	; 0x38
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}
 80060c4:	e000ed04 	.word	0xe000ed04

080060c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b090      	sub	sp, #64	; 0x40
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10a      	bne.n	80060f6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d103      	bne.n	8006104 <xQueueGenericSendFromISR+0x3c>
 80060fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006100:	2b00      	cmp	r3, #0
 8006102:	d101      	bne.n	8006108 <xQueueGenericSendFromISR+0x40>
 8006104:	2301      	movs	r3, #1
 8006106:	e000      	b.n	800610a <xQueueGenericSendFromISR+0x42>
 8006108:	2300      	movs	r3, #0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d10a      	bne.n	8006124 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800610e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006112:	f383 8811 	msr	BASEPRI, r3
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	f3bf 8f4f 	dsb	sy
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006120:	bf00      	nop
 8006122:	e7fe      	b.n	8006122 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b02      	cmp	r3, #2
 8006128:	d103      	bne.n	8006132 <xQueueGenericSendFromISR+0x6a>
 800612a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800612c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800612e:	2b01      	cmp	r3, #1
 8006130:	d101      	bne.n	8006136 <xQueueGenericSendFromISR+0x6e>
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <xQueueGenericSendFromISR+0x70>
 8006136:	2300      	movs	r3, #0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800613c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006140:	f383 8811 	msr	BASEPRI, r3
 8006144:	f3bf 8f6f 	isb	sy
 8006148:	f3bf 8f4f 	dsb	sy
 800614c:	623b      	str	r3, [r7, #32]
}
 800614e:	bf00      	nop
 8006150:	e7fe      	b.n	8006150 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006152:	f002 faa1 	bl	8008698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006156:	f3ef 8211 	mrs	r2, BASEPRI
 800615a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800615e:	f383 8811 	msr	BASEPRI, r3
 8006162:	f3bf 8f6f 	isb	sy
 8006166:	f3bf 8f4f 	dsb	sy
 800616a:	61fa      	str	r2, [r7, #28]
 800616c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800616e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006170:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006174:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617a:	429a      	cmp	r2, r3
 800617c:	d302      	bcc.n	8006184 <xQueueGenericSendFromISR+0xbc>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d12f      	bne.n	80061e4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800618a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800618e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006194:	683a      	ldr	r2, [r7, #0]
 8006196:	68b9      	ldr	r1, [r7, #8]
 8006198:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800619a:	f000 fa35 	bl	8006608 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800619e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80061a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a6:	d112      	bne.n	80061ce <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d016      	beq.n	80061de <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b2:	3324      	adds	r3, #36	; 0x24
 80061b4:	4618      	mov	r0, r3
 80061b6:	f001 f81d 	bl	80071f4 <xTaskRemoveFromEventList>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00e      	beq.n	80061de <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00b      	beq.n	80061de <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	e007      	b.n	80061de <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061d2:	3301      	adds	r3, #1
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	b25a      	sxtb	r2, r3
 80061d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80061de:	2301      	movs	r3, #1
 80061e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80061e2:	e001      	b.n	80061e8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ea:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061f2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3740      	adds	r7, #64	; 0x40
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
	...

08006200 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08c      	sub	sp, #48	; 0x30
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800620c:	2300      	movs	r3, #0
 800620e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10a      	bne.n	8006230 <xQueueReceive+0x30>
	__asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	623b      	str	r3, [r7, #32]
}
 800622c:	bf00      	nop
 800622e:	e7fe      	b.n	800622e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <xQueueReceive+0x3e>
 8006236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623a:	2b00      	cmp	r3, #0
 800623c:	d101      	bne.n	8006242 <xQueueReceive+0x42>
 800623e:	2301      	movs	r3, #1
 8006240:	e000      	b.n	8006244 <xQueueReceive+0x44>
 8006242:	2300      	movs	r3, #0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xQueueReceive+0x5e>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	61fb      	str	r3, [r7, #28]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800625e:	f001 f9e7 	bl	8007630 <xTaskGetSchedulerState>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d102      	bne.n	800626e <xQueueReceive+0x6e>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d101      	bne.n	8006272 <xQueueReceive+0x72>
 800626e:	2301      	movs	r3, #1
 8006270:	e000      	b.n	8006274 <xQueueReceive+0x74>
 8006272:	2300      	movs	r3, #0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10a      	bne.n	800628e <xQueueReceive+0x8e>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627c:	f383 8811 	msr	BASEPRI, r3
 8006280:	f3bf 8f6f 	isb	sy
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	61bb      	str	r3, [r7, #24]
}
 800628a:	bf00      	nop
 800628c:	e7fe      	b.n	800628c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800628e:	f002 f921 	bl	80084d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006296:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	d01f      	beq.n	80062de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a2:	f000 fa1b 	bl	80066dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a8:	1e5a      	subs	r2, r3, #1
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00f      	beq.n	80062d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	3310      	adds	r3, #16
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 ff9a 	bl	80071f4 <xTaskRemoveFromEventList>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d007      	beq.n	80062d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062c6:	4b3d      	ldr	r3, [pc, #244]	; (80063bc <xQueueReceive+0x1bc>)
 80062c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062d6:	f002 f92d 	bl	8008534 <vPortExitCritical>
				return pdPASS;
 80062da:	2301      	movs	r3, #1
 80062dc:	e069      	b.n	80063b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d103      	bne.n	80062ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062e4:	f002 f926 	bl	8008534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e062      	b.n	80063b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d106      	bne.n	8006300 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062f2:	f107 0310 	add.w	r3, r7, #16
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 f840 	bl	800737c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062fc:	2301      	movs	r3, #1
 80062fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006300:	f002 f918 	bl	8008534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006304:	f000 fd1c 	bl	8006d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006308:	f002 f8e4 	bl	80084d4 <vPortEnterCritical>
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006312:	b25b      	sxtb	r3, r3
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006318:	d103      	bne.n	8006322 <xQueueReceive+0x122>
 800631a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006324:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006328:	b25b      	sxtb	r3, r3
 800632a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632e:	d103      	bne.n	8006338 <xQueueReceive+0x138>
 8006330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006338:	f002 f8fc 	bl	8008534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800633c:	1d3a      	adds	r2, r7, #4
 800633e:	f107 0310 	add.w	r3, r7, #16
 8006342:	4611      	mov	r1, r2
 8006344:	4618      	mov	r0, r3
 8006346:	f001 f82f 	bl	80073a8 <xTaskCheckForTimeOut>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d123      	bne.n	8006398 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006352:	f000 fa3b 	bl	80067cc <prvIsQueueEmpty>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d017      	beq.n	800638c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	3324      	adds	r3, #36	; 0x24
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	4611      	mov	r1, r2
 8006364:	4618      	mov	r0, r3
 8006366:	f000 feb9 	bl	80070dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800636a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800636c:	f000 f9dc 	bl	8006728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006370:	f000 fcf4 	bl	8006d5c <xTaskResumeAll>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d189      	bne.n	800628e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800637a:	4b10      	ldr	r3, [pc, #64]	; (80063bc <xQueueReceive+0x1bc>)
 800637c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006380:	601a      	str	r2, [r3, #0]
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	f3bf 8f6f 	isb	sy
 800638a:	e780      	b.n	800628e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800638c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800638e:	f000 f9cb 	bl	8006728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006392:	f000 fce3 	bl	8006d5c <xTaskResumeAll>
 8006396:	e77a      	b.n	800628e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639a:	f000 f9c5 	bl	8006728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800639e:	f000 fcdd 	bl	8006d5c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80063a4:	f000 fa12 	bl	80067cc <prvIsQueueEmpty>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f43f af6f 	beq.w	800628e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3730      	adds	r7, #48	; 0x30
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	e000ed04 	.word	0xe000ed04

080063c0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08e      	sub	sp, #56	; 0x38
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063ca:	2300      	movs	r3, #0
 80063cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80063d2:	2300      	movs	r3, #0
 80063d4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	623b      	str	r3, [r7, #32]
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d00a      	beq.n	8006410 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	61fb      	str	r3, [r7, #28]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006410:	f001 f90e 	bl	8007630 <xTaskGetSchedulerState>
 8006414:	4603      	mov	r3, r0
 8006416:	2b00      	cmp	r3, #0
 8006418:	d102      	bne.n	8006420 <xQueueSemaphoreTake+0x60>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <xQueueSemaphoreTake+0x64>
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <xQueueSemaphoreTake+0x66>
 8006424:	2300      	movs	r3, #0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	61bb      	str	r3, [r7, #24]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006440:	f002 f848 	bl	80084d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	2b00      	cmp	r3, #0
 800644e:	d024      	beq.n	800649a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	1e5a      	subs	r2, r3, #1
 8006454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006456:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006460:	f001 faa6 	bl	80079b0 <pvTaskIncrementMutexHeldCount>
 8006464:	4602      	mov	r2, r0
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800646a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00f      	beq.n	8006492 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	3310      	adds	r3, #16
 8006476:	4618      	mov	r0, r3
 8006478:	f000 febc 	bl	80071f4 <xTaskRemoveFromEventList>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006482:	4b54      	ldr	r3, [pc, #336]	; (80065d4 <xQueueSemaphoreTake+0x214>)
 8006484:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006488:	601a      	str	r2, [r3, #0]
 800648a:	f3bf 8f4f 	dsb	sy
 800648e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006492:	f002 f84f 	bl	8008534 <vPortExitCritical>
				return pdPASS;
 8006496:	2301      	movs	r3, #1
 8006498:	e097      	b.n	80065ca <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d111      	bne.n	80064c4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00a      	beq.n	80064bc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80064a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064aa:	f383 8811 	msr	BASEPRI, r3
 80064ae:	f3bf 8f6f 	isb	sy
 80064b2:	f3bf 8f4f 	dsb	sy
 80064b6:	617b      	str	r3, [r7, #20]
}
 80064b8:	bf00      	nop
 80064ba:	e7fe      	b.n	80064ba <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80064bc:	f002 f83a 	bl	8008534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064c0:	2300      	movs	r3, #0
 80064c2:	e082      	b.n	80065ca <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d106      	bne.n	80064d8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ca:	f107 030c 	add.w	r3, r7, #12
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 ff54 	bl	800737c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064d4:	2301      	movs	r3, #1
 80064d6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064d8:	f002 f82c 	bl	8008534 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064dc:	f000 fc30 	bl	8006d40 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064e0:	f001 fff8 	bl	80084d4 <vPortEnterCritical>
 80064e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80064ea:	b25b      	sxtb	r3, r3
 80064ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f0:	d103      	bne.n	80064fa <xQueueSemaphoreTake+0x13a>
 80064f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006500:	b25b      	sxtb	r3, r3
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d103      	bne.n	8006510 <xQueueSemaphoreTake+0x150>
 8006508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800650a:	2200      	movs	r2, #0
 800650c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006510:	f002 f810 	bl	8008534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006514:	463a      	mov	r2, r7
 8006516:	f107 030c 	add.w	r3, r7, #12
 800651a:	4611      	mov	r1, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f000 ff43 	bl	80073a8 <xTaskCheckForTimeOut>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d132      	bne.n	800658e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006528:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800652a:	f000 f94f 	bl	80067cc <prvIsQueueEmpty>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d026      	beq.n	8006582 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d109      	bne.n	8006550 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800653c:	f001 ffca 	bl	80084d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	4618      	mov	r0, r3
 8006546:	f001 f891 	bl	800766c <xTaskPriorityInherit>
 800654a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800654c:	f001 fff2 	bl	8008534 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006552:	3324      	adds	r3, #36	; 0x24
 8006554:	683a      	ldr	r2, [r7, #0]
 8006556:	4611      	mov	r1, r2
 8006558:	4618      	mov	r0, r3
 800655a:	f000 fdbf 	bl	80070dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800655e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006560:	f000 f8e2 	bl	8006728 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006564:	f000 fbfa 	bl	8006d5c <xTaskResumeAll>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	f47f af68 	bne.w	8006440 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8006570:	4b18      	ldr	r3, [pc, #96]	; (80065d4 <xQueueSemaphoreTake+0x214>)
 8006572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006576:	601a      	str	r2, [r3, #0]
 8006578:	f3bf 8f4f 	dsb	sy
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	e75e      	b.n	8006440 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006582:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006584:	f000 f8d0 	bl	8006728 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006588:	f000 fbe8 	bl	8006d5c <xTaskResumeAll>
 800658c:	e758      	b.n	8006440 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800658e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006590:	f000 f8ca 	bl	8006728 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006594:	f000 fbe2 	bl	8006d5c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006598:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800659a:	f000 f917 	bl	80067cc <prvIsQueueEmpty>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f43f af4d 	beq.w	8006440 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00d      	beq.n	80065c8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80065ac:	f001 ff92 	bl	80084d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80065b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80065b2:	f000 f811 	bl	80065d8 <prvGetDisinheritPriorityAfterTimeout>
 80065b6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065be:	4618      	mov	r0, r3
 80065c0:	f001 f950 	bl	8007864 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065c4:	f001 ffb6 	bl	8008534 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065c8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3738      	adds	r7, #56	; 0x38
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	e000ed04 	.word	0xe000ed04

080065d8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d006      	beq.n	80065f6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f1c3 0307 	rsb	r3, r3, #7
 80065f2:	60fb      	str	r3, [r7, #12]
 80065f4:	e001      	b.n	80065fa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80065fa:	68fb      	ldr	r3, [r7, #12]
	}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b086      	sub	sp, #24
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006614:	2300      	movs	r3, #0
 8006616:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d10d      	bne.n	8006642 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d14d      	bne.n	80066ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	4618      	mov	r0, r3
 8006634:	f001 f890 	bl	8007758 <xTaskPriorityDisinherit>
 8006638:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	609a      	str	r2, [r3, #8]
 8006640:	e043      	b.n	80066ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d119      	bne.n	800667c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6858      	ldr	r0, [r3, #4]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	461a      	mov	r2, r3
 8006652:	68b9      	ldr	r1, [r7, #8]
 8006654:	f002 fa74 	bl	8008b40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006660:	441a      	add	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	429a      	cmp	r2, r3
 8006670:	d32b      	bcc.n	80066ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	605a      	str	r2, [r3, #4]
 800667a:	e026      	b.n	80066ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	68d8      	ldr	r0, [r3, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	461a      	mov	r2, r3
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	f002 fa5a 	bl	8008b40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	68da      	ldr	r2, [r3, #12]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	425b      	negs	r3, r3
 8006696:	441a      	add	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d207      	bcs.n	80066b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	425b      	negs	r3, r3
 80066b2:	441a      	add	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d105      	bne.n	80066ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d002      	beq.n	80066ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	3b01      	subs	r3, #1
 80066c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1c5a      	adds	r2, r3, #1
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80066d2:	697b      	ldr	r3, [r7, #20]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d018      	beq.n	8006720 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68da      	ldr	r2, [r3, #12]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066f6:	441a      	add	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	68da      	ldr	r2, [r3, #12]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	429a      	cmp	r2, r3
 8006706:	d303      	bcc.n	8006710 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	68d9      	ldr	r1, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	461a      	mov	r2, r3
 800671a:	6838      	ldr	r0, [r7, #0]
 800671c:	f002 fa10 	bl	8008b40 <memcpy>
	}
}
 8006720:	bf00      	nop
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006730:	f001 fed0 	bl	80084d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800673a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800673c:	e011      	b.n	8006762 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	d012      	beq.n	800676c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3324      	adds	r3, #36	; 0x24
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fd52 	bl	80071f4 <xTaskRemoveFromEventList>
 8006750:	4603      	mov	r3, r0
 8006752:	2b00      	cmp	r3, #0
 8006754:	d001      	beq.n	800675a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006756:	f000 fe89 	bl	800746c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	3b01      	subs	r3, #1
 800675e:	b2db      	uxtb	r3, r3
 8006760:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006766:	2b00      	cmp	r3, #0
 8006768:	dce9      	bgt.n	800673e <prvUnlockQueue+0x16>
 800676a:	e000      	b.n	800676e <prvUnlockQueue+0x46>
					break;
 800676c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	22ff      	movs	r2, #255	; 0xff
 8006772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006776:	f001 fedd 	bl	8008534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800677a:	f001 feab 	bl	80084d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006784:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006786:	e011      	b.n	80067ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d012      	beq.n	80067b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3310      	adds	r3, #16
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fd2d 	bl	80071f4 <xTaskRemoveFromEventList>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80067a0:	f000 fe64 	bl	800746c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	b2db      	uxtb	r3, r3
 80067aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80067ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	dce9      	bgt.n	8006788 <prvUnlockQueue+0x60>
 80067b4:	e000      	b.n	80067b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80067b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	22ff      	movs	r2, #255	; 0xff
 80067bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80067c0:	f001 feb8 	bl	8008534 <vPortExitCritical>
}
 80067c4:	bf00      	nop
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80067d4:	f001 fe7e 	bl	80084d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d102      	bne.n	80067e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80067e0:	2301      	movs	r3, #1
 80067e2:	60fb      	str	r3, [r7, #12]
 80067e4:	e001      	b.n	80067ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80067ea:	f001 fea3 	bl	8008534 <vPortExitCritical>

	return xReturn;
 80067ee:	68fb      	ldr	r3, [r7, #12]
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006800:	f001 fe68 	bl	80084d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680c:	429a      	cmp	r2, r3
 800680e:	d102      	bne.n	8006816 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006810:	2301      	movs	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e001      	b.n	800681a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006816:	2300      	movs	r3, #0
 8006818:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800681a:	f001 fe8b 	bl	8008534 <vPortExitCritical>

	return xReturn;
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006832:	2300      	movs	r3, #0
 8006834:	60fb      	str	r3, [r7, #12]
 8006836:	e014      	b.n	8006862 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006838:	4a0f      	ldr	r2, [pc, #60]	; (8006878 <vQueueAddToRegistry+0x50>)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d10b      	bne.n	800685c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006844:	490c      	ldr	r1, [pc, #48]	; (8006878 <vQueueAddToRegistry+0x50>)
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800684e:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <vQueueAddToRegistry+0x50>)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	00db      	lsls	r3, r3, #3
 8006854:	4413      	add	r3, r2
 8006856:	687a      	ldr	r2, [r7, #4]
 8006858:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800685a:	e006      	b.n	800686a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3301      	adds	r3, #1
 8006860:	60fb      	str	r3, [r7, #12]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2b07      	cmp	r3, #7
 8006866:	d9e7      	bls.n	8006838 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006868:	bf00      	nop
 800686a:	bf00      	nop
 800686c:	3714      	adds	r7, #20
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	20002770 	.word	0x20002770

0800687c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800687c:	b580      	push	{r7, lr}
 800687e:	b086      	sub	sp, #24
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800688c:	f001 fe22 	bl	80084d4 <vPortEnterCritical>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006896:	b25b      	sxtb	r3, r3
 8006898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800689c:	d103      	bne.n	80068a6 <vQueueWaitForMessageRestricted+0x2a>
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80068ac:	b25b      	sxtb	r3, r3
 80068ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068b2:	d103      	bne.n	80068bc <vQueueWaitForMessageRestricted+0x40>
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80068bc:	f001 fe3a 	bl	8008534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80068c0:	697b      	ldr	r3, [r7, #20]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d106      	bne.n	80068d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	3324      	adds	r3, #36	; 0x24
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f000 fc63 	bl	800719c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80068d6:	6978      	ldr	r0, [r7, #20]
 80068d8:	f7ff ff26 	bl	8006728 <prvUnlockQueue>
	}
 80068dc:	bf00      	nop
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08e      	sub	sp, #56	; 0x38
 80068e8:	af04      	add	r7, sp, #16
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80068f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <xTaskCreateStatic+0x2a>
	__asm volatile
 80068f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068fc:	f383 8811 	msr	BASEPRI, r3
 8006900:	f3bf 8f6f 	isb	sy
 8006904:	f3bf 8f4f 	dsb	sy
 8006908:	623b      	str	r3, [r7, #32]
}
 800690a:	bf00      	nop
 800690c:	e7fe      	b.n	800690c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10a      	bne.n	800692a <xTaskCreateStatic+0x46>
	__asm volatile
 8006914:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006918:	f383 8811 	msr	BASEPRI, r3
 800691c:	f3bf 8f6f 	isb	sy
 8006920:	f3bf 8f4f 	dsb	sy
 8006924:	61fb      	str	r3, [r7, #28]
}
 8006926:	bf00      	nop
 8006928:	e7fe      	b.n	8006928 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800692a:	2354      	movs	r3, #84	; 0x54
 800692c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b54      	cmp	r3, #84	; 0x54
 8006932:	d00a      	beq.n	800694a <xTaskCreateStatic+0x66>
	__asm volatile
 8006934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006938:	f383 8811 	msr	BASEPRI, r3
 800693c:	f3bf 8f6f 	isb	sy
 8006940:	f3bf 8f4f 	dsb	sy
 8006944:	61bb      	str	r3, [r7, #24]
}
 8006946:	bf00      	nop
 8006948:	e7fe      	b.n	8006948 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800694a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	2b00      	cmp	r3, #0
 8006950:	d01e      	beq.n	8006990 <xTaskCreateStatic+0xac>
 8006952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006954:	2b00      	cmp	r3, #0
 8006956:	d01b      	beq.n	8006990 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006960:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	2202      	movs	r2, #2
 8006966:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800696a:	2300      	movs	r3, #0
 800696c:	9303      	str	r3, [sp, #12]
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	9302      	str	r3, [sp, #8]
 8006972:	f107 0314 	add.w	r3, r7, #20
 8006976:	9301      	str	r3, [sp, #4]
 8006978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 f850 	bl	8006a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006988:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800698a:	f000 f8d5 	bl	8006b38 <prvAddNewTaskToReadyList>
 800698e:	e001      	b.n	8006994 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006994:	697b      	ldr	r3, [r7, #20]
	}
 8006996:	4618      	mov	r0, r3
 8006998:	3728      	adds	r7, #40	; 0x28
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}

0800699e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800699e:	b580      	push	{r7, lr}
 80069a0:	b08c      	sub	sp, #48	; 0x30
 80069a2:	af04      	add	r7, sp, #16
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	603b      	str	r3, [r7, #0]
 80069aa:	4613      	mov	r3, r2
 80069ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4618      	mov	r0, r3
 80069b4:	f001 feb0 	bl	8008718 <pvPortMalloc>
 80069b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00e      	beq.n	80069de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80069c0:	2054      	movs	r0, #84	; 0x54
 80069c2:	f001 fea9 	bl	8008718 <pvPortMalloc>
 80069c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d003      	beq.n	80069d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	697a      	ldr	r2, [r7, #20]
 80069d2:	631a      	str	r2, [r3, #48]	; 0x30
 80069d4:	e005      	b.n	80069e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80069d6:	6978      	ldr	r0, [r7, #20]
 80069d8:	f001 ff6a 	bl	80088b0 <vPortFree>
 80069dc:	e001      	b.n	80069e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d017      	beq.n	8006a18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80069f0:	88fa      	ldrh	r2, [r7, #6]
 80069f2:	2300      	movs	r3, #0
 80069f4:	9303      	str	r3, [sp, #12]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	9302      	str	r3, [sp, #8]
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	9301      	str	r3, [sp, #4]
 80069fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a00:	9300      	str	r3, [sp, #0]
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f80e 	bl	8006a28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a0c:	69f8      	ldr	r0, [r7, #28]
 8006a0e:	f000 f893 	bl	8006b38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a12:	2301      	movs	r3, #1
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	e002      	b.n	8006a1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006a18:	f04f 33ff 	mov.w	r3, #4294967295
 8006a1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
	}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3720      	adds	r7, #32
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b088      	sub	sp, #32
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	607a      	str	r2, [r7, #4]
 8006a34:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006a40:	3b01      	subs	r3, #1
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4413      	add	r3, r2
 8006a46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f023 0307 	bic.w	r3, r3, #7
 8006a4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00a      	beq.n	8006a70 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	617b      	str	r3, [r7, #20]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d01f      	beq.n	8006ab6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a76:	2300      	movs	r3, #0
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	e012      	b.n	8006aa2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	4413      	add	r3, r2
 8006a82:	7819      	ldrb	r1, [r3, #0]
 8006a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4413      	add	r3, r2
 8006a8a:	3334      	adds	r3, #52	; 0x34
 8006a8c:	460a      	mov	r2, r1
 8006a8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d006      	beq.n	8006aaa <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	61fb      	str	r3, [r7, #28]
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b0f      	cmp	r3, #15
 8006aa6:	d9e9      	bls.n	8006a7c <prvInitialiseNewTask+0x54>
 8006aa8:	e000      	b.n	8006aac <prvInitialiseNewTask+0x84>
			{
				break;
 8006aaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ab4:	e003      	b.n	8006abe <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	2b06      	cmp	r3, #6
 8006ac2:	d901      	bls.n	8006ac8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ac4:	2306      	movs	r3, #6
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006acc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	3304      	adds	r3, #4
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe ffd9 	bl	8005a96 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	3318      	adds	r3, #24
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7fe ffd4 	bl	8005a96 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006af2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	f1c3 0207 	rsb	r2, r3, #7
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	2200      	movs	r2, #0
 8006b08:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006b12:	683a      	ldr	r2, [r7, #0]
 8006b14:	68f9      	ldr	r1, [r7, #12]
 8006b16:	69b8      	ldr	r0, [r7, #24]
 8006b18:	f001 fbac 	bl	8008274 <pxPortInitialiseStack>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b20:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d002      	beq.n	8006b2e <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b2c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b2e:	bf00      	nop
 8006b30:	3720      	adds	r7, #32
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006b40:	f001 fcc8 	bl	80084d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006b44:	4b2a      	ldr	r3, [pc, #168]	; (8006bf0 <prvAddNewTaskToReadyList+0xb8>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	4a29      	ldr	r2, [pc, #164]	; (8006bf0 <prvAddNewTaskToReadyList+0xb8>)
 8006b4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006b4e:	4b29      	ldr	r3, [pc, #164]	; (8006bf4 <prvAddNewTaskToReadyList+0xbc>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d109      	bne.n	8006b6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006b56:	4a27      	ldr	r2, [pc, #156]	; (8006bf4 <prvAddNewTaskToReadyList+0xbc>)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006b5c:	4b24      	ldr	r3, [pc, #144]	; (8006bf0 <prvAddNewTaskToReadyList+0xb8>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d110      	bne.n	8006b86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006b64:	f000 fca6 	bl	80074b4 <prvInitialiseTaskLists>
 8006b68:	e00d      	b.n	8006b86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006b6a:	4b23      	ldr	r3, [pc, #140]	; (8006bf8 <prvAddNewTaskToReadyList+0xc0>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d109      	bne.n	8006b86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006b72:	4b20      	ldr	r3, [pc, #128]	; (8006bf4 <prvAddNewTaskToReadyList+0xbc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d802      	bhi.n	8006b86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006b80:	4a1c      	ldr	r2, [pc, #112]	; (8006bf4 <prvAddNewTaskToReadyList+0xbc>)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006b86:	4b1d      	ldr	r3, [pc, #116]	; (8006bfc <prvAddNewTaskToReadyList+0xc4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	4a1b      	ldr	r2, [pc, #108]	; (8006bfc <prvAddNewTaskToReadyList+0xc4>)
 8006b8e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	2201      	movs	r2, #1
 8006b96:	409a      	lsls	r2, r3
 8006b98:	4b19      	ldr	r3, [pc, #100]	; (8006c00 <prvAddNewTaskToReadyList+0xc8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	4a18      	ldr	r2, [pc, #96]	; (8006c00 <prvAddNewTaskToReadyList+0xc8>)
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	009b      	lsls	r3, r3, #2
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	4a15      	ldr	r2, [pc, #84]	; (8006c04 <prvAddNewTaskToReadyList+0xcc>)
 8006bb0:	441a      	add	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7fe ff79 	bl	8005ab0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006bbe:	f001 fcb9 	bl	8008534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006bc2:	4b0d      	ldr	r3, [pc, #52]	; (8006bf8 <prvAddNewTaskToReadyList+0xc0>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00e      	beq.n	8006be8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006bca:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <prvAddNewTaskToReadyList+0xbc>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d207      	bcs.n	8006be8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006bd8:	4b0b      	ldr	r3, [pc, #44]	; (8006c08 <prvAddNewTaskToReadyList+0xd0>)
 8006bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bde:	601a      	str	r2, [r3, #0]
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be8:	bf00      	nop
 8006bea:	3708      	adds	r7, #8
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	2000083c 	.word	0x2000083c
 8006bf4:	2000073c 	.word	0x2000073c
 8006bf8:	20000848 	.word	0x20000848
 8006bfc:	20000858 	.word	0x20000858
 8006c00:	20000844 	.word	0x20000844
 8006c04:	20000740 	.word	0x20000740
 8006c08:	e000ed04 	.word	0xe000ed04

08006c0c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006c14:	2300      	movs	r3, #0
 8006c16:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d017      	beq.n	8006c4e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006c1e:	4b13      	ldr	r3, [pc, #76]	; (8006c6c <vTaskDelay+0x60>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d00a      	beq.n	8006c3c <vTaskDelay+0x30>
	__asm volatile
 8006c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2a:	f383 8811 	msr	BASEPRI, r3
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f3bf 8f4f 	dsb	sy
 8006c36:	60bb      	str	r3, [r7, #8]
}
 8006c38:	bf00      	nop
 8006c3a:	e7fe      	b.n	8006c3a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006c3c:	f000 f880 	bl	8006d40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006c40:	2100      	movs	r1, #0
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 fec8 	bl	80079d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006c48:	f000 f888 	bl	8006d5c <xTaskResumeAll>
 8006c4c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d107      	bne.n	8006c64 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006c54:	4b06      	ldr	r3, [pc, #24]	; (8006c70 <vTaskDelay+0x64>)
 8006c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006c64:	bf00      	nop
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000864 	.word	0x20000864
 8006c70:	e000ed04 	.word	0xe000ed04

08006c74 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b08a      	sub	sp, #40	; 0x28
 8006c78:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c82:	463a      	mov	r2, r7
 8006c84:	1d39      	adds	r1, r7, #4
 8006c86:	f107 0308 	add.w	r3, r7, #8
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7f9 fc74 	bl	8000578 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	9202      	str	r2, [sp, #8]
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	9300      	str	r3, [sp, #0]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	460a      	mov	r2, r1
 8006ca2:	4921      	ldr	r1, [pc, #132]	; (8006d28 <vTaskStartScheduler+0xb4>)
 8006ca4:	4821      	ldr	r0, [pc, #132]	; (8006d2c <vTaskStartScheduler+0xb8>)
 8006ca6:	f7ff fe1d 	bl	80068e4 <xTaskCreateStatic>
 8006caa:	4603      	mov	r3, r0
 8006cac:	4a20      	ldr	r2, [pc, #128]	; (8006d30 <vTaskStartScheduler+0xbc>)
 8006cae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006cb0:	4b1f      	ldr	r3, [pc, #124]	; (8006d30 <vTaskStartScheduler+0xbc>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d002      	beq.n	8006cbe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	617b      	str	r3, [r7, #20]
 8006cbc:	e001      	b.n	8006cc2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	2b01      	cmp	r3, #1
 8006cc6:	d102      	bne.n	8006cce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006cc8:	f000 feec 	bl	8007aa4 <xTimerCreateTimerTask>
 8006ccc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d116      	bne.n	8006d02 <vTaskStartScheduler+0x8e>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	613b      	str	r3, [r7, #16]
}
 8006ce6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ce8:	4b12      	ldr	r3, [pc, #72]	; (8006d34 <vTaskStartScheduler+0xc0>)
 8006cea:	f04f 32ff 	mov.w	r2, #4294967295
 8006cee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006cf0:	4b11      	ldr	r3, [pc, #68]	; (8006d38 <vTaskStartScheduler+0xc4>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006cf6:	4b11      	ldr	r3, [pc, #68]	; (8006d3c <vTaskStartScheduler+0xc8>)
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006cfc:	f001 fb48 	bl	8008390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d00:	e00e      	b.n	8006d20 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d08:	d10a      	bne.n	8006d20 <vTaskStartScheduler+0xac>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0e:	f383 8811 	msr	BASEPRI, r3
 8006d12:	f3bf 8f6f 	isb	sy
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	60fb      	str	r3, [r7, #12]
}
 8006d1c:	bf00      	nop
 8006d1e:	e7fe      	b.n	8006d1e <vTaskStartScheduler+0xaa>
}
 8006d20:	bf00      	nop
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	080095cc 	.word	0x080095cc
 8006d2c:	08007485 	.word	0x08007485
 8006d30:	20000860 	.word	0x20000860
 8006d34:	2000085c 	.word	0x2000085c
 8006d38:	20000848 	.word	0x20000848
 8006d3c:	20000840 	.word	0x20000840

08006d40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d40:	b480      	push	{r7}
 8006d42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006d44:	4b04      	ldr	r3, [pc, #16]	; (8006d58 <vTaskSuspendAll+0x18>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	3301      	adds	r3, #1
 8006d4a:	4a03      	ldr	r2, [pc, #12]	; (8006d58 <vTaskSuspendAll+0x18>)
 8006d4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006d4e:	bf00      	nop
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr
 8006d58:	20000864 	.word	0x20000864

08006d5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b084      	sub	sp, #16
 8006d60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006d62:	2300      	movs	r3, #0
 8006d64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006d6a:	4b41      	ldr	r3, [pc, #260]	; (8006e70 <xTaskResumeAll+0x114>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <xTaskResumeAll+0x2c>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	603b      	str	r3, [r7, #0]
}
 8006d84:	bf00      	nop
 8006d86:	e7fe      	b.n	8006d86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d88:	f001 fba4 	bl	80084d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d8c:	4b38      	ldr	r3, [pc, #224]	; (8006e70 <xTaskResumeAll+0x114>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	3b01      	subs	r3, #1
 8006d92:	4a37      	ldr	r2, [pc, #220]	; (8006e70 <xTaskResumeAll+0x114>)
 8006d94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d96:	4b36      	ldr	r3, [pc, #216]	; (8006e70 <xTaskResumeAll+0x114>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d161      	bne.n	8006e62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d9e:	4b35      	ldr	r3, [pc, #212]	; (8006e74 <xTaskResumeAll+0x118>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d05d      	beq.n	8006e62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006da6:	e02e      	b.n	8006e06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006da8:	4b33      	ldr	r3, [pc, #204]	; (8006e78 <xTaskResumeAll+0x11c>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	3318      	adds	r3, #24
 8006db4:	4618      	mov	r0, r3
 8006db6:	f7fe fed8 	bl	8005b6a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe fed3 	bl	8005b6a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc8:	2201      	movs	r2, #1
 8006dca:	409a      	lsls	r2, r3
 8006dcc:	4b2b      	ldr	r3, [pc, #172]	; (8006e7c <xTaskResumeAll+0x120>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	4a2a      	ldr	r2, [pc, #168]	; (8006e7c <xTaskResumeAll+0x120>)
 8006dd4:	6013      	str	r3, [r2, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dda:	4613      	mov	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	4a27      	ldr	r2, [pc, #156]	; (8006e80 <xTaskResumeAll+0x124>)
 8006de4:	441a      	add	r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3304      	adds	r3, #4
 8006dea:	4619      	mov	r1, r3
 8006dec:	4610      	mov	r0, r2
 8006dee:	f7fe fe5f 	bl	8005ab0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006df6:	4b23      	ldr	r3, [pc, #140]	; (8006e84 <xTaskResumeAll+0x128>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d302      	bcc.n	8006e06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006e00:	4b21      	ldr	r3, [pc, #132]	; (8006e88 <xTaskResumeAll+0x12c>)
 8006e02:	2201      	movs	r2, #1
 8006e04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e06:	4b1c      	ldr	r3, [pc, #112]	; (8006e78 <xTaskResumeAll+0x11c>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1cc      	bne.n	8006da8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e14:	f000 fbec 	bl	80075f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e18:	4b1c      	ldr	r3, [pc, #112]	; (8006e8c <xTaskResumeAll+0x130>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d010      	beq.n	8006e46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e24:	f000 f846 	bl	8006eb4 <xTaskIncrementTick>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8006e2e:	4b16      	ldr	r3, [pc, #88]	; (8006e88 <xTaskResumeAll+0x12c>)
 8006e30:	2201      	movs	r2, #1
 8006e32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	3b01      	subs	r3, #1
 8006e38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1f1      	bne.n	8006e24 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006e40:	4b12      	ldr	r3, [pc, #72]	; (8006e8c <xTaskResumeAll+0x130>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <xTaskResumeAll+0x12c>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d009      	beq.n	8006e62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006e52:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <xTaskResumeAll+0x134>)
 8006e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e62:	f001 fb67 	bl	8008534 <vPortExitCritical>

	return xAlreadyYielded;
 8006e66:	68bb      	ldr	r3, [r7, #8]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	20000864 	.word	0x20000864
 8006e74:	2000083c 	.word	0x2000083c
 8006e78:	200007fc 	.word	0x200007fc
 8006e7c:	20000844 	.word	0x20000844
 8006e80:	20000740 	.word	0x20000740
 8006e84:	2000073c 	.word	0x2000073c
 8006e88:	20000850 	.word	0x20000850
 8006e8c:	2000084c 	.word	0x2000084c
 8006e90:	e000ed04 	.word	0xe000ed04

08006e94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e94:	b480      	push	{r7}
 8006e96:	b083      	sub	sp, #12
 8006e98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e9a:	4b05      	ldr	r3, [pc, #20]	; (8006eb0 <xTaskGetTickCount+0x1c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ea0:	687b      	ldr	r3, [r7, #4]
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	20000840 	.word	0x20000840

08006eb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b086      	sub	sp, #24
 8006eb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ebe:	4b4e      	ldr	r3, [pc, #312]	; (8006ff8 <xTaskIncrementTick+0x144>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	f040 808e 	bne.w	8006fe4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ec8:	4b4c      	ldr	r3, [pc, #304]	; (8006ffc <xTaskIncrementTick+0x148>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3301      	adds	r3, #1
 8006ece:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ed0:	4a4a      	ldr	r2, [pc, #296]	; (8006ffc <xTaskIncrementTick+0x148>)
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d120      	bne.n	8006f1e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006edc:	4b48      	ldr	r3, [pc, #288]	; (8007000 <xTaskIncrementTick+0x14c>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d00a      	beq.n	8006efc <xTaskIncrementTick+0x48>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	603b      	str	r3, [r7, #0]
}
 8006ef8:	bf00      	nop
 8006efa:	e7fe      	b.n	8006efa <xTaskIncrementTick+0x46>
 8006efc:	4b40      	ldr	r3, [pc, #256]	; (8007000 <xTaskIncrementTick+0x14c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	60fb      	str	r3, [r7, #12]
 8006f02:	4b40      	ldr	r3, [pc, #256]	; (8007004 <xTaskIncrementTick+0x150>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a3e      	ldr	r2, [pc, #248]	; (8007000 <xTaskIncrementTick+0x14c>)
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	4a3e      	ldr	r2, [pc, #248]	; (8007004 <xTaskIncrementTick+0x150>)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	6013      	str	r3, [r2, #0]
 8006f10:	4b3d      	ldr	r3, [pc, #244]	; (8007008 <xTaskIncrementTick+0x154>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3301      	adds	r3, #1
 8006f16:	4a3c      	ldr	r2, [pc, #240]	; (8007008 <xTaskIncrementTick+0x154>)
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	f000 fb69 	bl	80075f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f1e:	4b3b      	ldr	r3, [pc, #236]	; (800700c <xTaskIncrementTick+0x158>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	693a      	ldr	r2, [r7, #16]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d348      	bcc.n	8006fba <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f28:	4b35      	ldr	r3, [pc, #212]	; (8007000 <xTaskIncrementTick+0x14c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d104      	bne.n	8006f3c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f32:	4b36      	ldr	r3, [pc, #216]	; (800700c <xTaskIncrementTick+0x158>)
 8006f34:	f04f 32ff 	mov.w	r2, #4294967295
 8006f38:	601a      	str	r2, [r3, #0]
					break;
 8006f3a:	e03e      	b.n	8006fba <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f3c:	4b30      	ldr	r3, [pc, #192]	; (8007000 <xTaskIncrementTick+0x14c>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	68db      	ldr	r3, [r3, #12]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d203      	bcs.n	8006f5c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006f54:	4a2d      	ldr	r2, [pc, #180]	; (800700c <xTaskIncrementTick+0x158>)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006f5a:	e02e      	b.n	8006fba <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	3304      	adds	r3, #4
 8006f60:	4618      	mov	r0, r3
 8006f62:	f7fe fe02 	bl	8005b6a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d004      	beq.n	8006f78 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	3318      	adds	r3, #24
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7fe fdf9 	bl	8005b6a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7c:	2201      	movs	r2, #1
 8006f7e:	409a      	lsls	r2, r3
 8006f80:	4b23      	ldr	r3, [pc, #140]	; (8007010 <xTaskIncrementTick+0x15c>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	4a22      	ldr	r2, [pc, #136]	; (8007010 <xTaskIncrementTick+0x15c>)
 8006f88:	6013      	str	r3, [r2, #0]
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f8e:	4613      	mov	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4413      	add	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4a1f      	ldr	r2, [pc, #124]	; (8007014 <xTaskIncrementTick+0x160>)
 8006f98:	441a      	add	r2, r3
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fe fd85 	bl	8005ab0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006faa:	4b1b      	ldr	r3, [pc, #108]	; (8007018 <xTaskIncrementTick+0x164>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d3b9      	bcc.n	8006f28 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fb8:	e7b6      	b.n	8006f28 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006fba:	4b17      	ldr	r3, [pc, #92]	; (8007018 <xTaskIncrementTick+0x164>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fc0:	4914      	ldr	r1, [pc, #80]	; (8007014 <xTaskIncrementTick+0x160>)
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	4413      	add	r3, r2
 8006fc8:	009b      	lsls	r3, r3, #2
 8006fca:	440b      	add	r3, r1
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d901      	bls.n	8006fd6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006fd6:	4b11      	ldr	r3, [pc, #68]	; (800701c <xTaskIncrementTick+0x168>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d007      	beq.n	8006fee <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	e004      	b.n	8006fee <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006fe4:	4b0e      	ldr	r3, [pc, #56]	; (8007020 <xTaskIncrementTick+0x16c>)
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	4a0d      	ldr	r2, [pc, #52]	; (8007020 <xTaskIncrementTick+0x16c>)
 8006fec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006fee:	697b      	ldr	r3, [r7, #20]
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3718      	adds	r7, #24
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000864 	.word	0x20000864
 8006ffc:	20000840 	.word	0x20000840
 8007000:	200007f4 	.word	0x200007f4
 8007004:	200007f8 	.word	0x200007f8
 8007008:	20000854 	.word	0x20000854
 800700c:	2000085c 	.word	0x2000085c
 8007010:	20000844 	.word	0x20000844
 8007014:	20000740 	.word	0x20000740
 8007018:	2000073c 	.word	0x2000073c
 800701c:	20000850 	.word	0x20000850
 8007020:	2000084c 	.word	0x2000084c

08007024 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007024:	b480      	push	{r7}
 8007026:	b087      	sub	sp, #28
 8007028:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800702a:	4b27      	ldr	r3, [pc, #156]	; (80070c8 <vTaskSwitchContext+0xa4>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d003      	beq.n	800703a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007032:	4b26      	ldr	r3, [pc, #152]	; (80070cc <vTaskSwitchContext+0xa8>)
 8007034:	2201      	movs	r2, #1
 8007036:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007038:	e03f      	b.n	80070ba <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800703a:	4b24      	ldr	r3, [pc, #144]	; (80070cc <vTaskSwitchContext+0xa8>)
 800703c:	2200      	movs	r2, #0
 800703e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007040:	4b23      	ldr	r3, [pc, #140]	; (80070d0 <vTaskSwitchContext+0xac>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	fab3 f383 	clz	r3, r3
 800704c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800704e:	7afb      	ldrb	r3, [r7, #11]
 8007050:	f1c3 031f 	rsb	r3, r3, #31
 8007054:	617b      	str	r3, [r7, #20]
 8007056:	491f      	ldr	r1, [pc, #124]	; (80070d4 <vTaskSwitchContext+0xb0>)
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	440b      	add	r3, r1
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d10a      	bne.n	8007080 <vTaskSwitchContext+0x5c>
	__asm volatile
 800706a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800706e:	f383 8811 	msr	BASEPRI, r3
 8007072:	f3bf 8f6f 	isb	sy
 8007076:	f3bf 8f4f 	dsb	sy
 800707a:	607b      	str	r3, [r7, #4]
}
 800707c:	bf00      	nop
 800707e:	e7fe      	b.n	800707e <vTaskSwitchContext+0x5a>
 8007080:	697a      	ldr	r2, [r7, #20]
 8007082:	4613      	mov	r3, r2
 8007084:	009b      	lsls	r3, r3, #2
 8007086:	4413      	add	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4a12      	ldr	r2, [pc, #72]	; (80070d4 <vTaskSwitchContext+0xb0>)
 800708c:	4413      	add	r3, r2
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	685b      	ldr	r3, [r3, #4]
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	605a      	str	r2, [r3, #4]
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	3308      	adds	r3, #8
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d104      	bne.n	80070b0 <vTaskSwitchContext+0x8c>
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	605a      	str	r2, [r3, #4]
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	4a08      	ldr	r2, [pc, #32]	; (80070d8 <vTaskSwitchContext+0xb4>)
 80070b8:	6013      	str	r3, [r2, #0]
}
 80070ba:	bf00      	nop
 80070bc:	371c      	adds	r7, #28
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	20000864 	.word	0x20000864
 80070cc:	20000850 	.word	0x20000850
 80070d0:	20000844 	.word	0x20000844
 80070d4:	20000740 	.word	0x20000740
 80070d8:	2000073c 	.word	0x2000073c

080070dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10a      	bne.n	8007102 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80070ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f0:	f383 8811 	msr	BASEPRI, r3
 80070f4:	f3bf 8f6f 	isb	sy
 80070f8:	f3bf 8f4f 	dsb	sy
 80070fc:	60fb      	str	r3, [r7, #12]
}
 80070fe:	bf00      	nop
 8007100:	e7fe      	b.n	8007100 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007102:	4b07      	ldr	r3, [pc, #28]	; (8007120 <vTaskPlaceOnEventList+0x44>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3318      	adds	r3, #24
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fe fcf4 	bl	8005af8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007110:	2101      	movs	r1, #1
 8007112:	6838      	ldr	r0, [r7, #0]
 8007114:	f000 fc60 	bl	80079d8 <prvAddCurrentTaskToDelayedList>
}
 8007118:	bf00      	nop
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	2000073c 	.word	0x2000073c

08007124 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d10a      	bne.n	800714c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713a:	f383 8811 	msr	BASEPRI, r3
 800713e:	f3bf 8f6f 	isb	sy
 8007142:	f3bf 8f4f 	dsb	sy
 8007146:	617b      	str	r3, [r7, #20]
}
 8007148:	bf00      	nop
 800714a:	e7fe      	b.n	800714a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800714c:	4b11      	ldr	r3, [pc, #68]	; (8007194 <vTaskPlaceOnUnorderedEventList+0x70>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10a      	bne.n	800716a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007158:	f383 8811 	msr	BASEPRI, r3
 800715c:	f3bf 8f6f 	isb	sy
 8007160:	f3bf 8f4f 	dsb	sy
 8007164:	613b      	str	r3, [r7, #16]
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <vTaskPlaceOnUnorderedEventList+0x74>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	68ba      	ldr	r2, [r7, #8]
 8007170:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007174:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007176:	4b08      	ldr	r3, [pc, #32]	; (8007198 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	3318      	adds	r3, #24
 800717c:	4619      	mov	r1, r3
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f7fe fc96 	bl	8005ab0 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007184:	2101      	movs	r1, #1
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fc26 	bl	80079d8 <prvAddCurrentTaskToDelayedList>
}
 800718c:	bf00      	nop
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}
 8007194:	20000864 	.word	0x20000864
 8007198:	2000073c 	.word	0x2000073c

0800719c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800719c:	b580      	push	{r7, lr}
 800719e:	b086      	sub	sp, #24
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	617b      	str	r3, [r7, #20]
}
 80071c0:	bf00      	nop
 80071c2:	e7fe      	b.n	80071c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071c4:	4b0a      	ldr	r3, [pc, #40]	; (80071f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3318      	adds	r3, #24
 80071ca:	4619      	mov	r1, r3
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f7fe fc6f 	bl	8005ab0 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80071d8:	f04f 33ff 	mov.w	r3, #4294967295
 80071dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071de:	6879      	ldr	r1, [r7, #4]
 80071e0:	68b8      	ldr	r0, [r7, #8]
 80071e2:	f000 fbf9 	bl	80079d8 <prvAddCurrentTaskToDelayedList>
	}
 80071e6:	bf00      	nop
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	2000073c 	.word	0x2000073c

080071f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	68db      	ldr	r3, [r3, #12]
 8007202:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d10a      	bne.n	8007220 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800720a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800720e:	f383 8811 	msr	BASEPRI, r3
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	f3bf 8f4f 	dsb	sy
 800721a:	60fb      	str	r3, [r7, #12]
}
 800721c:	bf00      	nop
 800721e:	e7fe      	b.n	800721e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	3318      	adds	r3, #24
 8007224:	4618      	mov	r0, r3
 8007226:	f7fe fca0 	bl	8005b6a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800722a:	4b1d      	ldr	r3, [pc, #116]	; (80072a0 <xTaskRemoveFromEventList+0xac>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d11c      	bne.n	800726c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	3304      	adds	r3, #4
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fc97 	bl	8005b6a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	2201      	movs	r2, #1
 8007242:	409a      	lsls	r2, r3
 8007244:	4b17      	ldr	r3, [pc, #92]	; (80072a4 <xTaskRemoveFromEventList+0xb0>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4313      	orrs	r3, r2
 800724a:	4a16      	ldr	r2, [pc, #88]	; (80072a4 <xTaskRemoveFromEventList+0xb0>)
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4a13      	ldr	r2, [pc, #76]	; (80072a8 <xTaskRemoveFromEventList+0xb4>)
 800725c:	441a      	add	r2, r3
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	3304      	adds	r3, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7fe fc23 	bl	8005ab0 <vListInsertEnd>
 800726a:	e005      	b.n	8007278 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	3318      	adds	r3, #24
 8007270:	4619      	mov	r1, r3
 8007272:	480e      	ldr	r0, [pc, #56]	; (80072ac <xTaskRemoveFromEventList+0xb8>)
 8007274:	f7fe fc1c 	bl	8005ab0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800727c:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <xTaskRemoveFromEventList+0xbc>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007282:	429a      	cmp	r2, r3
 8007284:	d905      	bls.n	8007292 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007286:	2301      	movs	r3, #1
 8007288:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800728a:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <xTaskRemoveFromEventList+0xc0>)
 800728c:	2201      	movs	r2, #1
 800728e:	601a      	str	r2, [r3, #0]
 8007290:	e001      	b.n	8007296 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007292:	2300      	movs	r3, #0
 8007294:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007296:	697b      	ldr	r3, [r7, #20]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3718      	adds	r7, #24
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	20000864 	.word	0x20000864
 80072a4:	20000844 	.word	0x20000844
 80072a8:	20000740 	.word	0x20000740
 80072ac:	200007fc 	.word	0x200007fc
 80072b0:	2000073c 	.word	0x2000073c
 80072b4:	20000850 	.word	0x20000850

080072b8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80072c2:	4b29      	ldr	r3, [pc, #164]	; (8007368 <vTaskRemoveFromUnorderedEventList+0xb0>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10a      	bne.n	80072e0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	613b      	str	r3, [r7, #16]
}
 80072dc:	bf00      	nop
 80072de:	e7fe      	b.n	80072de <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	68db      	ldr	r3, [r3, #12]
 80072ee:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d10a      	bne.n	800730c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	60fb      	str	r3, [r7, #12]
}
 8007308:	bf00      	nop
 800730a:	e7fe      	b.n	800730a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7fe fc2c 	bl	8005b6a <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	3304      	adds	r3, #4
 8007316:	4618      	mov	r0, r3
 8007318:	f7fe fc27 	bl	8005b6a <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007320:	2201      	movs	r2, #1
 8007322:	409a      	lsls	r2, r3
 8007324:	4b11      	ldr	r3, [pc, #68]	; (800736c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4313      	orrs	r3, r2
 800732a:	4a10      	ldr	r2, [pc, #64]	; (800736c <vTaskRemoveFromUnorderedEventList+0xb4>)
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007332:	4613      	mov	r3, r2
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	4413      	add	r3, r2
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4a0d      	ldr	r2, [pc, #52]	; (8007370 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800733c:	441a      	add	r2, r3
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	3304      	adds	r3, #4
 8007342:	4619      	mov	r1, r3
 8007344:	4610      	mov	r0, r2
 8007346:	f7fe fbb3 	bl	8005ab0 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800734e:	4b09      	ldr	r3, [pc, #36]	; (8007374 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007354:	429a      	cmp	r2, r3
 8007356:	d902      	bls.n	800735e <vTaskRemoveFromUnorderedEventList+0xa6>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007358:	4b07      	ldr	r3, [pc, #28]	; (8007378 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800735a:	2201      	movs	r2, #1
 800735c:	601a      	str	r2, [r3, #0]
	}
}
 800735e:	bf00      	nop
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000864 	.word	0x20000864
 800736c:	20000844 	.word	0x20000844
 8007370:	20000740 	.word	0x20000740
 8007374:	2000073c 	.word	0x2000073c
 8007378:	20000850 	.word	0x20000850

0800737c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <vTaskInternalSetTimeOutState+0x24>)
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800738c:	4b05      	ldr	r3, [pc, #20]	; (80073a4 <vTaskInternalSetTimeOutState+0x28>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	605a      	str	r2, [r3, #4]
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr
 80073a0:	20000854 	.word	0x20000854
 80073a4:	20000840 	.word	0x20000840

080073a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b088      	sub	sp, #32
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d10a      	bne.n	80073ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073bc:	f383 8811 	msr	BASEPRI, r3
 80073c0:	f3bf 8f6f 	isb	sy
 80073c4:	f3bf 8f4f 	dsb	sy
 80073c8:	613b      	str	r3, [r7, #16]
}
 80073ca:	bf00      	nop
 80073cc:	e7fe      	b.n	80073cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d10a      	bne.n	80073ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60fb      	str	r3, [r7, #12]
}
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80073ea:	f001 f873 	bl	80084d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073ee:	4b1d      	ldr	r3, [pc, #116]	; (8007464 <xTaskCheckForTimeOut+0xbc>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	69ba      	ldr	r2, [r7, #24]
 80073fa:	1ad3      	subs	r3, r2, r3
 80073fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007406:	d102      	bne.n	800740e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007408:	2300      	movs	r3, #0
 800740a:	61fb      	str	r3, [r7, #28]
 800740c:	e023      	b.n	8007456 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	4b15      	ldr	r3, [pc, #84]	; (8007468 <xTaskCheckForTimeOut+0xc0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	429a      	cmp	r2, r3
 8007418:	d007      	beq.n	800742a <xTaskCheckForTimeOut+0x82>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	429a      	cmp	r2, r3
 8007422:	d302      	bcc.n	800742a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007424:	2301      	movs	r3, #1
 8007426:	61fb      	str	r3, [r7, #28]
 8007428:	e015      	b.n	8007456 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	697a      	ldr	r2, [r7, #20]
 8007430:	429a      	cmp	r2, r3
 8007432:	d20b      	bcs.n	800744c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	1ad2      	subs	r2, r2, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff ff9b 	bl	800737c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007446:	2300      	movs	r3, #0
 8007448:	61fb      	str	r3, [r7, #28]
 800744a:	e004      	b.n	8007456 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	2200      	movs	r2, #0
 8007450:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007452:	2301      	movs	r3, #1
 8007454:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007456:	f001 f86d 	bl	8008534 <vPortExitCritical>

	return xReturn;
 800745a:	69fb      	ldr	r3, [r7, #28]
}
 800745c:	4618      	mov	r0, r3
 800745e:	3720      	adds	r7, #32
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	20000840 	.word	0x20000840
 8007468:	20000854 	.word	0x20000854

0800746c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007470:	4b03      	ldr	r3, [pc, #12]	; (8007480 <vTaskMissedYield+0x14>)
 8007472:	2201      	movs	r2, #1
 8007474:	601a      	str	r2, [r3, #0]
}
 8007476:	bf00      	nop
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr
 8007480:	20000850 	.word	0x20000850

08007484 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800748c:	f000 f852 	bl	8007534 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007490:	4b06      	ldr	r3, [pc, #24]	; (80074ac <prvIdleTask+0x28>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2b01      	cmp	r3, #1
 8007496:	d9f9      	bls.n	800748c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007498:	4b05      	ldr	r3, [pc, #20]	; (80074b0 <prvIdleTask+0x2c>)
 800749a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800749e:	601a      	str	r2, [r3, #0]
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074a8:	e7f0      	b.n	800748c <prvIdleTask+0x8>
 80074aa:	bf00      	nop
 80074ac:	20000740 	.word	0x20000740
 80074b0:	e000ed04 	.word	0xe000ed04

080074b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074ba:	2300      	movs	r3, #0
 80074bc:	607b      	str	r3, [r7, #4]
 80074be:	e00c      	b.n	80074da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	4613      	mov	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4a12      	ldr	r2, [pc, #72]	; (8007514 <prvInitialiseTaskLists+0x60>)
 80074cc:	4413      	add	r3, r2
 80074ce:	4618      	mov	r0, r3
 80074d0:	f7fe fac1 	bl	8005a56 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3301      	adds	r3, #1
 80074d8:	607b      	str	r3, [r7, #4]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2b06      	cmp	r3, #6
 80074de:	d9ef      	bls.n	80074c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074e0:	480d      	ldr	r0, [pc, #52]	; (8007518 <prvInitialiseTaskLists+0x64>)
 80074e2:	f7fe fab8 	bl	8005a56 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074e6:	480d      	ldr	r0, [pc, #52]	; (800751c <prvInitialiseTaskLists+0x68>)
 80074e8:	f7fe fab5 	bl	8005a56 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074ec:	480c      	ldr	r0, [pc, #48]	; (8007520 <prvInitialiseTaskLists+0x6c>)
 80074ee:	f7fe fab2 	bl	8005a56 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074f2:	480c      	ldr	r0, [pc, #48]	; (8007524 <prvInitialiseTaskLists+0x70>)
 80074f4:	f7fe faaf 	bl	8005a56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80074f8:	480b      	ldr	r0, [pc, #44]	; (8007528 <prvInitialiseTaskLists+0x74>)
 80074fa:	f7fe faac 	bl	8005a56 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80074fe:	4b0b      	ldr	r3, [pc, #44]	; (800752c <prvInitialiseTaskLists+0x78>)
 8007500:	4a05      	ldr	r2, [pc, #20]	; (8007518 <prvInitialiseTaskLists+0x64>)
 8007502:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <prvInitialiseTaskLists+0x7c>)
 8007506:	4a05      	ldr	r2, [pc, #20]	; (800751c <prvInitialiseTaskLists+0x68>)
 8007508:	601a      	str	r2, [r3, #0]
}
 800750a:	bf00      	nop
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	20000740 	.word	0x20000740
 8007518:	200007cc 	.word	0x200007cc
 800751c:	200007e0 	.word	0x200007e0
 8007520:	200007fc 	.word	0x200007fc
 8007524:	20000810 	.word	0x20000810
 8007528:	20000828 	.word	0x20000828
 800752c:	200007f4 	.word	0x200007f4
 8007530:	200007f8 	.word	0x200007f8

08007534 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800753a:	e019      	b.n	8007570 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800753c:	f000 ffca 	bl	80084d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007540:	4b10      	ldr	r3, [pc, #64]	; (8007584 <prvCheckTasksWaitingTermination+0x50>)
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3304      	adds	r3, #4
 800754c:	4618      	mov	r0, r3
 800754e:	f7fe fb0c 	bl	8005b6a <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007552:	4b0d      	ldr	r3, [pc, #52]	; (8007588 <prvCheckTasksWaitingTermination+0x54>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	3b01      	subs	r3, #1
 8007558:	4a0b      	ldr	r2, [pc, #44]	; (8007588 <prvCheckTasksWaitingTermination+0x54>)
 800755a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800755c:	4b0b      	ldr	r3, [pc, #44]	; (800758c <prvCheckTasksWaitingTermination+0x58>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3b01      	subs	r3, #1
 8007562:	4a0a      	ldr	r2, [pc, #40]	; (800758c <prvCheckTasksWaitingTermination+0x58>)
 8007564:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007566:	f000 ffe5 	bl	8008534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f810 	bl	8007590 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007570:	4b06      	ldr	r3, [pc, #24]	; (800758c <prvCheckTasksWaitingTermination+0x58>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d1e1      	bne.n	800753c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007578:	bf00      	nop
 800757a:	bf00      	nop
 800757c:	3708      	adds	r7, #8
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20000810 	.word	0x20000810
 8007588:	2000083c 	.word	0x2000083c
 800758c:	20000824 	.word	0x20000824

08007590 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007590:	b580      	push	{r7, lr}
 8007592:	b084      	sub	sp, #16
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d108      	bne.n	80075b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a6:	4618      	mov	r0, r3
 80075a8:	f001 f982 	bl	80088b0 <vPortFree>
				vPortFree( pxTCB );
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f001 f97f 	bl	80088b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075b2:	e018      	b.n	80075e6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075ba:	2b01      	cmp	r3, #1
 80075bc:	d103      	bne.n	80075c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f001 f976 	bl	80088b0 <vPortFree>
	}
 80075c4:	e00f      	b.n	80075e6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d00a      	beq.n	80075e6 <prvDeleteTCB+0x56>
	__asm volatile
 80075d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d4:	f383 8811 	msr	BASEPRI, r3
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	60fb      	str	r3, [r7, #12]
}
 80075e2:	bf00      	nop
 80075e4:	e7fe      	b.n	80075e4 <prvDeleteTCB+0x54>
	}
 80075e6:	bf00      	nop
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80075f6:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <prvResetNextTaskUnblockTime+0x38>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d104      	bne.n	800760a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007600:	4b0a      	ldr	r3, [pc, #40]	; (800762c <prvResetNextTaskUnblockTime+0x3c>)
 8007602:	f04f 32ff 	mov.w	r2, #4294967295
 8007606:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007608:	e008      	b.n	800761c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800760a:	4b07      	ldr	r3, [pc, #28]	; (8007628 <prvResetNextTaskUnblockTime+0x38>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	4a04      	ldr	r2, [pc, #16]	; (800762c <prvResetNextTaskUnblockTime+0x3c>)
 800761a:	6013      	str	r3, [r2, #0]
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	200007f4 	.word	0x200007f4
 800762c:	2000085c 	.word	0x2000085c

08007630 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007636:	4b0b      	ldr	r3, [pc, #44]	; (8007664 <xTaskGetSchedulerState+0x34>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d102      	bne.n	8007644 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800763e:	2301      	movs	r3, #1
 8007640:	607b      	str	r3, [r7, #4]
 8007642:	e008      	b.n	8007656 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007644:	4b08      	ldr	r3, [pc, #32]	; (8007668 <xTaskGetSchedulerState+0x38>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d102      	bne.n	8007652 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800764c:	2302      	movs	r3, #2
 800764e:	607b      	str	r3, [r7, #4]
 8007650:	e001      	b.n	8007656 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007652:	2300      	movs	r3, #0
 8007654:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007656:	687b      	ldr	r3, [r7, #4]
	}
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	20000848 	.word	0x20000848
 8007668:	20000864 	.word	0x20000864

0800766c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800766c:	b580      	push	{r7, lr}
 800766e:	b084      	sub	sp, #16
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d05e      	beq.n	8007740 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007686:	4b31      	ldr	r3, [pc, #196]	; (800774c <xTaskPriorityInherit+0xe0>)
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768c:	429a      	cmp	r2, r3
 800768e:	d24e      	bcs.n	800772e <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	2b00      	cmp	r3, #0
 8007696:	db06      	blt.n	80076a6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007698:	4b2c      	ldr	r3, [pc, #176]	; (800774c <xTaskPriorityInherit+0xe0>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769e:	f1c3 0207 	rsb	r2, r3, #7
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	6959      	ldr	r1, [r3, #20]
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4a26      	ldr	r2, [pc, #152]	; (8007750 <xTaskPriorityInherit+0xe4>)
 80076b8:	4413      	add	r3, r2
 80076ba:	4299      	cmp	r1, r3
 80076bc:	d12f      	bne.n	800771e <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	3304      	adds	r3, #4
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7fe fa51 	bl	8005b6a <uxListRemove>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10a      	bne.n	80076e4 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	2201      	movs	r2, #1
 80076d4:	fa02 f303 	lsl.w	r3, r2, r3
 80076d8:	43da      	mvns	r2, r3
 80076da:	4b1e      	ldr	r3, [pc, #120]	; (8007754 <xTaskPriorityInherit+0xe8>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4013      	ands	r3, r2
 80076e0:	4a1c      	ldr	r2, [pc, #112]	; (8007754 <xTaskPriorityInherit+0xe8>)
 80076e2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80076e4:	4b19      	ldr	r3, [pc, #100]	; (800774c <xTaskPriorityInherit+0xe0>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f2:	2201      	movs	r2, #1
 80076f4:	409a      	lsls	r2, r3
 80076f6:	4b17      	ldr	r3, [pc, #92]	; (8007754 <xTaskPriorityInherit+0xe8>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	4a15      	ldr	r2, [pc, #84]	; (8007754 <xTaskPriorityInherit+0xe8>)
 80076fe:	6013      	str	r3, [r2, #0]
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007704:	4613      	mov	r3, r2
 8007706:	009b      	lsls	r3, r3, #2
 8007708:	4413      	add	r3, r2
 800770a:	009b      	lsls	r3, r3, #2
 800770c:	4a10      	ldr	r2, [pc, #64]	; (8007750 <xTaskPriorityInherit+0xe4>)
 800770e:	441a      	add	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	3304      	adds	r3, #4
 8007714:	4619      	mov	r1, r3
 8007716:	4610      	mov	r0, r2
 8007718:	f7fe f9ca 	bl	8005ab0 <vListInsertEnd>
 800771c:	e004      	b.n	8007728 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800771e:	4b0b      	ldr	r3, [pc, #44]	; (800774c <xTaskPriorityInherit+0xe0>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007728:	2301      	movs	r3, #1
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	e008      	b.n	8007740 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007732:	4b06      	ldr	r3, [pc, #24]	; (800774c <xTaskPriorityInherit+0xe0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	429a      	cmp	r2, r3
 800773a:	d201      	bcs.n	8007740 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800773c:	2301      	movs	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007740:	68fb      	ldr	r3, [r7, #12]
	}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	2000073c 	.word	0x2000073c
 8007750:	20000740 	.word	0x20000740
 8007754:	20000844 	.word	0x20000844

08007758 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d06e      	beq.n	800784c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800776e:	4b3a      	ldr	r3, [pc, #232]	; (8007858 <xTaskPriorityDisinherit+0x100>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	693a      	ldr	r2, [r7, #16]
 8007774:	429a      	cmp	r2, r3
 8007776:	d00a      	beq.n	800778e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800777c:	f383 8811 	msr	BASEPRI, r3
 8007780:	f3bf 8f6f 	isb	sy
 8007784:	f3bf 8f4f 	dsb	sy
 8007788:	60fb      	str	r3, [r7, #12]
}
 800778a:	bf00      	nop
 800778c:	e7fe      	b.n	800778c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10a      	bne.n	80077ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779a:	f383 8811 	msr	BASEPRI, r3
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f3bf 8f4f 	dsb	sy
 80077a6:	60bb      	str	r3, [r7, #8]
}
 80077a8:	bf00      	nop
 80077aa:	e7fe      	b.n	80077aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b0:	1e5a      	subs	r2, r3, #1
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077be:	429a      	cmp	r2, r3
 80077c0:	d044      	beq.n	800784c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d140      	bne.n	800784c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe f9cb 	bl	8005b6a <uxListRemove>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d115      	bne.n	8007806 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80077da:	693b      	ldr	r3, [r7, #16]
 80077dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077de:	491f      	ldr	r1, [pc, #124]	; (800785c <xTaskPriorityDisinherit+0x104>)
 80077e0:	4613      	mov	r3, r2
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	009b      	lsls	r3, r3, #2
 80077e8:	440b      	add	r3, r1
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10a      	bne.n	8007806 <xTaskPriorityDisinherit+0xae>
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	2201      	movs	r2, #1
 80077f6:	fa02 f303 	lsl.w	r3, r2, r3
 80077fa:	43da      	mvns	r2, r3
 80077fc:	4b18      	ldr	r3, [pc, #96]	; (8007860 <xTaskPriorityDisinherit+0x108>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4013      	ands	r3, r2
 8007802:	4a17      	ldr	r2, [pc, #92]	; (8007860 <xTaskPriorityDisinherit+0x108>)
 8007804:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007812:	f1c3 0207 	rsb	r2, r3, #7
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800781e:	2201      	movs	r2, #1
 8007820:	409a      	lsls	r2, r3
 8007822:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <xTaskPriorityDisinherit+0x108>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4313      	orrs	r3, r2
 8007828:	4a0d      	ldr	r2, [pc, #52]	; (8007860 <xTaskPriorityDisinherit+0x108>)
 800782a:	6013      	str	r3, [r2, #0]
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4a08      	ldr	r2, [pc, #32]	; (800785c <xTaskPriorityDisinherit+0x104>)
 800783a:	441a      	add	r2, r3
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	3304      	adds	r3, #4
 8007840:	4619      	mov	r1, r3
 8007842:	4610      	mov	r0, r2
 8007844:	f7fe f934 	bl	8005ab0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007848:	2301      	movs	r3, #1
 800784a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800784c:	697b      	ldr	r3, [r7, #20]
	}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	2000073c 	.word	0x2000073c
 800785c:	20000740 	.word	0x20000740
 8007860:	20000844 	.word	0x20000844

08007864 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007864:	b580      	push	{r7, lr}
 8007866:	b088      	sub	sp, #32
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007872:	2301      	movs	r3, #1
 8007874:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d077      	beq.n	800796c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	60fb      	str	r3, [r7, #12]
}
 8007896:	bf00      	nop
 8007898:	e7fe      	b.n	8007898 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789e:	683a      	ldr	r2, [r7, #0]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d902      	bls.n	80078aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	61fb      	str	r3, [r7, #28]
 80078a8:	e002      	b.n	80078b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	69fa      	ldr	r2, [r7, #28]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d058      	beq.n	800796c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078be:	697a      	ldr	r2, [r7, #20]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d153      	bne.n	800796c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078c4:	4b2b      	ldr	r3, [pc, #172]	; (8007974 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d10a      	bne.n	80078e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	60bb      	str	r3, [r7, #8]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078e4:	69bb      	ldr	r3, [r7, #24]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	699b      	ldr	r3, [r3, #24]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	db04      	blt.n	8007902 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	f1c3 0207 	rsb	r2, r3, #7
 80078fe:	69bb      	ldr	r3, [r7, #24]
 8007900:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	6959      	ldr	r1, [r3, #20]
 8007906:	693a      	ldr	r2, [r7, #16]
 8007908:	4613      	mov	r3, r2
 800790a:	009b      	lsls	r3, r3, #2
 800790c:	4413      	add	r3, r2
 800790e:	009b      	lsls	r3, r3, #2
 8007910:	4a19      	ldr	r2, [pc, #100]	; (8007978 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8007912:	4413      	add	r3, r2
 8007914:	4299      	cmp	r1, r3
 8007916:	d129      	bne.n	800796c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	3304      	adds	r3, #4
 800791c:	4618      	mov	r0, r3
 800791e:	f7fe f924 	bl	8005b6a <uxListRemove>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10a      	bne.n	800793e <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800792c:	2201      	movs	r2, #1
 800792e:	fa02 f303 	lsl.w	r3, r2, r3
 8007932:	43da      	mvns	r2, r3
 8007934:	4b11      	ldr	r3, [pc, #68]	; (800797c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4013      	ands	r3, r2
 800793a:	4a10      	ldr	r2, [pc, #64]	; (800797c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800793c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007942:	2201      	movs	r2, #1
 8007944:	409a      	lsls	r2, r3
 8007946:	4b0d      	ldr	r3, [pc, #52]	; (800797c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4313      	orrs	r3, r2
 800794c:	4a0b      	ldr	r2, [pc, #44]	; (800797c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	69bb      	ldr	r3, [r7, #24]
 8007952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007954:	4613      	mov	r3, r2
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	4a06      	ldr	r2, [pc, #24]	; (8007978 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800795e:	441a      	add	r2, r3
 8007960:	69bb      	ldr	r3, [r7, #24]
 8007962:	3304      	adds	r3, #4
 8007964:	4619      	mov	r1, r3
 8007966:	4610      	mov	r0, r2
 8007968:	f7fe f8a2 	bl	8005ab0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800796c:	bf00      	nop
 800796e:	3720      	adds	r7, #32
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	2000073c 	.word	0x2000073c
 8007978:	20000740 	.word	0x20000740
 800797c:	20000844 	.word	0x20000844

08007980 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007986:	4b09      	ldr	r3, [pc, #36]	; (80079ac <uxTaskResetEventItemValue+0x2c>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800798e:	4b07      	ldr	r3, [pc, #28]	; (80079ac <uxTaskResetEventItemValue+0x2c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007994:	4b05      	ldr	r3, [pc, #20]	; (80079ac <uxTaskResetEventItemValue+0x2c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f1c2 0207 	rsb	r2, r2, #7
 800799c:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800799e:	687b      	ldr	r3, [r7, #4]
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr
 80079ac:	2000073c 	.word	0x2000073c

080079b0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80079b0:	b480      	push	{r7}
 80079b2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80079b4:	4b07      	ldr	r3, [pc, #28]	; (80079d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d004      	beq.n	80079c6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80079bc:	4b05      	ldr	r3, [pc, #20]	; (80079d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079c2:	3201      	adds	r2, #1
 80079c4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80079c6:	4b03      	ldr	r3, [pc, #12]	; (80079d4 <pvTaskIncrementMutexHeldCount+0x24>)
 80079c8:	681b      	ldr	r3, [r3, #0]
	}
 80079ca:	4618      	mov	r0, r3
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr
 80079d4:	2000073c 	.word	0x2000073c

080079d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079e2:	4b29      	ldr	r3, [pc, #164]	; (8007a88 <prvAddCurrentTaskToDelayedList+0xb0>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079e8:	4b28      	ldr	r3, [pc, #160]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3304      	adds	r3, #4
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fe f8bb 	bl	8005b6a <uxListRemove>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d10b      	bne.n	8007a12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80079fa:	4b24      	ldr	r3, [pc, #144]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a00:	2201      	movs	r2, #1
 8007a02:	fa02 f303 	lsl.w	r3, r2, r3
 8007a06:	43da      	mvns	r2, r3
 8007a08:	4b21      	ldr	r3, [pc, #132]	; (8007a90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	4a20      	ldr	r2, [pc, #128]	; (8007a90 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a18:	d10a      	bne.n	8007a30 <prvAddCurrentTaskToDelayedList+0x58>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d007      	beq.n	8007a30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a20:	4b1a      	ldr	r3, [pc, #104]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	3304      	adds	r3, #4
 8007a26:	4619      	mov	r1, r3
 8007a28:	481a      	ldr	r0, [pc, #104]	; (8007a94 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a2a:	f7fe f841 	bl	8005ab0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a2e:	e026      	b.n	8007a7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4413      	add	r3, r2
 8007a36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a38:	4b14      	ldr	r3, [pc, #80]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d209      	bcs.n	8007a5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a48:	4b13      	ldr	r3, [pc, #76]	; (8007a98 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	4b0f      	ldr	r3, [pc, #60]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3304      	adds	r3, #4
 8007a52:	4619      	mov	r1, r3
 8007a54:	4610      	mov	r0, r2
 8007a56:	f7fe f84f 	bl	8005af8 <vListInsert>
}
 8007a5a:	e010      	b.n	8007a7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a5c:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <prvAddCurrentTaskToDelayedList+0xc4>)
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	3304      	adds	r3, #4
 8007a66:	4619      	mov	r1, r3
 8007a68:	4610      	mov	r0, r2
 8007a6a:	f7fe f845 	bl	8005af8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a6e:	4b0c      	ldr	r3, [pc, #48]	; (8007aa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d202      	bcs.n	8007a7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007a78:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	6013      	str	r3, [r2, #0]
}
 8007a7e:	bf00      	nop
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20000840 	.word	0x20000840
 8007a8c:	2000073c 	.word	0x2000073c
 8007a90:	20000844 	.word	0x20000844
 8007a94:	20000828 	.word	0x20000828
 8007a98:	200007f8 	.word	0x200007f8
 8007a9c:	200007f4 	.word	0x200007f4
 8007aa0:	2000085c 	.word	0x2000085c

08007aa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b08a      	sub	sp, #40	; 0x28
 8007aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007aae:	f000 fba1 	bl	80081f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ab2:	4b1c      	ldr	r3, [pc, #112]	; (8007b24 <xTimerCreateTimerTask+0x80>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d021      	beq.n	8007afe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ac2:	1d3a      	adds	r2, r7, #4
 8007ac4:	f107 0108 	add.w	r1, r7, #8
 8007ac8:	f107 030c 	add.w	r3, r7, #12
 8007acc:	4618      	mov	r0, r3
 8007ace:	f7f8 fd6d 	bl	80005ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	68fa      	ldr	r2, [r7, #12]
 8007ad8:	9202      	str	r2, [sp, #8]
 8007ada:	9301      	str	r3, [sp, #4]
 8007adc:	2302      	movs	r3, #2
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	460a      	mov	r2, r1
 8007ae4:	4910      	ldr	r1, [pc, #64]	; (8007b28 <xTimerCreateTimerTask+0x84>)
 8007ae6:	4811      	ldr	r0, [pc, #68]	; (8007b2c <xTimerCreateTimerTask+0x88>)
 8007ae8:	f7fe fefc 	bl	80068e4 <xTaskCreateStatic>
 8007aec:	4603      	mov	r3, r0
 8007aee:	4a10      	ldr	r2, [pc, #64]	; (8007b30 <xTimerCreateTimerTask+0x8c>)
 8007af0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007af2:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <xTimerCreateTimerTask+0x8c>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d001      	beq.n	8007afe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007afa:	2301      	movs	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d10a      	bne.n	8007b1a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	613b      	str	r3, [r7, #16]
}
 8007b16:	bf00      	nop
 8007b18:	e7fe      	b.n	8007b18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007b1a:	697b      	ldr	r3, [r7, #20]
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3718      	adds	r7, #24
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20000898 	.word	0x20000898
 8007b28:	080095d4 	.word	0x080095d4
 8007b2c:	08007d9d 	.word	0x08007d9d
 8007b30:	2000089c 	.word	0x2000089c

08007b34 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af02      	add	r7, sp, #8
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007b42:	2028      	movs	r0, #40	; 0x28
 8007b44:	f000 fde8 	bl	8008718 <pvPortMalloc>
 8007b48:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00d      	beq.n	8007b6c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	9301      	str	r3, [sp, #4]
 8007b5c:	6a3b      	ldr	r3, [r7, #32]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	68b9      	ldr	r1, [r7, #8]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	f000 f843 	bl	8007bf2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007b6c:	697b      	ldr	r3, [r7, #20]
	}
 8007b6e:	4618      	mov	r0, r3
 8007b70:	3718      	adds	r7, #24
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b08a      	sub	sp, #40	; 0x28
 8007b7a:	af02      	add	r7, sp, #8
 8007b7c:	60f8      	str	r0, [r7, #12]
 8007b7e:	60b9      	str	r1, [r7, #8]
 8007b80:	607a      	str	r2, [r7, #4]
 8007b82:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007b84:	2328      	movs	r3, #40	; 0x28
 8007b86:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	2b28      	cmp	r3, #40	; 0x28
 8007b8c:	d00a      	beq.n	8007ba4 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	f383 8811 	msr	BASEPRI, r3
 8007b96:	f3bf 8f6f 	isb	sy
 8007b9a:	f3bf 8f4f 	dsb	sy
 8007b9e:	61bb      	str	r3, [r7, #24]
}
 8007ba0:	bf00      	nop
 8007ba2:	e7fe      	b.n	8007ba2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007ba4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xTimerCreateStatic+0x4c>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	617b      	str	r3, [r7, #20]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007bc6:	69fb      	ldr	r3, [r7, #28]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00d      	beq.n	8007be8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007bcc:	69fb      	ldr	r3, [r7, #28]
 8007bce:	2202      	movs	r2, #2
 8007bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	9301      	str	r3, [sp, #4]
 8007bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bda:	9300      	str	r3, [sp, #0]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	687a      	ldr	r2, [r7, #4]
 8007be0:	68b9      	ldr	r1, [r7, #8]
 8007be2:	68f8      	ldr	r0, [r7, #12]
 8007be4:	f000 f805 	bl	8007bf2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007be8:	69fb      	ldr	r3, [r7, #28]
	}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3720      	adds	r7, #32
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}

08007bf2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007bf2:	b580      	push	{r7, lr}
 8007bf4:	b086      	sub	sp, #24
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	60f8      	str	r0, [r7, #12]
 8007bfa:	60b9      	str	r1, [r7, #8]
 8007bfc:	607a      	str	r2, [r7, #4]
 8007bfe:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	617b      	str	r3, [r7, #20]
}
 8007c18:	bf00      	nop
 8007c1a:	e7fe      	b.n	8007c1a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d01e      	beq.n	8007c60 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007c22:	f000 fae7 	bl	80081f4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c2e:	68ba      	ldr	r2, [r7, #8]
 8007c30:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c34:	683a      	ldr	r2, [r7, #0]
 8007c36:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	6a3a      	ldr	r2, [r7, #32]
 8007c3c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	3304      	adds	r3, #4
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fd ff27 	bl	8005a96 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d008      	beq.n	8007c60 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c50:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c54:	f043 0304 	orr.w	r3, r3, #4
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007c60:	bf00      	nop
 8007c62:	3718      	adds	r7, #24
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b08a      	sub	sp, #40	; 0x28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	60f8      	str	r0, [r7, #12]
 8007c70:	60b9      	str	r1, [r7, #8]
 8007c72:	607a      	str	r2, [r7, #4]
 8007c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c76:	2300      	movs	r3, #0
 8007c78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10a      	bne.n	8007c96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	623b      	str	r3, [r7, #32]
}
 8007c92:	bf00      	nop
 8007c94:	e7fe      	b.n	8007c94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c96:	4b1a      	ldr	r3, [pc, #104]	; (8007d00 <xTimerGenericCommand+0x98>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d02a      	beq.n	8007cf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	2b05      	cmp	r3, #5
 8007cae:	dc18      	bgt.n	8007ce2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cb0:	f7ff fcbe 	bl	8007630 <xTaskGetSchedulerState>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b02      	cmp	r3, #2
 8007cb8:	d109      	bne.n	8007cce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <xTimerGenericCommand+0x98>)
 8007cbc:	6818      	ldr	r0, [r3, #0]
 8007cbe:	f107 0110 	add.w	r1, r7, #16
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007cc6:	f7fe f901 	bl	8005ecc <xQueueGenericSend>
 8007cca:	6278      	str	r0, [r7, #36]	; 0x24
 8007ccc:	e012      	b.n	8007cf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cce:	4b0c      	ldr	r3, [pc, #48]	; (8007d00 <xTimerGenericCommand+0x98>)
 8007cd0:	6818      	ldr	r0, [r3, #0]
 8007cd2:	f107 0110 	add.w	r1, r7, #16
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f7fe f8f7 	bl	8005ecc <xQueueGenericSend>
 8007cde:	6278      	str	r0, [r7, #36]	; 0x24
 8007ce0:	e008      	b.n	8007cf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ce2:	4b07      	ldr	r3, [pc, #28]	; (8007d00 <xTimerGenericCommand+0x98>)
 8007ce4:	6818      	ldr	r0, [r3, #0]
 8007ce6:	f107 0110 	add.w	r1, r7, #16
 8007cea:	2300      	movs	r3, #0
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	f7fe f9eb 	bl	80060c8 <xQueueGenericSendFromISR>
 8007cf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3728      	adds	r7, #40	; 0x28
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	20000898 	.word	0x20000898

08007d04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b088      	sub	sp, #32
 8007d08:	af02      	add	r7, sp, #8
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d0e:	4b22      	ldr	r3, [pc, #136]	; (8007d98 <prvProcessExpiredTimer+0x94>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	68db      	ldr	r3, [r3, #12]
 8007d14:	68db      	ldr	r3, [r3, #12]
 8007d16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fd ff24 	bl	8005b6a <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d28:	f003 0304 	and.w	r3, r3, #4
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d022      	beq.n	8007d76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	699a      	ldr	r2, [r3, #24]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	18d1      	adds	r1, r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	6978      	ldr	r0, [r7, #20]
 8007d3e:	f000 f8d1 	bl	8007ee4 <prvInsertTimerInActiveList>
 8007d42:	4603      	mov	r3, r0
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d01f      	beq.n	8007d88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d48:	2300      	movs	r3, #0
 8007d4a:	9300      	str	r3, [sp, #0]
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	687a      	ldr	r2, [r7, #4]
 8007d50:	2100      	movs	r1, #0
 8007d52:	6978      	ldr	r0, [r7, #20]
 8007d54:	f7ff ff88 	bl	8007c68 <xTimerGenericCommand>
 8007d58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d113      	bne.n	8007d88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d64:	f383 8811 	msr	BASEPRI, r3
 8007d68:	f3bf 8f6f 	isb	sy
 8007d6c:	f3bf 8f4f 	dsb	sy
 8007d70:	60fb      	str	r3, [r7, #12]
}
 8007d72:	bf00      	nop
 8007d74:	e7fe      	b.n	8007d74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	6a1b      	ldr	r3, [r3, #32]
 8007d8c:	6978      	ldr	r0, [r7, #20]
 8007d8e:	4798      	blx	r3
}
 8007d90:	bf00      	nop
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20000890 	.word	0x20000890

08007d9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007da4:	f107 0308 	add.w	r3, r7, #8
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f857 	bl	8007e5c <prvGetNextExpireTime>
 8007dae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	4619      	mov	r1, r3
 8007db4:	68f8      	ldr	r0, [r7, #12]
 8007db6:	f000 f803 	bl	8007dc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dba:	f000 f8d5 	bl	8007f68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dbe:	e7f1      	b.n	8007da4 <prvTimerTask+0x8>

08007dc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
 8007dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007dca:	f7fe ffb9 	bl	8006d40 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007dce:	f107 0308 	add.w	r3, r7, #8
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 f866 	bl	8007ea4 <prvSampleTimeNow>
 8007dd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d130      	bne.n	8007e42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d10a      	bne.n	8007dfc <prvProcessTimerOrBlockTask+0x3c>
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d806      	bhi.n	8007dfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007dee:	f7fe ffb5 	bl	8006d5c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007df2:	68f9      	ldr	r1, [r7, #12]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f7ff ff85 	bl	8007d04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007dfa:	e024      	b.n	8007e46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d008      	beq.n	8007e14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e02:	4b13      	ldr	r3, [pc, #76]	; (8007e50 <prvProcessTimerOrBlockTask+0x90>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d101      	bne.n	8007e10 <prvProcessTimerOrBlockTask+0x50>
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e000      	b.n	8007e12 <prvProcessTimerOrBlockTask+0x52>
 8007e10:	2300      	movs	r3, #0
 8007e12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e14:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <prvProcessTimerOrBlockTask+0x94>)
 8007e16:	6818      	ldr	r0, [r3, #0]
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	1ad3      	subs	r3, r2, r3
 8007e1e:	683a      	ldr	r2, [r7, #0]
 8007e20:	4619      	mov	r1, r3
 8007e22:	f7fe fd2b 	bl	800687c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e26:	f7fe ff99 	bl	8006d5c <xTaskResumeAll>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10a      	bne.n	8007e46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e30:	4b09      	ldr	r3, [pc, #36]	; (8007e58 <prvProcessTimerOrBlockTask+0x98>)
 8007e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e36:	601a      	str	r2, [r3, #0]
 8007e38:	f3bf 8f4f 	dsb	sy
 8007e3c:	f3bf 8f6f 	isb	sy
}
 8007e40:	e001      	b.n	8007e46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e42:	f7fe ff8b 	bl	8006d5c <xTaskResumeAll>
}
 8007e46:	bf00      	nop
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000894 	.word	0x20000894
 8007e54:	20000898 	.word	0x20000898
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b085      	sub	sp, #20
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e64:	4b0e      	ldr	r3, [pc, #56]	; (8007ea0 <prvGetNextExpireTime+0x44>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <prvGetNextExpireTime+0x16>
 8007e6e:	2201      	movs	r2, #1
 8007e70:	e000      	b.n	8007e74 <prvGetNextExpireTime+0x18>
 8007e72:	2200      	movs	r2, #0
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d105      	bne.n	8007e8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e80:	4b07      	ldr	r3, [pc, #28]	; (8007ea0 <prvGetNextExpireTime+0x44>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	60fb      	str	r3, [r7, #12]
 8007e8a:	e001      	b.n	8007e90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e90:	68fb      	ldr	r3, [r7, #12]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20000890 	.word	0x20000890

08007ea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007eac:	f7fe fff2 	bl	8006e94 <xTaskGetTickCount>
 8007eb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007eb2:	4b0b      	ldr	r3, [pc, #44]	; (8007ee0 <prvSampleTimeNow+0x3c>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d205      	bcs.n	8007ec8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ebc:	f000 f936 	bl	800812c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	e002      	b.n	8007ece <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ece:	4a04      	ldr	r2, [pc, #16]	; (8007ee0 <prvSampleTimeNow+0x3c>)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3710      	adds	r7, #16
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	200008a0 	.word	0x200008a0

08007ee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	60f8      	str	r0, [r7, #12]
 8007eec:	60b9      	str	r1, [r7, #8]
 8007eee:	607a      	str	r2, [r7, #4]
 8007ef0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	68ba      	ldr	r2, [r7, #8]
 8007efa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d812      	bhi.n	8007f30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f0a:	687a      	ldr	r2, [r7, #4]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	1ad2      	subs	r2, r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	699b      	ldr	r3, [r3, #24]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d302      	bcc.n	8007f1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	617b      	str	r3, [r7, #20]
 8007f1c:	e01b      	b.n	8007f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f1e:	4b10      	ldr	r3, [pc, #64]	; (8007f60 <prvInsertTimerInActiveList+0x7c>)
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4619      	mov	r1, r3
 8007f28:	4610      	mov	r0, r2
 8007f2a:	f7fd fde5 	bl	8005af8 <vListInsert>
 8007f2e:	e012      	b.n	8007f56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f30:	687a      	ldr	r2, [r7, #4]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	429a      	cmp	r2, r3
 8007f36:	d206      	bcs.n	8007f46 <prvInsertTimerInActiveList+0x62>
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d302      	bcc.n	8007f46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f40:	2301      	movs	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
 8007f44:	e007      	b.n	8007f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f46:	4b07      	ldr	r3, [pc, #28]	; (8007f64 <prvInsertTimerInActiveList+0x80>)
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	3304      	adds	r3, #4
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4610      	mov	r0, r2
 8007f52:	f7fd fdd1 	bl	8005af8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f56:	697b      	ldr	r3, [r7, #20]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3718      	adds	r7, #24
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20000894 	.word	0x20000894
 8007f64:	20000890 	.word	0x20000890

08007f68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b08e      	sub	sp, #56	; 0x38
 8007f6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f6e:	e0ca      	b.n	8008106 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	da18      	bge.n	8007fa8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f76:	1d3b      	adds	r3, r7, #4
 8007f78:	3304      	adds	r3, #4
 8007f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10a      	bne.n	8007f98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	61fb      	str	r3, [r7, #28]
}
 8007f94:	bf00      	nop
 8007f96:	e7fe      	b.n	8007f96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f9e:	6850      	ldr	r0, [r2, #4]
 8007fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fa2:	6892      	ldr	r2, [r2, #8]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f2c0 80aa 	blt.w	8008104 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb6:	695b      	ldr	r3, [r3, #20]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d004      	beq.n	8007fc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7fd fdd2 	bl	8005b6a <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7ff ff6b 	bl	8007ea4 <prvSampleTimeNow>
 8007fce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	f200 8097 	bhi.w	8008106 <prvProcessReceivedCommands+0x19e>
 8007fd8:	a201      	add	r2, pc, #4	; (adr r2, 8007fe0 <prvProcessReceivedCommands+0x78>)
 8007fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fde:	bf00      	nop
 8007fe0:	08008009 	.word	0x08008009
 8007fe4:	08008009 	.word	0x08008009
 8007fe8:	08008009 	.word	0x08008009
 8007fec:	0800807d 	.word	0x0800807d
 8007ff0:	08008091 	.word	0x08008091
 8007ff4:	080080db 	.word	0x080080db
 8007ff8:	08008009 	.word	0x08008009
 8007ffc:	08008009 	.word	0x08008009
 8008000:	0800807d 	.word	0x0800807d
 8008004:	08008091 	.word	0x08008091
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800800e:	f043 0301 	orr.w	r3, r3, #1
 8008012:	b2da      	uxtb	r2, r3
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	18d1      	adds	r1, r2, r3
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008028:	f7ff ff5c 	bl	8007ee4 <prvInsertTimerInActiveList>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d069      	beq.n	8008106 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	6a1b      	ldr	r3, [r3, #32]
 8008036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008038:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008040:	f003 0304 	and.w	r3, r3, #4
 8008044:	2b00      	cmp	r3, #0
 8008046:	d05e      	beq.n	8008106 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	441a      	add	r2, r3
 8008050:	2300      	movs	r3, #0
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	2300      	movs	r3, #0
 8008056:	2100      	movs	r1, #0
 8008058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800805a:	f7ff fe05 	bl	8007c68 <xTimerGenericCommand>
 800805e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008060:	6a3b      	ldr	r3, [r7, #32]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d14f      	bne.n	8008106 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	61bb      	str	r3, [r7, #24]
}
 8008078:	bf00      	nop
 800807a:	e7fe      	b.n	800807a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008082:	f023 0301 	bic.w	r3, r3, #1
 8008086:	b2da      	uxtb	r2, r3
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800808e:	e03a      	b.n	8008106 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008092:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008096:	f043 0301 	orr.w	r3, r3, #1
 800809a:	b2da      	uxtb	r2, r3
 800809c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800809e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080a2:	68ba      	ldr	r2, [r7, #8]
 80080a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	699b      	ldr	r3, [r3, #24]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	617b      	str	r3, [r7, #20]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	699a      	ldr	r2, [r3, #24]
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080cc:	18d1      	adds	r1, r2, r3
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080d4:	f7ff ff06 	bl	8007ee4 <prvInsertTimerInActiveList>
					break;
 80080d8:	e015      	b.n	8008106 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80080da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080e0:	f003 0302 	and.w	r3, r3, #2
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d103      	bne.n	80080f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80080e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80080ea:	f000 fbe1 	bl	80088b0 <vPortFree>
 80080ee:	e00a      	b.n	8008106 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80080f6:	f023 0301 	bic.w	r3, r3, #1
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008102:	e000      	b.n	8008106 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008104:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008106:	4b08      	ldr	r3, [pc, #32]	; (8008128 <prvProcessReceivedCommands+0x1c0>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	1d39      	adds	r1, r7, #4
 800810c:	2200      	movs	r2, #0
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe f876 	bl	8006200 <xQueueReceive>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	f47f af2a 	bne.w	8007f70 <prvProcessReceivedCommands+0x8>
	}
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	3730      	adds	r7, #48	; 0x30
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000898 	.word	0x20000898

0800812c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008132:	e048      	b.n	80081c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008134:	4b2d      	ldr	r3, [pc, #180]	; (80081ec <prvSwitchTimerLists+0xc0>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800813e:	4b2b      	ldr	r3, [pc, #172]	; (80081ec <prvSwitchTimerLists+0xc0>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3304      	adds	r3, #4
 800814c:	4618      	mov	r0, r3
 800814e:	f7fd fd0c 	bl	8005b6a <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	6a1b      	ldr	r3, [r3, #32]
 8008156:	68f8      	ldr	r0, [r7, #12]
 8008158:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008160:	f003 0304 	and.w	r3, r3, #4
 8008164:	2b00      	cmp	r3, #0
 8008166:	d02e      	beq.n	80081c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	4413      	add	r3, r2
 8008170:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008172:	68ba      	ldr	r2, [r7, #8]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	429a      	cmp	r2, r3
 8008178:	d90e      	bls.n	8008198 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008186:	4b19      	ldr	r3, [pc, #100]	; (80081ec <prvSwitchTimerLists+0xc0>)
 8008188:	681a      	ldr	r2, [r3, #0]
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	3304      	adds	r3, #4
 800818e:	4619      	mov	r1, r3
 8008190:	4610      	mov	r0, r2
 8008192:	f7fd fcb1 	bl	8005af8 <vListInsert>
 8008196:	e016      	b.n	80081c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008198:	2300      	movs	r3, #0
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	2300      	movs	r3, #0
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	2100      	movs	r1, #0
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7ff fd60 	bl	8007c68 <xTimerGenericCommand>
 80081a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d10a      	bne.n	80081c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80081b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081b4:	f383 8811 	msr	BASEPRI, r3
 80081b8:	f3bf 8f6f 	isb	sy
 80081bc:	f3bf 8f4f 	dsb	sy
 80081c0:	603b      	str	r3, [r7, #0]
}
 80081c2:	bf00      	nop
 80081c4:	e7fe      	b.n	80081c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081c6:	4b09      	ldr	r3, [pc, #36]	; (80081ec <prvSwitchTimerLists+0xc0>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1b1      	bne.n	8008134 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80081d0:	4b06      	ldr	r3, [pc, #24]	; (80081ec <prvSwitchTimerLists+0xc0>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80081d6:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <prvSwitchTimerLists+0xc4>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a04      	ldr	r2, [pc, #16]	; (80081ec <prvSwitchTimerLists+0xc0>)
 80081dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80081de:	4a04      	ldr	r2, [pc, #16]	; (80081f0 <prvSwitchTimerLists+0xc4>)
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	6013      	str	r3, [r2, #0]
}
 80081e4:	bf00      	nop
 80081e6:	3718      	adds	r7, #24
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}
 80081ec:	20000890 	.word	0x20000890
 80081f0:	20000894 	.word	0x20000894

080081f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80081fa:	f000 f96b 	bl	80084d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80081fe:	4b15      	ldr	r3, [pc, #84]	; (8008254 <prvCheckForValidListAndQueue+0x60>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d120      	bne.n	8008248 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008206:	4814      	ldr	r0, [pc, #80]	; (8008258 <prvCheckForValidListAndQueue+0x64>)
 8008208:	f7fd fc25 	bl	8005a56 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800820c:	4813      	ldr	r0, [pc, #76]	; (800825c <prvCheckForValidListAndQueue+0x68>)
 800820e:	f7fd fc22 	bl	8005a56 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008212:	4b13      	ldr	r3, [pc, #76]	; (8008260 <prvCheckForValidListAndQueue+0x6c>)
 8008214:	4a10      	ldr	r2, [pc, #64]	; (8008258 <prvCheckForValidListAndQueue+0x64>)
 8008216:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008218:	4b12      	ldr	r3, [pc, #72]	; (8008264 <prvCheckForValidListAndQueue+0x70>)
 800821a:	4a10      	ldr	r2, [pc, #64]	; (800825c <prvCheckForValidListAndQueue+0x68>)
 800821c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800821e:	2300      	movs	r3, #0
 8008220:	9300      	str	r3, [sp, #0]
 8008222:	4b11      	ldr	r3, [pc, #68]	; (8008268 <prvCheckForValidListAndQueue+0x74>)
 8008224:	4a11      	ldr	r2, [pc, #68]	; (800826c <prvCheckForValidListAndQueue+0x78>)
 8008226:	2110      	movs	r1, #16
 8008228:	200a      	movs	r0, #10
 800822a:	f7fd fd31 	bl	8005c90 <xQueueGenericCreateStatic>
 800822e:	4603      	mov	r3, r0
 8008230:	4a08      	ldr	r2, [pc, #32]	; (8008254 <prvCheckForValidListAndQueue+0x60>)
 8008232:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008234:	4b07      	ldr	r3, [pc, #28]	; (8008254 <prvCheckForValidListAndQueue+0x60>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d005      	beq.n	8008248 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800823c:	4b05      	ldr	r3, [pc, #20]	; (8008254 <prvCheckForValidListAndQueue+0x60>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	490b      	ldr	r1, [pc, #44]	; (8008270 <prvCheckForValidListAndQueue+0x7c>)
 8008242:	4618      	mov	r0, r3
 8008244:	f7fe faf0 	bl	8006828 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008248:	f000 f974 	bl	8008534 <vPortExitCritical>
}
 800824c:	bf00      	nop
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000898 	.word	0x20000898
 8008258:	20000868 	.word	0x20000868
 800825c:	2000087c 	.word	0x2000087c
 8008260:	20000890 	.word	0x20000890
 8008264:	20000894 	.word	0x20000894
 8008268:	20000944 	.word	0x20000944
 800826c:	200008a4 	.word	0x200008a4
 8008270:	080095dc 	.word	0x080095dc

08008274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	3b04      	subs	r3, #4
 8008284:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800828c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3b04      	subs	r3, #4
 8008292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	f023 0201 	bic.w	r2, r3, #1
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	3b04      	subs	r3, #4
 80082a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082a4:	4a0c      	ldr	r2, [pc, #48]	; (80082d8 <pxPortInitialiseStack+0x64>)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3b14      	subs	r3, #20
 80082ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082b0:	687a      	ldr	r2, [r7, #4]
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3b04      	subs	r3, #4
 80082ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f06f 0202 	mvn.w	r2, #2
 80082c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	3b20      	subs	r3, #32
 80082c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082ca:	68fb      	ldr	r3, [r7, #12]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3714      	adds	r7, #20
 80082d0:	46bd      	mov	sp, r7
 80082d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d6:	4770      	bx	lr
 80082d8:	080082dd 	.word	0x080082dd

080082dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80082e2:	2300      	movs	r3, #0
 80082e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80082e6:	4b12      	ldr	r3, [pc, #72]	; (8008330 <prvTaskExitError+0x54>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082ee:	d00a      	beq.n	8008306 <prvTaskExitError+0x2a>
	__asm volatile
 80082f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f4:	f383 8811 	msr	BASEPRI, r3
 80082f8:	f3bf 8f6f 	isb	sy
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	60fb      	str	r3, [r7, #12]
}
 8008302:	bf00      	nop
 8008304:	e7fe      	b.n	8008304 <prvTaskExitError+0x28>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	60bb      	str	r3, [r7, #8]
}
 8008318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800831a:	bf00      	nop
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d0fc      	beq.n	800831c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008322:	bf00      	nop
 8008324:	bf00      	nop
 8008326:	3714      	adds	r7, #20
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr
 8008330:	2000000c 	.word	0x2000000c
	...

08008340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <pxCurrentTCBConst2>)
 8008342:	6819      	ldr	r1, [r3, #0]
 8008344:	6808      	ldr	r0, [r1, #0]
 8008346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834a:	f380 8809 	msr	PSP, r0
 800834e:	f3bf 8f6f 	isb	sy
 8008352:	f04f 0000 	mov.w	r0, #0
 8008356:	f380 8811 	msr	BASEPRI, r0
 800835a:	4770      	bx	lr
 800835c:	f3af 8000 	nop.w

08008360 <pxCurrentTCBConst2>:
 8008360:	2000073c 	.word	0x2000073c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop

08008368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008368:	4808      	ldr	r0, [pc, #32]	; (800838c <prvPortStartFirstTask+0x24>)
 800836a:	6800      	ldr	r0, [r0, #0]
 800836c:	6800      	ldr	r0, [r0, #0]
 800836e:	f380 8808 	msr	MSP, r0
 8008372:	f04f 0000 	mov.w	r0, #0
 8008376:	f380 8814 	msr	CONTROL, r0
 800837a:	b662      	cpsie	i
 800837c:	b661      	cpsie	f
 800837e:	f3bf 8f4f 	dsb	sy
 8008382:	f3bf 8f6f 	isb	sy
 8008386:	df00      	svc	0
 8008388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800838a:	bf00      	nop
 800838c:	e000ed08 	.word	0xe000ed08

08008390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b086      	sub	sp, #24
 8008394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008396:	4b46      	ldr	r3, [pc, #280]	; (80084b0 <xPortStartScheduler+0x120>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a46      	ldr	r2, [pc, #280]	; (80084b4 <xPortStartScheduler+0x124>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d10a      	bne.n	80083b6 <xPortStartScheduler+0x26>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	613b      	str	r3, [r7, #16]
}
 80083b2:	bf00      	nop
 80083b4:	e7fe      	b.n	80083b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80083b6:	4b3e      	ldr	r3, [pc, #248]	; (80084b0 <xPortStartScheduler+0x120>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a3f      	ldr	r2, [pc, #252]	; (80084b8 <xPortStartScheduler+0x128>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d10a      	bne.n	80083d6 <xPortStartScheduler+0x46>
	__asm volatile
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	60fb      	str	r3, [r7, #12]
}
 80083d2:	bf00      	nop
 80083d4:	e7fe      	b.n	80083d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083d6:	4b39      	ldr	r3, [pc, #228]	; (80084bc <xPortStartScheduler+0x12c>)
 80083d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	22ff      	movs	r2, #255	; 0xff
 80083e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	4b31      	ldr	r3, [pc, #196]	; (80084c0 <xPortStartScheduler+0x130>)
 80083fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083fe:	4b31      	ldr	r3, [pc, #196]	; (80084c4 <xPortStartScheduler+0x134>)
 8008400:	2207      	movs	r2, #7
 8008402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008404:	e009      	b.n	800841a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008406:	4b2f      	ldr	r3, [pc, #188]	; (80084c4 <xPortStartScheduler+0x134>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3b01      	subs	r3, #1
 800840c:	4a2d      	ldr	r2, [pc, #180]	; (80084c4 <xPortStartScheduler+0x134>)
 800840e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	b2db      	uxtb	r3, r3
 8008418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008422:	2b80      	cmp	r3, #128	; 0x80
 8008424:	d0ef      	beq.n	8008406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008426:	4b27      	ldr	r3, [pc, #156]	; (80084c4 <xPortStartScheduler+0x134>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f1c3 0307 	rsb	r3, r3, #7
 800842e:	2b04      	cmp	r3, #4
 8008430:	d00a      	beq.n	8008448 <xPortStartScheduler+0xb8>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	f383 8811 	msr	BASEPRI, r3
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	f3bf 8f4f 	dsb	sy
 8008442:	60bb      	str	r3, [r7, #8]
}
 8008444:	bf00      	nop
 8008446:	e7fe      	b.n	8008446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008448:	4b1e      	ldr	r3, [pc, #120]	; (80084c4 <xPortStartScheduler+0x134>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	021b      	lsls	r3, r3, #8
 800844e:	4a1d      	ldr	r2, [pc, #116]	; (80084c4 <xPortStartScheduler+0x134>)
 8008450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008452:	4b1c      	ldr	r3, [pc, #112]	; (80084c4 <xPortStartScheduler+0x134>)
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800845a:	4a1a      	ldr	r2, [pc, #104]	; (80084c4 <xPortStartScheduler+0x134>)
 800845c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	b2da      	uxtb	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008466:	4b18      	ldr	r3, [pc, #96]	; (80084c8 <xPortStartScheduler+0x138>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <xPortStartScheduler+0x138>)
 800846c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008472:	4b15      	ldr	r3, [pc, #84]	; (80084c8 <xPortStartScheduler+0x138>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a14      	ldr	r2, [pc, #80]	; (80084c8 <xPortStartScheduler+0x138>)
 8008478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800847c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800847e:	f000 f8dd 	bl	800863c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008482:	4b12      	ldr	r3, [pc, #72]	; (80084cc <xPortStartScheduler+0x13c>)
 8008484:	2200      	movs	r2, #0
 8008486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008488:	f000 f8fc 	bl	8008684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800848c:	4b10      	ldr	r3, [pc, #64]	; (80084d0 <xPortStartScheduler+0x140>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a0f      	ldr	r2, [pc, #60]	; (80084d0 <xPortStartScheduler+0x140>)
 8008492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008498:	f7ff ff66 	bl	8008368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800849c:	f7fe fdc2 	bl	8007024 <vTaskSwitchContext>
	prvTaskExitError();
 80084a0:	f7ff ff1c 	bl	80082dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3718      	adds	r7, #24
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop
 80084b0:	e000ed00 	.word	0xe000ed00
 80084b4:	410fc271 	.word	0x410fc271
 80084b8:	410fc270 	.word	0x410fc270
 80084bc:	e000e400 	.word	0xe000e400
 80084c0:	2000098c 	.word	0x2000098c
 80084c4:	20000990 	.word	0x20000990
 80084c8:	e000ed20 	.word	0xe000ed20
 80084cc:	2000000c 	.word	0x2000000c
 80084d0:	e000ef34 	.word	0xe000ef34

080084d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
	__asm volatile
 80084da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084de:	f383 8811 	msr	BASEPRI, r3
 80084e2:	f3bf 8f6f 	isb	sy
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	607b      	str	r3, [r7, #4]
}
 80084ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084ee:	4b0f      	ldr	r3, [pc, #60]	; (800852c <vPortEnterCritical+0x58>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	3301      	adds	r3, #1
 80084f4:	4a0d      	ldr	r2, [pc, #52]	; (800852c <vPortEnterCritical+0x58>)
 80084f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084f8:	4b0c      	ldr	r3, [pc, #48]	; (800852c <vPortEnterCritical+0x58>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d10f      	bne.n	8008520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008500:	4b0b      	ldr	r3, [pc, #44]	; (8008530 <vPortEnterCritical+0x5c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	b2db      	uxtb	r3, r3
 8008506:	2b00      	cmp	r3, #0
 8008508:	d00a      	beq.n	8008520 <vPortEnterCritical+0x4c>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	603b      	str	r3, [r7, #0]
}
 800851c:	bf00      	nop
 800851e:	e7fe      	b.n	800851e <vPortEnterCritical+0x4a>
	}
}
 8008520:	bf00      	nop
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	2000000c 	.word	0x2000000c
 8008530:	e000ed04 	.word	0xe000ed04

08008534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800853a:	4b12      	ldr	r3, [pc, #72]	; (8008584 <vPortExitCritical+0x50>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10a      	bne.n	8008558 <vPortExitCritical+0x24>
	__asm volatile
 8008542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008546:	f383 8811 	msr	BASEPRI, r3
 800854a:	f3bf 8f6f 	isb	sy
 800854e:	f3bf 8f4f 	dsb	sy
 8008552:	607b      	str	r3, [r7, #4]
}
 8008554:	bf00      	nop
 8008556:	e7fe      	b.n	8008556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008558:	4b0a      	ldr	r3, [pc, #40]	; (8008584 <vPortExitCritical+0x50>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	3b01      	subs	r3, #1
 800855e:	4a09      	ldr	r2, [pc, #36]	; (8008584 <vPortExitCritical+0x50>)
 8008560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008562:	4b08      	ldr	r3, [pc, #32]	; (8008584 <vPortExitCritical+0x50>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d105      	bne.n	8008576 <vPortExitCritical+0x42>
 800856a:	2300      	movs	r3, #0
 800856c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	f383 8811 	msr	BASEPRI, r3
}
 8008574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008576:	bf00      	nop
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr
 8008582:	bf00      	nop
 8008584:	2000000c 	.word	0x2000000c
	...

08008590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008590:	f3ef 8009 	mrs	r0, PSP
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	4b15      	ldr	r3, [pc, #84]	; (80085f0 <pxCurrentTCBConst>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	f01e 0f10 	tst.w	lr, #16
 80085a0:	bf08      	it	eq
 80085a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	6010      	str	r0, [r2, #0]
 80085ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085b4:	f380 8811 	msr	BASEPRI, r0
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
 80085c0:	f7fe fd30 	bl	8007024 <vTaskSwitchContext>
 80085c4:	f04f 0000 	mov.w	r0, #0
 80085c8:	f380 8811 	msr	BASEPRI, r0
 80085cc:	bc09      	pop	{r0, r3}
 80085ce:	6819      	ldr	r1, [r3, #0]
 80085d0:	6808      	ldr	r0, [r1, #0]
 80085d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d6:	f01e 0f10 	tst.w	lr, #16
 80085da:	bf08      	it	eq
 80085dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085e0:	f380 8809 	msr	PSP, r0
 80085e4:	f3bf 8f6f 	isb	sy
 80085e8:	4770      	bx	lr
 80085ea:	bf00      	nop
 80085ec:	f3af 8000 	nop.w

080085f0 <pxCurrentTCBConst>:
 80085f0:	2000073c 	.word	0x2000073c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop

080085f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	607b      	str	r3, [r7, #4]
}
 8008610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008612:	f7fe fc4f 	bl	8006eb4 <xTaskIncrementTick>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <SysTick_Handler+0x40>)
 800861e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	2300      	movs	r3, #0
 8008626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f383 8811 	msr	BASEPRI, r3
}
 800862e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008640:	4b0b      	ldr	r3, [pc, #44]	; (8008670 <vPortSetupTimerInterrupt+0x34>)
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008646:	4b0b      	ldr	r3, [pc, #44]	; (8008674 <vPortSetupTimerInterrupt+0x38>)
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <vPortSetupTimerInterrupt+0x3c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a0a      	ldr	r2, [pc, #40]	; (800867c <vPortSetupTimerInterrupt+0x40>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	099b      	lsrs	r3, r3, #6
 8008658:	4a09      	ldr	r2, [pc, #36]	; (8008680 <vPortSetupTimerInterrupt+0x44>)
 800865a:	3b01      	subs	r3, #1
 800865c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800865e:	4b04      	ldr	r3, [pc, #16]	; (8008670 <vPortSetupTimerInterrupt+0x34>)
 8008660:	2207      	movs	r2, #7
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	bf00      	nop
 8008666:	46bd      	mov	sp, r7
 8008668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866c:	4770      	bx	lr
 800866e:	bf00      	nop
 8008670:	e000e010 	.word	0xe000e010
 8008674:	e000e018 	.word	0xe000e018
 8008678:	20000000 	.word	0x20000000
 800867c:	10624dd3 	.word	0x10624dd3
 8008680:	e000e014 	.word	0xe000e014

08008684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008694 <vPortEnableVFP+0x10>
 8008688:	6801      	ldr	r1, [r0, #0]
 800868a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800868e:	6001      	str	r1, [r0, #0]
 8008690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008692:	bf00      	nop
 8008694:	e000ed88 	.word	0xe000ed88

08008698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800869e:	f3ef 8305 	mrs	r3, IPSR
 80086a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b0f      	cmp	r3, #15
 80086a8:	d914      	bls.n	80086d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086aa:	4a17      	ldr	r2, [pc, #92]	; (8008708 <vPortValidateInterruptPriority+0x70>)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4413      	add	r3, r2
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086b4:	4b15      	ldr	r3, [pc, #84]	; (800870c <vPortValidateInterruptPriority+0x74>)
 80086b6:	781b      	ldrb	r3, [r3, #0]
 80086b8:	7afa      	ldrb	r2, [r7, #11]
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d20a      	bcs.n	80086d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	607b      	str	r3, [r7, #4]
}
 80086d0:	bf00      	nop
 80086d2:	e7fe      	b.n	80086d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086d4:	4b0e      	ldr	r3, [pc, #56]	; (8008710 <vPortValidateInterruptPriority+0x78>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80086dc:	4b0d      	ldr	r3, [pc, #52]	; (8008714 <vPortValidateInterruptPriority+0x7c>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	429a      	cmp	r2, r3
 80086e2:	d90a      	bls.n	80086fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	603b      	str	r3, [r7, #0]
}
 80086f6:	bf00      	nop
 80086f8:	e7fe      	b.n	80086f8 <vPortValidateInterruptPriority+0x60>
	}
 80086fa:	bf00      	nop
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	e000e3f0 	.word	0xe000e3f0
 800870c:	2000098c 	.word	0x2000098c
 8008710:	e000ed0c 	.word	0xe000ed0c
 8008714:	20000990 	.word	0x20000990

08008718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b08a      	sub	sp, #40	; 0x28
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008720:	2300      	movs	r3, #0
 8008722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008724:	f7fe fb0c 	bl	8006d40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008728:	4b5b      	ldr	r3, [pc, #364]	; (8008898 <pvPortMalloc+0x180>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008730:	f000 f920 	bl	8008974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008734:	4b59      	ldr	r3, [pc, #356]	; (800889c <pvPortMalloc+0x184>)
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4013      	ands	r3, r2
 800873c:	2b00      	cmp	r3, #0
 800873e:	f040 8093 	bne.w	8008868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d01d      	beq.n	8008784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008748:	2208      	movs	r2, #8
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4413      	add	r3, r2
 800874e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	2b00      	cmp	r3, #0
 8008758:	d014      	beq.n	8008784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	f023 0307 	bic.w	r3, r3, #7
 8008760:	3308      	adds	r3, #8
 8008762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f003 0307 	and.w	r3, r3, #7
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <pvPortMalloc+0x6c>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	617b      	str	r3, [r7, #20]
}
 8008780:	bf00      	nop
 8008782:	e7fe      	b.n	8008782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d06e      	beq.n	8008868 <pvPortMalloc+0x150>
 800878a:	4b45      	ldr	r3, [pc, #276]	; (80088a0 <pvPortMalloc+0x188>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	429a      	cmp	r2, r3
 8008792:	d869      	bhi.n	8008868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008794:	4b43      	ldr	r3, [pc, #268]	; (80088a4 <pvPortMalloc+0x18c>)
 8008796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008798:	4b42      	ldr	r3, [pc, #264]	; (80088a4 <pvPortMalloc+0x18c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800879e:	e004      	b.n	80087aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80087a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d903      	bls.n	80087bc <pvPortMalloc+0xa4>
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d1f1      	bne.n	80087a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087bc:	4b36      	ldr	r3, [pc, #216]	; (8008898 <pvPortMalloc+0x180>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c2:	429a      	cmp	r2, r3
 80087c4:	d050      	beq.n	8008868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2208      	movs	r2, #8
 80087cc:	4413      	add	r3, r2
 80087ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	681a      	ldr	r2, [r3, #0]
 80087d4:	6a3b      	ldr	r3, [r7, #32]
 80087d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	685a      	ldr	r2, [r3, #4]
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	1ad2      	subs	r2, r2, r3
 80087e0:	2308      	movs	r3, #8
 80087e2:	005b      	lsls	r3, r3, #1
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d91f      	bls.n	8008828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4413      	add	r3, r2
 80087ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f003 0307 	and.w	r3, r3, #7
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00a      	beq.n	8008810 <pvPortMalloc+0xf8>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	613b      	str	r3, [r7, #16]
}
 800880c:	bf00      	nop
 800880e:	e7fe      	b.n	800880e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	1ad2      	subs	r2, r2, r3
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008822:	69b8      	ldr	r0, [r7, #24]
 8008824:	f000 f908 	bl	8008a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008828:	4b1d      	ldr	r3, [pc, #116]	; (80088a0 <pvPortMalloc+0x188>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	1ad3      	subs	r3, r2, r3
 8008832:	4a1b      	ldr	r2, [pc, #108]	; (80088a0 <pvPortMalloc+0x188>)
 8008834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008836:	4b1a      	ldr	r3, [pc, #104]	; (80088a0 <pvPortMalloc+0x188>)
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	4b1b      	ldr	r3, [pc, #108]	; (80088a8 <pvPortMalloc+0x190>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d203      	bcs.n	800884a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008842:	4b17      	ldr	r3, [pc, #92]	; (80088a0 <pvPortMalloc+0x188>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a18      	ldr	r2, [pc, #96]	; (80088a8 <pvPortMalloc+0x190>)
 8008848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800884a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884c:	685a      	ldr	r2, [r3, #4]
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <pvPortMalloc+0x184>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	431a      	orrs	r2, r3
 8008854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800885e:	4b13      	ldr	r3, [pc, #76]	; (80088ac <pvPortMalloc+0x194>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	3301      	adds	r3, #1
 8008864:	4a11      	ldr	r2, [pc, #68]	; (80088ac <pvPortMalloc+0x194>)
 8008866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008868:	f7fe fa78 	bl	8006d5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f003 0307 	and.w	r3, r3, #7
 8008872:	2b00      	cmp	r3, #0
 8008874:	d00a      	beq.n	800888c <pvPortMalloc+0x174>
	__asm volatile
 8008876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800887a:	f383 8811 	msr	BASEPRI, r3
 800887e:	f3bf 8f6f 	isb	sy
 8008882:	f3bf 8f4f 	dsb	sy
 8008886:	60fb      	str	r3, [r7, #12]
}
 8008888:	bf00      	nop
 800888a:	e7fe      	b.n	800888a <pvPortMalloc+0x172>
	return pvReturn;
 800888c:	69fb      	ldr	r3, [r7, #28]
}
 800888e:	4618      	mov	r0, r3
 8008890:	3728      	adds	r7, #40	; 0x28
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	200024f4 	.word	0x200024f4
 800889c:	20002508 	.word	0x20002508
 80088a0:	200024f8 	.word	0x200024f8
 80088a4:	200024ec 	.word	0x200024ec
 80088a8:	200024fc 	.word	0x200024fc
 80088ac:	20002500 	.word	0x20002500

080088b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d04d      	beq.n	800895e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088c2:	2308      	movs	r3, #8
 80088c4:	425b      	negs	r3, r3
 80088c6:	697a      	ldr	r2, [r7, #20]
 80088c8:	4413      	add	r3, r2
 80088ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	685a      	ldr	r2, [r3, #4]
 80088d4:	4b24      	ldr	r3, [pc, #144]	; (8008968 <vPortFree+0xb8>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4013      	ands	r3, r2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d10a      	bne.n	80088f4 <vPortFree+0x44>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	60fb      	str	r3, [r7, #12]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d00a      	beq.n	8008912 <vPortFree+0x62>
	__asm volatile
 80088fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008900:	f383 8811 	msr	BASEPRI, r3
 8008904:	f3bf 8f6f 	isb	sy
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	60bb      	str	r3, [r7, #8]
}
 800890e:	bf00      	nop
 8008910:	e7fe      	b.n	8008910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	685a      	ldr	r2, [r3, #4]
 8008916:	4b14      	ldr	r3, [pc, #80]	; (8008968 <vPortFree+0xb8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4013      	ands	r3, r2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d01e      	beq.n	800895e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008920:	693b      	ldr	r3, [r7, #16]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d11a      	bne.n	800895e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	4b0e      	ldr	r3, [pc, #56]	; (8008968 <vPortFree+0xb8>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	43db      	mvns	r3, r3
 8008932:	401a      	ands	r2, r3
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008938:	f7fe fa02 	bl	8006d40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	685a      	ldr	r2, [r3, #4]
 8008940:	4b0a      	ldr	r3, [pc, #40]	; (800896c <vPortFree+0xbc>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4413      	add	r3, r2
 8008946:	4a09      	ldr	r2, [pc, #36]	; (800896c <vPortFree+0xbc>)
 8008948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800894a:	6938      	ldr	r0, [r7, #16]
 800894c:	f000 f874 	bl	8008a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008950:	4b07      	ldr	r3, [pc, #28]	; (8008970 <vPortFree+0xc0>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3301      	adds	r3, #1
 8008956:	4a06      	ldr	r2, [pc, #24]	; (8008970 <vPortFree+0xc0>)
 8008958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800895a:	f7fe f9ff 	bl	8006d5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800895e:	bf00      	nop
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20002508 	.word	0x20002508
 800896c:	200024f8 	.word	0x200024f8
 8008970:	20002504 	.word	0x20002504

08008974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800897a:	f641 3358 	movw	r3, #7000	; 0x1b58
 800897e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008980:	4b27      	ldr	r3, [pc, #156]	; (8008a20 <prvHeapInit+0xac>)
 8008982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f003 0307 	and.w	r3, r3, #7
 800898a:	2b00      	cmp	r3, #0
 800898c:	d00c      	beq.n	80089a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3307      	adds	r3, #7
 8008992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f023 0307 	bic.w	r3, r3, #7
 800899a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	4a1f      	ldr	r2, [pc, #124]	; (8008a20 <prvHeapInit+0xac>)
 80089a4:	4413      	add	r3, r2
 80089a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089ac:	4a1d      	ldr	r2, [pc, #116]	; (8008a24 <prvHeapInit+0xb0>)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089b2:	4b1c      	ldr	r3, [pc, #112]	; (8008a24 <prvHeapInit+0xb0>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	4413      	add	r3, r2
 80089be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089c0:	2208      	movs	r2, #8
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	1a9b      	subs	r3, r3, r2
 80089c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f023 0307 	bic.w	r3, r3, #7
 80089ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4a15      	ldr	r2, [pc, #84]	; (8008a28 <prvHeapInit+0xb4>)
 80089d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089d6:	4b14      	ldr	r3, [pc, #80]	; (8008a28 <prvHeapInit+0xb4>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2200      	movs	r2, #0
 80089dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089de:	4b12      	ldr	r3, [pc, #72]	; (8008a28 <prvHeapInit+0xb4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2200      	movs	r2, #0
 80089e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	1ad2      	subs	r2, r2, r3
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089f4:	4b0c      	ldr	r3, [pc, #48]	; (8008a28 <prvHeapInit+0xb4>)
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	4a0a      	ldr	r2, [pc, #40]	; (8008a2c <prvHeapInit+0xb8>)
 8008a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	4a09      	ldr	r2, [pc, #36]	; (8008a30 <prvHeapInit+0xbc>)
 8008a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a0c:	4b09      	ldr	r3, [pc, #36]	; (8008a34 <prvHeapInit+0xc0>)
 8008a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a12:	601a      	str	r2, [r3, #0]
}
 8008a14:	bf00      	nop
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr
 8008a20:	20000994 	.word	0x20000994
 8008a24:	200024ec 	.word	0x200024ec
 8008a28:	200024f4 	.word	0x200024f4
 8008a2c:	200024fc 	.word	0x200024fc
 8008a30:	200024f8 	.word	0x200024f8
 8008a34:	20002508 	.word	0x20002508

08008a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b085      	sub	sp, #20
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a40:	4b28      	ldr	r3, [pc, #160]	; (8008ae4 <prvInsertBlockIntoFreeList+0xac>)
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	e002      	b.n	8008a4c <prvInsertBlockIntoFreeList+0x14>
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d8f7      	bhi.n	8008a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	68ba      	ldr	r2, [r7, #8]
 8008a60:	4413      	add	r3, r2
 8008a62:	687a      	ldr	r2, [r7, #4]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d108      	bne.n	8008a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	685b      	ldr	r3, [r3, #4]
 8008a70:	441a      	add	r2, r3
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	441a      	add	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	d118      	bne.n	8008ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681a      	ldr	r2, [r3, #0]
 8008a92:	4b15      	ldr	r3, [pc, #84]	; (8008ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d00d      	beq.n	8008ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	685a      	ldr	r2, [r3, #4]
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	441a      	add	r2, r3
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	601a      	str	r2, [r3, #0]
 8008ab4:	e008      	b.n	8008ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ab6:	4b0c      	ldr	r3, [pc, #48]	; (8008ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	601a      	str	r2, [r3, #0]
 8008abe:	e003      	b.n	8008ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d002      	beq.n	8008ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ad6:	bf00      	nop
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	200024ec 	.word	0x200024ec
 8008ae8:	200024f4 	.word	0x200024f4

08008aec <__errno>:
 8008aec:	4b01      	ldr	r3, [pc, #4]	; (8008af4 <__errno+0x8>)
 8008aee:	6818      	ldr	r0, [r3, #0]
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20000010 	.word	0x20000010

08008af8 <__libc_init_array>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	4d0d      	ldr	r5, [pc, #52]	; (8008b30 <__libc_init_array+0x38>)
 8008afc:	4c0d      	ldr	r4, [pc, #52]	; (8008b34 <__libc_init_array+0x3c>)
 8008afe:	1b64      	subs	r4, r4, r5
 8008b00:	10a4      	asrs	r4, r4, #2
 8008b02:	2600      	movs	r6, #0
 8008b04:	42a6      	cmp	r6, r4
 8008b06:	d109      	bne.n	8008b1c <__libc_init_array+0x24>
 8008b08:	4d0b      	ldr	r5, [pc, #44]	; (8008b38 <__libc_init_array+0x40>)
 8008b0a:	4c0c      	ldr	r4, [pc, #48]	; (8008b3c <__libc_init_array+0x44>)
 8008b0c:	f000 fc62 	bl	80093d4 <_init>
 8008b10:	1b64      	subs	r4, r4, r5
 8008b12:	10a4      	asrs	r4, r4, #2
 8008b14:	2600      	movs	r6, #0
 8008b16:	42a6      	cmp	r6, r4
 8008b18:	d105      	bne.n	8008b26 <__libc_init_array+0x2e>
 8008b1a:	bd70      	pop	{r4, r5, r6, pc}
 8008b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b20:	4798      	blx	r3
 8008b22:	3601      	adds	r6, #1
 8008b24:	e7ee      	b.n	8008b04 <__libc_init_array+0xc>
 8008b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b2a:	4798      	blx	r3
 8008b2c:	3601      	adds	r6, #1
 8008b2e:	e7f2      	b.n	8008b16 <__libc_init_array+0x1e>
 8008b30:	08009848 	.word	0x08009848
 8008b34:	08009848 	.word	0x08009848
 8008b38:	08009848 	.word	0x08009848
 8008b3c:	0800984c 	.word	0x0800984c

08008b40 <memcpy>:
 8008b40:	440a      	add	r2, r1
 8008b42:	4291      	cmp	r1, r2
 8008b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b48:	d100      	bne.n	8008b4c <memcpy+0xc>
 8008b4a:	4770      	bx	lr
 8008b4c:	b510      	push	{r4, lr}
 8008b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b56:	4291      	cmp	r1, r2
 8008b58:	d1f9      	bne.n	8008b4e <memcpy+0xe>
 8008b5a:	bd10      	pop	{r4, pc}

08008b5c <memset>:
 8008b5c:	4402      	add	r2, r0
 8008b5e:	4603      	mov	r3, r0
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d100      	bne.n	8008b66 <memset+0xa>
 8008b64:	4770      	bx	lr
 8008b66:	f803 1b01 	strb.w	r1, [r3], #1
 8008b6a:	e7f9      	b.n	8008b60 <memset+0x4>

08008b6c <sniprintf>:
 8008b6c:	b40c      	push	{r2, r3}
 8008b6e:	b530      	push	{r4, r5, lr}
 8008b70:	4b17      	ldr	r3, [pc, #92]	; (8008bd0 <sniprintf+0x64>)
 8008b72:	1e0c      	subs	r4, r1, #0
 8008b74:	681d      	ldr	r5, [r3, #0]
 8008b76:	b09d      	sub	sp, #116	; 0x74
 8008b78:	da08      	bge.n	8008b8c <sniprintf+0x20>
 8008b7a:	238b      	movs	r3, #139	; 0x8b
 8008b7c:	602b      	str	r3, [r5, #0]
 8008b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8008b82:	b01d      	add	sp, #116	; 0x74
 8008b84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b88:	b002      	add	sp, #8
 8008b8a:	4770      	bx	lr
 8008b8c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008b90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008b94:	bf14      	ite	ne
 8008b96:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008b9a:	4623      	moveq	r3, r4
 8008b9c:	9304      	str	r3, [sp, #16]
 8008b9e:	9307      	str	r3, [sp, #28]
 8008ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ba4:	9002      	str	r0, [sp, #8]
 8008ba6:	9006      	str	r0, [sp, #24]
 8008ba8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008bac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008bae:	ab21      	add	r3, sp, #132	; 0x84
 8008bb0:	a902      	add	r1, sp, #8
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	f000 f869 	bl	8008c8c <_svfiprintf_r>
 8008bba:	1c43      	adds	r3, r0, #1
 8008bbc:	bfbc      	itt	lt
 8008bbe:	238b      	movlt	r3, #139	; 0x8b
 8008bc0:	602b      	strlt	r3, [r5, #0]
 8008bc2:	2c00      	cmp	r4, #0
 8008bc4:	d0dd      	beq.n	8008b82 <sniprintf+0x16>
 8008bc6:	9b02      	ldr	r3, [sp, #8]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	701a      	strb	r2, [r3, #0]
 8008bcc:	e7d9      	b.n	8008b82 <sniprintf+0x16>
 8008bce:	bf00      	nop
 8008bd0:	20000010 	.word	0x20000010

08008bd4 <__ssputs_r>:
 8008bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd8:	688e      	ldr	r6, [r1, #8]
 8008bda:	429e      	cmp	r6, r3
 8008bdc:	4682      	mov	sl, r0
 8008bde:	460c      	mov	r4, r1
 8008be0:	4690      	mov	r8, r2
 8008be2:	461f      	mov	r7, r3
 8008be4:	d838      	bhi.n	8008c58 <__ssputs_r+0x84>
 8008be6:	898a      	ldrh	r2, [r1, #12]
 8008be8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008bec:	d032      	beq.n	8008c54 <__ssputs_r+0x80>
 8008bee:	6825      	ldr	r5, [r4, #0]
 8008bf0:	6909      	ldr	r1, [r1, #16]
 8008bf2:	eba5 0901 	sub.w	r9, r5, r1
 8008bf6:	6965      	ldr	r5, [r4, #20]
 8008bf8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008bfc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c00:	3301      	adds	r3, #1
 8008c02:	444b      	add	r3, r9
 8008c04:	106d      	asrs	r5, r5, #1
 8008c06:	429d      	cmp	r5, r3
 8008c08:	bf38      	it	cc
 8008c0a:	461d      	movcc	r5, r3
 8008c0c:	0553      	lsls	r3, r2, #21
 8008c0e:	d531      	bpl.n	8008c74 <__ssputs_r+0xa0>
 8008c10:	4629      	mov	r1, r5
 8008c12:	f000 fb39 	bl	8009288 <_malloc_r>
 8008c16:	4606      	mov	r6, r0
 8008c18:	b950      	cbnz	r0, 8008c30 <__ssputs_r+0x5c>
 8008c1a:	230c      	movs	r3, #12
 8008c1c:	f8ca 3000 	str.w	r3, [sl]
 8008c20:	89a3      	ldrh	r3, [r4, #12]
 8008c22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c26:	81a3      	strh	r3, [r4, #12]
 8008c28:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c30:	6921      	ldr	r1, [r4, #16]
 8008c32:	464a      	mov	r2, r9
 8008c34:	f7ff ff84 	bl	8008b40 <memcpy>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	6126      	str	r6, [r4, #16]
 8008c46:	6165      	str	r5, [r4, #20]
 8008c48:	444e      	add	r6, r9
 8008c4a:	eba5 0509 	sub.w	r5, r5, r9
 8008c4e:	6026      	str	r6, [r4, #0]
 8008c50:	60a5      	str	r5, [r4, #8]
 8008c52:	463e      	mov	r6, r7
 8008c54:	42be      	cmp	r6, r7
 8008c56:	d900      	bls.n	8008c5a <__ssputs_r+0x86>
 8008c58:	463e      	mov	r6, r7
 8008c5a:	4632      	mov	r2, r6
 8008c5c:	6820      	ldr	r0, [r4, #0]
 8008c5e:	4641      	mov	r1, r8
 8008c60:	f000 faa8 	bl	80091b4 <memmove>
 8008c64:	68a3      	ldr	r3, [r4, #8]
 8008c66:	6822      	ldr	r2, [r4, #0]
 8008c68:	1b9b      	subs	r3, r3, r6
 8008c6a:	4432      	add	r2, r6
 8008c6c:	60a3      	str	r3, [r4, #8]
 8008c6e:	6022      	str	r2, [r4, #0]
 8008c70:	2000      	movs	r0, #0
 8008c72:	e7db      	b.n	8008c2c <__ssputs_r+0x58>
 8008c74:	462a      	mov	r2, r5
 8008c76:	f000 fb61 	bl	800933c <_realloc_r>
 8008c7a:	4606      	mov	r6, r0
 8008c7c:	2800      	cmp	r0, #0
 8008c7e:	d1e1      	bne.n	8008c44 <__ssputs_r+0x70>
 8008c80:	6921      	ldr	r1, [r4, #16]
 8008c82:	4650      	mov	r0, sl
 8008c84:	f000 fab0 	bl	80091e8 <_free_r>
 8008c88:	e7c7      	b.n	8008c1a <__ssputs_r+0x46>
	...

08008c8c <_svfiprintf_r>:
 8008c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c90:	4698      	mov	r8, r3
 8008c92:	898b      	ldrh	r3, [r1, #12]
 8008c94:	061b      	lsls	r3, r3, #24
 8008c96:	b09d      	sub	sp, #116	; 0x74
 8008c98:	4607      	mov	r7, r0
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	4614      	mov	r4, r2
 8008c9e:	d50e      	bpl.n	8008cbe <_svfiprintf_r+0x32>
 8008ca0:	690b      	ldr	r3, [r1, #16]
 8008ca2:	b963      	cbnz	r3, 8008cbe <_svfiprintf_r+0x32>
 8008ca4:	2140      	movs	r1, #64	; 0x40
 8008ca6:	f000 faef 	bl	8009288 <_malloc_r>
 8008caa:	6028      	str	r0, [r5, #0]
 8008cac:	6128      	str	r0, [r5, #16]
 8008cae:	b920      	cbnz	r0, 8008cba <_svfiprintf_r+0x2e>
 8008cb0:	230c      	movs	r3, #12
 8008cb2:	603b      	str	r3, [r7, #0]
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb8:	e0d1      	b.n	8008e5e <_svfiprintf_r+0x1d2>
 8008cba:	2340      	movs	r3, #64	; 0x40
 8008cbc:	616b      	str	r3, [r5, #20]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008cc2:	2320      	movs	r3, #32
 8008cc4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008cc8:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ccc:	2330      	movs	r3, #48	; 0x30
 8008cce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008e78 <_svfiprintf_r+0x1ec>
 8008cd2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008cd6:	f04f 0901 	mov.w	r9, #1
 8008cda:	4623      	mov	r3, r4
 8008cdc:	469a      	mov	sl, r3
 8008cde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ce2:	b10a      	cbz	r2, 8008ce8 <_svfiprintf_r+0x5c>
 8008ce4:	2a25      	cmp	r2, #37	; 0x25
 8008ce6:	d1f9      	bne.n	8008cdc <_svfiprintf_r+0x50>
 8008ce8:	ebba 0b04 	subs.w	fp, sl, r4
 8008cec:	d00b      	beq.n	8008d06 <_svfiprintf_r+0x7a>
 8008cee:	465b      	mov	r3, fp
 8008cf0:	4622      	mov	r2, r4
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	4638      	mov	r0, r7
 8008cf6:	f7ff ff6d 	bl	8008bd4 <__ssputs_r>
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	f000 80aa 	beq.w	8008e54 <_svfiprintf_r+0x1c8>
 8008d00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d02:	445a      	add	r2, fp
 8008d04:	9209      	str	r2, [sp, #36]	; 0x24
 8008d06:	f89a 3000 	ldrb.w	r3, [sl]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 80a2 	beq.w	8008e54 <_svfiprintf_r+0x1c8>
 8008d10:	2300      	movs	r3, #0
 8008d12:	f04f 32ff 	mov.w	r2, #4294967295
 8008d16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d1a:	f10a 0a01 	add.w	sl, sl, #1
 8008d1e:	9304      	str	r3, [sp, #16]
 8008d20:	9307      	str	r3, [sp, #28]
 8008d22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d26:	931a      	str	r3, [sp, #104]	; 0x68
 8008d28:	4654      	mov	r4, sl
 8008d2a:	2205      	movs	r2, #5
 8008d2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d30:	4851      	ldr	r0, [pc, #324]	; (8008e78 <_svfiprintf_r+0x1ec>)
 8008d32:	f7f7 fa55 	bl	80001e0 <memchr>
 8008d36:	9a04      	ldr	r2, [sp, #16]
 8008d38:	b9d8      	cbnz	r0, 8008d72 <_svfiprintf_r+0xe6>
 8008d3a:	06d0      	lsls	r0, r2, #27
 8008d3c:	bf44      	itt	mi
 8008d3e:	2320      	movmi	r3, #32
 8008d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d44:	0711      	lsls	r1, r2, #28
 8008d46:	bf44      	itt	mi
 8008d48:	232b      	movmi	r3, #43	; 0x2b
 8008d4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d52:	2b2a      	cmp	r3, #42	; 0x2a
 8008d54:	d015      	beq.n	8008d82 <_svfiprintf_r+0xf6>
 8008d56:	9a07      	ldr	r2, [sp, #28]
 8008d58:	4654      	mov	r4, sl
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	f04f 0c0a 	mov.w	ip, #10
 8008d60:	4621      	mov	r1, r4
 8008d62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d66:	3b30      	subs	r3, #48	; 0x30
 8008d68:	2b09      	cmp	r3, #9
 8008d6a:	d94e      	bls.n	8008e0a <_svfiprintf_r+0x17e>
 8008d6c:	b1b0      	cbz	r0, 8008d9c <_svfiprintf_r+0x110>
 8008d6e:	9207      	str	r2, [sp, #28]
 8008d70:	e014      	b.n	8008d9c <_svfiprintf_r+0x110>
 8008d72:	eba0 0308 	sub.w	r3, r0, r8
 8008d76:	fa09 f303 	lsl.w	r3, r9, r3
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	9304      	str	r3, [sp, #16]
 8008d7e:	46a2      	mov	sl, r4
 8008d80:	e7d2      	b.n	8008d28 <_svfiprintf_r+0x9c>
 8008d82:	9b03      	ldr	r3, [sp, #12]
 8008d84:	1d19      	adds	r1, r3, #4
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	9103      	str	r1, [sp, #12]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	bfbb      	ittet	lt
 8008d8e:	425b      	neglt	r3, r3
 8008d90:	f042 0202 	orrlt.w	r2, r2, #2
 8008d94:	9307      	strge	r3, [sp, #28]
 8008d96:	9307      	strlt	r3, [sp, #28]
 8008d98:	bfb8      	it	lt
 8008d9a:	9204      	strlt	r2, [sp, #16]
 8008d9c:	7823      	ldrb	r3, [r4, #0]
 8008d9e:	2b2e      	cmp	r3, #46	; 0x2e
 8008da0:	d10c      	bne.n	8008dbc <_svfiprintf_r+0x130>
 8008da2:	7863      	ldrb	r3, [r4, #1]
 8008da4:	2b2a      	cmp	r3, #42	; 0x2a
 8008da6:	d135      	bne.n	8008e14 <_svfiprintf_r+0x188>
 8008da8:	9b03      	ldr	r3, [sp, #12]
 8008daa:	1d1a      	adds	r2, r3, #4
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	9203      	str	r2, [sp, #12]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	bfb8      	it	lt
 8008db4:	f04f 33ff 	movlt.w	r3, #4294967295
 8008db8:	3402      	adds	r4, #2
 8008dba:	9305      	str	r3, [sp, #20]
 8008dbc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008e88 <_svfiprintf_r+0x1fc>
 8008dc0:	7821      	ldrb	r1, [r4, #0]
 8008dc2:	2203      	movs	r2, #3
 8008dc4:	4650      	mov	r0, sl
 8008dc6:	f7f7 fa0b 	bl	80001e0 <memchr>
 8008dca:	b140      	cbz	r0, 8008dde <_svfiprintf_r+0x152>
 8008dcc:	2340      	movs	r3, #64	; 0x40
 8008dce:	eba0 000a 	sub.w	r0, r0, sl
 8008dd2:	fa03 f000 	lsl.w	r0, r3, r0
 8008dd6:	9b04      	ldr	r3, [sp, #16]
 8008dd8:	4303      	orrs	r3, r0
 8008dda:	3401      	adds	r4, #1
 8008ddc:	9304      	str	r3, [sp, #16]
 8008dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008de2:	4826      	ldr	r0, [pc, #152]	; (8008e7c <_svfiprintf_r+0x1f0>)
 8008de4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008de8:	2206      	movs	r2, #6
 8008dea:	f7f7 f9f9 	bl	80001e0 <memchr>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d038      	beq.n	8008e64 <_svfiprintf_r+0x1d8>
 8008df2:	4b23      	ldr	r3, [pc, #140]	; (8008e80 <_svfiprintf_r+0x1f4>)
 8008df4:	bb1b      	cbnz	r3, 8008e3e <_svfiprintf_r+0x1b2>
 8008df6:	9b03      	ldr	r3, [sp, #12]
 8008df8:	3307      	adds	r3, #7
 8008dfa:	f023 0307 	bic.w	r3, r3, #7
 8008dfe:	3308      	adds	r3, #8
 8008e00:	9303      	str	r3, [sp, #12]
 8008e02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e04:	4433      	add	r3, r6
 8008e06:	9309      	str	r3, [sp, #36]	; 0x24
 8008e08:	e767      	b.n	8008cda <_svfiprintf_r+0x4e>
 8008e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e0e:	460c      	mov	r4, r1
 8008e10:	2001      	movs	r0, #1
 8008e12:	e7a5      	b.n	8008d60 <_svfiprintf_r+0xd4>
 8008e14:	2300      	movs	r3, #0
 8008e16:	3401      	adds	r4, #1
 8008e18:	9305      	str	r3, [sp, #20]
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	f04f 0c0a 	mov.w	ip, #10
 8008e20:	4620      	mov	r0, r4
 8008e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e26:	3a30      	subs	r2, #48	; 0x30
 8008e28:	2a09      	cmp	r2, #9
 8008e2a:	d903      	bls.n	8008e34 <_svfiprintf_r+0x1a8>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d0c5      	beq.n	8008dbc <_svfiprintf_r+0x130>
 8008e30:	9105      	str	r1, [sp, #20]
 8008e32:	e7c3      	b.n	8008dbc <_svfiprintf_r+0x130>
 8008e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e38:	4604      	mov	r4, r0
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	e7f0      	b.n	8008e20 <_svfiprintf_r+0x194>
 8008e3e:	ab03      	add	r3, sp, #12
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	462a      	mov	r2, r5
 8008e44:	4b0f      	ldr	r3, [pc, #60]	; (8008e84 <_svfiprintf_r+0x1f8>)
 8008e46:	a904      	add	r1, sp, #16
 8008e48:	4638      	mov	r0, r7
 8008e4a:	f3af 8000 	nop.w
 8008e4e:	1c42      	adds	r2, r0, #1
 8008e50:	4606      	mov	r6, r0
 8008e52:	d1d6      	bne.n	8008e02 <_svfiprintf_r+0x176>
 8008e54:	89ab      	ldrh	r3, [r5, #12]
 8008e56:	065b      	lsls	r3, r3, #25
 8008e58:	f53f af2c 	bmi.w	8008cb4 <_svfiprintf_r+0x28>
 8008e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008e5e:	b01d      	add	sp, #116	; 0x74
 8008e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e64:	ab03      	add	r3, sp, #12
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	462a      	mov	r2, r5
 8008e6a:	4b06      	ldr	r3, [pc, #24]	; (8008e84 <_svfiprintf_r+0x1f8>)
 8008e6c:	a904      	add	r1, sp, #16
 8008e6e:	4638      	mov	r0, r7
 8008e70:	f000 f87a 	bl	8008f68 <_printf_i>
 8008e74:	e7eb      	b.n	8008e4e <_svfiprintf_r+0x1c2>
 8008e76:	bf00      	nop
 8008e78:	0800980c 	.word	0x0800980c
 8008e7c:	08009816 	.word	0x08009816
 8008e80:	00000000 	.word	0x00000000
 8008e84:	08008bd5 	.word	0x08008bd5
 8008e88:	08009812 	.word	0x08009812

08008e8c <_printf_common>:
 8008e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e90:	4616      	mov	r6, r2
 8008e92:	4699      	mov	r9, r3
 8008e94:	688a      	ldr	r2, [r1, #8]
 8008e96:	690b      	ldr	r3, [r1, #16]
 8008e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	bfb8      	it	lt
 8008ea0:	4613      	movlt	r3, r2
 8008ea2:	6033      	str	r3, [r6, #0]
 8008ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ea8:	4607      	mov	r7, r0
 8008eaa:	460c      	mov	r4, r1
 8008eac:	b10a      	cbz	r2, 8008eb2 <_printf_common+0x26>
 8008eae:	3301      	adds	r3, #1
 8008eb0:	6033      	str	r3, [r6, #0]
 8008eb2:	6823      	ldr	r3, [r4, #0]
 8008eb4:	0699      	lsls	r1, r3, #26
 8008eb6:	bf42      	ittt	mi
 8008eb8:	6833      	ldrmi	r3, [r6, #0]
 8008eba:	3302      	addmi	r3, #2
 8008ebc:	6033      	strmi	r3, [r6, #0]
 8008ebe:	6825      	ldr	r5, [r4, #0]
 8008ec0:	f015 0506 	ands.w	r5, r5, #6
 8008ec4:	d106      	bne.n	8008ed4 <_printf_common+0x48>
 8008ec6:	f104 0a19 	add.w	sl, r4, #25
 8008eca:	68e3      	ldr	r3, [r4, #12]
 8008ecc:	6832      	ldr	r2, [r6, #0]
 8008ece:	1a9b      	subs	r3, r3, r2
 8008ed0:	42ab      	cmp	r3, r5
 8008ed2:	dc26      	bgt.n	8008f22 <_printf_common+0x96>
 8008ed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ed8:	1e13      	subs	r3, r2, #0
 8008eda:	6822      	ldr	r2, [r4, #0]
 8008edc:	bf18      	it	ne
 8008ede:	2301      	movne	r3, #1
 8008ee0:	0692      	lsls	r2, r2, #26
 8008ee2:	d42b      	bmi.n	8008f3c <_printf_common+0xb0>
 8008ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ee8:	4649      	mov	r1, r9
 8008eea:	4638      	mov	r0, r7
 8008eec:	47c0      	blx	r8
 8008eee:	3001      	adds	r0, #1
 8008ef0:	d01e      	beq.n	8008f30 <_printf_common+0xa4>
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	68e5      	ldr	r5, [r4, #12]
 8008ef6:	6832      	ldr	r2, [r6, #0]
 8008ef8:	f003 0306 	and.w	r3, r3, #6
 8008efc:	2b04      	cmp	r3, #4
 8008efe:	bf08      	it	eq
 8008f00:	1aad      	subeq	r5, r5, r2
 8008f02:	68a3      	ldr	r3, [r4, #8]
 8008f04:	6922      	ldr	r2, [r4, #16]
 8008f06:	bf0c      	ite	eq
 8008f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f0c:	2500      	movne	r5, #0
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	bfc4      	itt	gt
 8008f12:	1a9b      	subgt	r3, r3, r2
 8008f14:	18ed      	addgt	r5, r5, r3
 8008f16:	2600      	movs	r6, #0
 8008f18:	341a      	adds	r4, #26
 8008f1a:	42b5      	cmp	r5, r6
 8008f1c:	d11a      	bne.n	8008f54 <_printf_common+0xc8>
 8008f1e:	2000      	movs	r0, #0
 8008f20:	e008      	b.n	8008f34 <_printf_common+0xa8>
 8008f22:	2301      	movs	r3, #1
 8008f24:	4652      	mov	r2, sl
 8008f26:	4649      	mov	r1, r9
 8008f28:	4638      	mov	r0, r7
 8008f2a:	47c0      	blx	r8
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d103      	bne.n	8008f38 <_printf_common+0xac>
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295
 8008f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f38:	3501      	adds	r5, #1
 8008f3a:	e7c6      	b.n	8008eca <_printf_common+0x3e>
 8008f3c:	18e1      	adds	r1, r4, r3
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	2030      	movs	r0, #48	; 0x30
 8008f42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008f46:	4422      	add	r2, r4
 8008f48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008f4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008f50:	3302      	adds	r3, #2
 8008f52:	e7c7      	b.n	8008ee4 <_printf_common+0x58>
 8008f54:	2301      	movs	r3, #1
 8008f56:	4622      	mov	r2, r4
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	47c0      	blx	r8
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d0e6      	beq.n	8008f30 <_printf_common+0xa4>
 8008f62:	3601      	adds	r6, #1
 8008f64:	e7d9      	b.n	8008f1a <_printf_common+0x8e>
	...

08008f68 <_printf_i>:
 8008f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f6c:	460c      	mov	r4, r1
 8008f6e:	4691      	mov	r9, r2
 8008f70:	7e27      	ldrb	r7, [r4, #24]
 8008f72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008f74:	2f78      	cmp	r7, #120	; 0x78
 8008f76:	4680      	mov	r8, r0
 8008f78:	469a      	mov	sl, r3
 8008f7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f7e:	d807      	bhi.n	8008f90 <_printf_i+0x28>
 8008f80:	2f62      	cmp	r7, #98	; 0x62
 8008f82:	d80a      	bhi.n	8008f9a <_printf_i+0x32>
 8008f84:	2f00      	cmp	r7, #0
 8008f86:	f000 80d8 	beq.w	800913a <_printf_i+0x1d2>
 8008f8a:	2f58      	cmp	r7, #88	; 0x58
 8008f8c:	f000 80a3 	beq.w	80090d6 <_printf_i+0x16e>
 8008f90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008f98:	e03a      	b.n	8009010 <_printf_i+0xa8>
 8008f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008f9e:	2b15      	cmp	r3, #21
 8008fa0:	d8f6      	bhi.n	8008f90 <_printf_i+0x28>
 8008fa2:	a001      	add	r0, pc, #4	; (adr r0, 8008fa8 <_printf_i+0x40>)
 8008fa4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008fa8:	08009001 	.word	0x08009001
 8008fac:	08009015 	.word	0x08009015
 8008fb0:	08008f91 	.word	0x08008f91
 8008fb4:	08008f91 	.word	0x08008f91
 8008fb8:	08008f91 	.word	0x08008f91
 8008fbc:	08008f91 	.word	0x08008f91
 8008fc0:	08009015 	.word	0x08009015
 8008fc4:	08008f91 	.word	0x08008f91
 8008fc8:	08008f91 	.word	0x08008f91
 8008fcc:	08008f91 	.word	0x08008f91
 8008fd0:	08008f91 	.word	0x08008f91
 8008fd4:	08009121 	.word	0x08009121
 8008fd8:	08009045 	.word	0x08009045
 8008fdc:	08009103 	.word	0x08009103
 8008fe0:	08008f91 	.word	0x08008f91
 8008fe4:	08008f91 	.word	0x08008f91
 8008fe8:	08009143 	.word	0x08009143
 8008fec:	08008f91 	.word	0x08008f91
 8008ff0:	08009045 	.word	0x08009045
 8008ff4:	08008f91 	.word	0x08008f91
 8008ff8:	08008f91 	.word	0x08008f91
 8008ffc:	0800910b 	.word	0x0800910b
 8009000:	680b      	ldr	r3, [r1, #0]
 8009002:	1d1a      	adds	r2, r3, #4
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	600a      	str	r2, [r1, #0]
 8009008:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800900c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009010:	2301      	movs	r3, #1
 8009012:	e0a3      	b.n	800915c <_printf_i+0x1f4>
 8009014:	6825      	ldr	r5, [r4, #0]
 8009016:	6808      	ldr	r0, [r1, #0]
 8009018:	062e      	lsls	r6, r5, #24
 800901a:	f100 0304 	add.w	r3, r0, #4
 800901e:	d50a      	bpl.n	8009036 <_printf_i+0xce>
 8009020:	6805      	ldr	r5, [r0, #0]
 8009022:	600b      	str	r3, [r1, #0]
 8009024:	2d00      	cmp	r5, #0
 8009026:	da03      	bge.n	8009030 <_printf_i+0xc8>
 8009028:	232d      	movs	r3, #45	; 0x2d
 800902a:	426d      	negs	r5, r5
 800902c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009030:	485e      	ldr	r0, [pc, #376]	; (80091ac <_printf_i+0x244>)
 8009032:	230a      	movs	r3, #10
 8009034:	e019      	b.n	800906a <_printf_i+0x102>
 8009036:	f015 0f40 	tst.w	r5, #64	; 0x40
 800903a:	6805      	ldr	r5, [r0, #0]
 800903c:	600b      	str	r3, [r1, #0]
 800903e:	bf18      	it	ne
 8009040:	b22d      	sxthne	r5, r5
 8009042:	e7ef      	b.n	8009024 <_printf_i+0xbc>
 8009044:	680b      	ldr	r3, [r1, #0]
 8009046:	6825      	ldr	r5, [r4, #0]
 8009048:	1d18      	adds	r0, r3, #4
 800904a:	6008      	str	r0, [r1, #0]
 800904c:	0628      	lsls	r0, r5, #24
 800904e:	d501      	bpl.n	8009054 <_printf_i+0xec>
 8009050:	681d      	ldr	r5, [r3, #0]
 8009052:	e002      	b.n	800905a <_printf_i+0xf2>
 8009054:	0669      	lsls	r1, r5, #25
 8009056:	d5fb      	bpl.n	8009050 <_printf_i+0xe8>
 8009058:	881d      	ldrh	r5, [r3, #0]
 800905a:	4854      	ldr	r0, [pc, #336]	; (80091ac <_printf_i+0x244>)
 800905c:	2f6f      	cmp	r7, #111	; 0x6f
 800905e:	bf0c      	ite	eq
 8009060:	2308      	moveq	r3, #8
 8009062:	230a      	movne	r3, #10
 8009064:	2100      	movs	r1, #0
 8009066:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800906a:	6866      	ldr	r6, [r4, #4]
 800906c:	60a6      	str	r6, [r4, #8]
 800906e:	2e00      	cmp	r6, #0
 8009070:	bfa2      	ittt	ge
 8009072:	6821      	ldrge	r1, [r4, #0]
 8009074:	f021 0104 	bicge.w	r1, r1, #4
 8009078:	6021      	strge	r1, [r4, #0]
 800907a:	b90d      	cbnz	r5, 8009080 <_printf_i+0x118>
 800907c:	2e00      	cmp	r6, #0
 800907e:	d04d      	beq.n	800911c <_printf_i+0x1b4>
 8009080:	4616      	mov	r6, r2
 8009082:	fbb5 f1f3 	udiv	r1, r5, r3
 8009086:	fb03 5711 	mls	r7, r3, r1, r5
 800908a:	5dc7      	ldrb	r7, [r0, r7]
 800908c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009090:	462f      	mov	r7, r5
 8009092:	42bb      	cmp	r3, r7
 8009094:	460d      	mov	r5, r1
 8009096:	d9f4      	bls.n	8009082 <_printf_i+0x11a>
 8009098:	2b08      	cmp	r3, #8
 800909a:	d10b      	bne.n	80090b4 <_printf_i+0x14c>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	07df      	lsls	r7, r3, #31
 80090a0:	d508      	bpl.n	80090b4 <_printf_i+0x14c>
 80090a2:	6923      	ldr	r3, [r4, #16]
 80090a4:	6861      	ldr	r1, [r4, #4]
 80090a6:	4299      	cmp	r1, r3
 80090a8:	bfde      	ittt	le
 80090aa:	2330      	movle	r3, #48	; 0x30
 80090ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090b4:	1b92      	subs	r2, r2, r6
 80090b6:	6122      	str	r2, [r4, #16]
 80090b8:	f8cd a000 	str.w	sl, [sp]
 80090bc:	464b      	mov	r3, r9
 80090be:	aa03      	add	r2, sp, #12
 80090c0:	4621      	mov	r1, r4
 80090c2:	4640      	mov	r0, r8
 80090c4:	f7ff fee2 	bl	8008e8c <_printf_common>
 80090c8:	3001      	adds	r0, #1
 80090ca:	d14c      	bne.n	8009166 <_printf_i+0x1fe>
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295
 80090d0:	b004      	add	sp, #16
 80090d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d6:	4835      	ldr	r0, [pc, #212]	; (80091ac <_printf_i+0x244>)
 80090d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80090dc:	6823      	ldr	r3, [r4, #0]
 80090de:	680e      	ldr	r6, [r1, #0]
 80090e0:	061f      	lsls	r7, r3, #24
 80090e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80090e6:	600e      	str	r6, [r1, #0]
 80090e8:	d514      	bpl.n	8009114 <_printf_i+0x1ac>
 80090ea:	07d9      	lsls	r1, r3, #31
 80090ec:	bf44      	itt	mi
 80090ee:	f043 0320 	orrmi.w	r3, r3, #32
 80090f2:	6023      	strmi	r3, [r4, #0]
 80090f4:	b91d      	cbnz	r5, 80090fe <_printf_i+0x196>
 80090f6:	6823      	ldr	r3, [r4, #0]
 80090f8:	f023 0320 	bic.w	r3, r3, #32
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	2310      	movs	r3, #16
 8009100:	e7b0      	b.n	8009064 <_printf_i+0xfc>
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	f043 0320 	orr.w	r3, r3, #32
 8009108:	6023      	str	r3, [r4, #0]
 800910a:	2378      	movs	r3, #120	; 0x78
 800910c:	4828      	ldr	r0, [pc, #160]	; (80091b0 <_printf_i+0x248>)
 800910e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009112:	e7e3      	b.n	80090dc <_printf_i+0x174>
 8009114:	065e      	lsls	r6, r3, #25
 8009116:	bf48      	it	mi
 8009118:	b2ad      	uxthmi	r5, r5
 800911a:	e7e6      	b.n	80090ea <_printf_i+0x182>
 800911c:	4616      	mov	r6, r2
 800911e:	e7bb      	b.n	8009098 <_printf_i+0x130>
 8009120:	680b      	ldr	r3, [r1, #0]
 8009122:	6826      	ldr	r6, [r4, #0]
 8009124:	6960      	ldr	r0, [r4, #20]
 8009126:	1d1d      	adds	r5, r3, #4
 8009128:	600d      	str	r5, [r1, #0]
 800912a:	0635      	lsls	r5, r6, #24
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	d501      	bpl.n	8009134 <_printf_i+0x1cc>
 8009130:	6018      	str	r0, [r3, #0]
 8009132:	e002      	b.n	800913a <_printf_i+0x1d2>
 8009134:	0671      	lsls	r1, r6, #25
 8009136:	d5fb      	bpl.n	8009130 <_printf_i+0x1c8>
 8009138:	8018      	strh	r0, [r3, #0]
 800913a:	2300      	movs	r3, #0
 800913c:	6123      	str	r3, [r4, #16]
 800913e:	4616      	mov	r6, r2
 8009140:	e7ba      	b.n	80090b8 <_printf_i+0x150>
 8009142:	680b      	ldr	r3, [r1, #0]
 8009144:	1d1a      	adds	r2, r3, #4
 8009146:	600a      	str	r2, [r1, #0]
 8009148:	681e      	ldr	r6, [r3, #0]
 800914a:	6862      	ldr	r2, [r4, #4]
 800914c:	2100      	movs	r1, #0
 800914e:	4630      	mov	r0, r6
 8009150:	f7f7 f846 	bl	80001e0 <memchr>
 8009154:	b108      	cbz	r0, 800915a <_printf_i+0x1f2>
 8009156:	1b80      	subs	r0, r0, r6
 8009158:	6060      	str	r0, [r4, #4]
 800915a:	6863      	ldr	r3, [r4, #4]
 800915c:	6123      	str	r3, [r4, #16]
 800915e:	2300      	movs	r3, #0
 8009160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009164:	e7a8      	b.n	80090b8 <_printf_i+0x150>
 8009166:	6923      	ldr	r3, [r4, #16]
 8009168:	4632      	mov	r2, r6
 800916a:	4649      	mov	r1, r9
 800916c:	4640      	mov	r0, r8
 800916e:	47d0      	blx	sl
 8009170:	3001      	adds	r0, #1
 8009172:	d0ab      	beq.n	80090cc <_printf_i+0x164>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	079b      	lsls	r3, r3, #30
 8009178:	d413      	bmi.n	80091a2 <_printf_i+0x23a>
 800917a:	68e0      	ldr	r0, [r4, #12]
 800917c:	9b03      	ldr	r3, [sp, #12]
 800917e:	4298      	cmp	r0, r3
 8009180:	bfb8      	it	lt
 8009182:	4618      	movlt	r0, r3
 8009184:	e7a4      	b.n	80090d0 <_printf_i+0x168>
 8009186:	2301      	movs	r3, #1
 8009188:	4632      	mov	r2, r6
 800918a:	4649      	mov	r1, r9
 800918c:	4640      	mov	r0, r8
 800918e:	47d0      	blx	sl
 8009190:	3001      	adds	r0, #1
 8009192:	d09b      	beq.n	80090cc <_printf_i+0x164>
 8009194:	3501      	adds	r5, #1
 8009196:	68e3      	ldr	r3, [r4, #12]
 8009198:	9903      	ldr	r1, [sp, #12]
 800919a:	1a5b      	subs	r3, r3, r1
 800919c:	42ab      	cmp	r3, r5
 800919e:	dcf2      	bgt.n	8009186 <_printf_i+0x21e>
 80091a0:	e7eb      	b.n	800917a <_printf_i+0x212>
 80091a2:	2500      	movs	r5, #0
 80091a4:	f104 0619 	add.w	r6, r4, #25
 80091a8:	e7f5      	b.n	8009196 <_printf_i+0x22e>
 80091aa:	bf00      	nop
 80091ac:	0800981d 	.word	0x0800981d
 80091b0:	0800982e 	.word	0x0800982e

080091b4 <memmove>:
 80091b4:	4288      	cmp	r0, r1
 80091b6:	b510      	push	{r4, lr}
 80091b8:	eb01 0402 	add.w	r4, r1, r2
 80091bc:	d902      	bls.n	80091c4 <memmove+0x10>
 80091be:	4284      	cmp	r4, r0
 80091c0:	4623      	mov	r3, r4
 80091c2:	d807      	bhi.n	80091d4 <memmove+0x20>
 80091c4:	1e43      	subs	r3, r0, #1
 80091c6:	42a1      	cmp	r1, r4
 80091c8:	d008      	beq.n	80091dc <memmove+0x28>
 80091ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091d2:	e7f8      	b.n	80091c6 <memmove+0x12>
 80091d4:	4402      	add	r2, r0
 80091d6:	4601      	mov	r1, r0
 80091d8:	428a      	cmp	r2, r1
 80091da:	d100      	bne.n	80091de <memmove+0x2a>
 80091dc:	bd10      	pop	{r4, pc}
 80091de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80091e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80091e6:	e7f7      	b.n	80091d8 <memmove+0x24>

080091e8 <_free_r>:
 80091e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ea:	2900      	cmp	r1, #0
 80091ec:	d048      	beq.n	8009280 <_free_r+0x98>
 80091ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f2:	9001      	str	r0, [sp, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	f1a1 0404 	sub.w	r4, r1, #4
 80091fa:	bfb8      	it	lt
 80091fc:	18e4      	addlt	r4, r4, r3
 80091fe:	f000 f8d3 	bl	80093a8 <__malloc_lock>
 8009202:	4a20      	ldr	r2, [pc, #128]	; (8009284 <_free_r+0x9c>)
 8009204:	9801      	ldr	r0, [sp, #4]
 8009206:	6813      	ldr	r3, [r2, #0]
 8009208:	4615      	mov	r5, r2
 800920a:	b933      	cbnz	r3, 800921a <_free_r+0x32>
 800920c:	6063      	str	r3, [r4, #4]
 800920e:	6014      	str	r4, [r2, #0]
 8009210:	b003      	add	sp, #12
 8009212:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009216:	f000 b8cd 	b.w	80093b4 <__malloc_unlock>
 800921a:	42a3      	cmp	r3, r4
 800921c:	d90b      	bls.n	8009236 <_free_r+0x4e>
 800921e:	6821      	ldr	r1, [r4, #0]
 8009220:	1862      	adds	r2, r4, r1
 8009222:	4293      	cmp	r3, r2
 8009224:	bf04      	itt	eq
 8009226:	681a      	ldreq	r2, [r3, #0]
 8009228:	685b      	ldreq	r3, [r3, #4]
 800922a:	6063      	str	r3, [r4, #4]
 800922c:	bf04      	itt	eq
 800922e:	1852      	addeq	r2, r2, r1
 8009230:	6022      	streq	r2, [r4, #0]
 8009232:	602c      	str	r4, [r5, #0]
 8009234:	e7ec      	b.n	8009210 <_free_r+0x28>
 8009236:	461a      	mov	r2, r3
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	b10b      	cbz	r3, 8009240 <_free_r+0x58>
 800923c:	42a3      	cmp	r3, r4
 800923e:	d9fa      	bls.n	8009236 <_free_r+0x4e>
 8009240:	6811      	ldr	r1, [r2, #0]
 8009242:	1855      	adds	r5, r2, r1
 8009244:	42a5      	cmp	r5, r4
 8009246:	d10b      	bne.n	8009260 <_free_r+0x78>
 8009248:	6824      	ldr	r4, [r4, #0]
 800924a:	4421      	add	r1, r4
 800924c:	1854      	adds	r4, r2, r1
 800924e:	42a3      	cmp	r3, r4
 8009250:	6011      	str	r1, [r2, #0]
 8009252:	d1dd      	bne.n	8009210 <_free_r+0x28>
 8009254:	681c      	ldr	r4, [r3, #0]
 8009256:	685b      	ldr	r3, [r3, #4]
 8009258:	6053      	str	r3, [r2, #4]
 800925a:	4421      	add	r1, r4
 800925c:	6011      	str	r1, [r2, #0]
 800925e:	e7d7      	b.n	8009210 <_free_r+0x28>
 8009260:	d902      	bls.n	8009268 <_free_r+0x80>
 8009262:	230c      	movs	r3, #12
 8009264:	6003      	str	r3, [r0, #0]
 8009266:	e7d3      	b.n	8009210 <_free_r+0x28>
 8009268:	6825      	ldr	r5, [r4, #0]
 800926a:	1961      	adds	r1, r4, r5
 800926c:	428b      	cmp	r3, r1
 800926e:	bf04      	itt	eq
 8009270:	6819      	ldreq	r1, [r3, #0]
 8009272:	685b      	ldreq	r3, [r3, #4]
 8009274:	6063      	str	r3, [r4, #4]
 8009276:	bf04      	itt	eq
 8009278:	1949      	addeq	r1, r1, r5
 800927a:	6021      	streq	r1, [r4, #0]
 800927c:	6054      	str	r4, [r2, #4]
 800927e:	e7c7      	b.n	8009210 <_free_r+0x28>
 8009280:	b003      	add	sp, #12
 8009282:	bd30      	pop	{r4, r5, pc}
 8009284:	2000250c 	.word	0x2000250c

08009288 <_malloc_r>:
 8009288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800928a:	1ccd      	adds	r5, r1, #3
 800928c:	f025 0503 	bic.w	r5, r5, #3
 8009290:	3508      	adds	r5, #8
 8009292:	2d0c      	cmp	r5, #12
 8009294:	bf38      	it	cc
 8009296:	250c      	movcc	r5, #12
 8009298:	2d00      	cmp	r5, #0
 800929a:	4606      	mov	r6, r0
 800929c:	db01      	blt.n	80092a2 <_malloc_r+0x1a>
 800929e:	42a9      	cmp	r1, r5
 80092a0:	d903      	bls.n	80092aa <_malloc_r+0x22>
 80092a2:	230c      	movs	r3, #12
 80092a4:	6033      	str	r3, [r6, #0]
 80092a6:	2000      	movs	r0, #0
 80092a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092aa:	f000 f87d 	bl	80093a8 <__malloc_lock>
 80092ae:	4921      	ldr	r1, [pc, #132]	; (8009334 <_malloc_r+0xac>)
 80092b0:	680a      	ldr	r2, [r1, #0]
 80092b2:	4614      	mov	r4, r2
 80092b4:	b99c      	cbnz	r4, 80092de <_malloc_r+0x56>
 80092b6:	4f20      	ldr	r7, [pc, #128]	; (8009338 <_malloc_r+0xb0>)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	b923      	cbnz	r3, 80092c6 <_malloc_r+0x3e>
 80092bc:	4621      	mov	r1, r4
 80092be:	4630      	mov	r0, r6
 80092c0:	f000 f862 	bl	8009388 <_sbrk_r>
 80092c4:	6038      	str	r0, [r7, #0]
 80092c6:	4629      	mov	r1, r5
 80092c8:	4630      	mov	r0, r6
 80092ca:	f000 f85d 	bl	8009388 <_sbrk_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	d123      	bne.n	800931a <_malloc_r+0x92>
 80092d2:	230c      	movs	r3, #12
 80092d4:	6033      	str	r3, [r6, #0]
 80092d6:	4630      	mov	r0, r6
 80092d8:	f000 f86c 	bl	80093b4 <__malloc_unlock>
 80092dc:	e7e3      	b.n	80092a6 <_malloc_r+0x1e>
 80092de:	6823      	ldr	r3, [r4, #0]
 80092e0:	1b5b      	subs	r3, r3, r5
 80092e2:	d417      	bmi.n	8009314 <_malloc_r+0x8c>
 80092e4:	2b0b      	cmp	r3, #11
 80092e6:	d903      	bls.n	80092f0 <_malloc_r+0x68>
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	441c      	add	r4, r3
 80092ec:	6025      	str	r5, [r4, #0]
 80092ee:	e004      	b.n	80092fa <_malloc_r+0x72>
 80092f0:	6863      	ldr	r3, [r4, #4]
 80092f2:	42a2      	cmp	r2, r4
 80092f4:	bf0c      	ite	eq
 80092f6:	600b      	streq	r3, [r1, #0]
 80092f8:	6053      	strne	r3, [r2, #4]
 80092fa:	4630      	mov	r0, r6
 80092fc:	f000 f85a 	bl	80093b4 <__malloc_unlock>
 8009300:	f104 000b 	add.w	r0, r4, #11
 8009304:	1d23      	adds	r3, r4, #4
 8009306:	f020 0007 	bic.w	r0, r0, #7
 800930a:	1ac2      	subs	r2, r0, r3
 800930c:	d0cc      	beq.n	80092a8 <_malloc_r+0x20>
 800930e:	1a1b      	subs	r3, r3, r0
 8009310:	50a3      	str	r3, [r4, r2]
 8009312:	e7c9      	b.n	80092a8 <_malloc_r+0x20>
 8009314:	4622      	mov	r2, r4
 8009316:	6864      	ldr	r4, [r4, #4]
 8009318:	e7cc      	b.n	80092b4 <_malloc_r+0x2c>
 800931a:	1cc4      	adds	r4, r0, #3
 800931c:	f024 0403 	bic.w	r4, r4, #3
 8009320:	42a0      	cmp	r0, r4
 8009322:	d0e3      	beq.n	80092ec <_malloc_r+0x64>
 8009324:	1a21      	subs	r1, r4, r0
 8009326:	4630      	mov	r0, r6
 8009328:	f000 f82e 	bl	8009388 <_sbrk_r>
 800932c:	3001      	adds	r0, #1
 800932e:	d1dd      	bne.n	80092ec <_malloc_r+0x64>
 8009330:	e7cf      	b.n	80092d2 <_malloc_r+0x4a>
 8009332:	bf00      	nop
 8009334:	2000250c 	.word	0x2000250c
 8009338:	20002510 	.word	0x20002510

0800933c <_realloc_r>:
 800933c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800933e:	4607      	mov	r7, r0
 8009340:	4614      	mov	r4, r2
 8009342:	460e      	mov	r6, r1
 8009344:	b921      	cbnz	r1, 8009350 <_realloc_r+0x14>
 8009346:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800934a:	4611      	mov	r1, r2
 800934c:	f7ff bf9c 	b.w	8009288 <_malloc_r>
 8009350:	b922      	cbnz	r2, 800935c <_realloc_r+0x20>
 8009352:	f7ff ff49 	bl	80091e8 <_free_r>
 8009356:	4625      	mov	r5, r4
 8009358:	4628      	mov	r0, r5
 800935a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800935c:	f000 f830 	bl	80093c0 <_malloc_usable_size_r>
 8009360:	42a0      	cmp	r0, r4
 8009362:	d20f      	bcs.n	8009384 <_realloc_r+0x48>
 8009364:	4621      	mov	r1, r4
 8009366:	4638      	mov	r0, r7
 8009368:	f7ff ff8e 	bl	8009288 <_malloc_r>
 800936c:	4605      	mov	r5, r0
 800936e:	2800      	cmp	r0, #0
 8009370:	d0f2      	beq.n	8009358 <_realloc_r+0x1c>
 8009372:	4631      	mov	r1, r6
 8009374:	4622      	mov	r2, r4
 8009376:	f7ff fbe3 	bl	8008b40 <memcpy>
 800937a:	4631      	mov	r1, r6
 800937c:	4638      	mov	r0, r7
 800937e:	f7ff ff33 	bl	80091e8 <_free_r>
 8009382:	e7e9      	b.n	8009358 <_realloc_r+0x1c>
 8009384:	4635      	mov	r5, r6
 8009386:	e7e7      	b.n	8009358 <_realloc_r+0x1c>

08009388 <_sbrk_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	; (80093a4 <_sbrk_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f8 f99e 	bl	80016d4 <_sbrk>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_sbrk_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_sbrk_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	200027b0 	.word	0x200027b0

080093a8 <__malloc_lock>:
 80093a8:	4801      	ldr	r0, [pc, #4]	; (80093b0 <__malloc_lock+0x8>)
 80093aa:	f000 b811 	b.w	80093d0 <__retarget_lock_acquire_recursive>
 80093ae:	bf00      	nop
 80093b0:	200027b8 	.word	0x200027b8

080093b4 <__malloc_unlock>:
 80093b4:	4801      	ldr	r0, [pc, #4]	; (80093bc <__malloc_unlock+0x8>)
 80093b6:	f000 b80c 	b.w	80093d2 <__retarget_lock_release_recursive>
 80093ba:	bf00      	nop
 80093bc:	200027b8 	.word	0x200027b8

080093c0 <_malloc_usable_size_r>:
 80093c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093c4:	1f18      	subs	r0, r3, #4
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	bfbc      	itt	lt
 80093ca:	580b      	ldrlt	r3, [r1, r0]
 80093cc:	18c0      	addlt	r0, r0, r3
 80093ce:	4770      	bx	lr

080093d0 <__retarget_lock_acquire_recursive>:
 80093d0:	4770      	bx	lr

080093d2 <__retarget_lock_release_recursive>:
 80093d2:	4770      	bx	lr

080093d4 <_init>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr

080093e0 <_fini>:
 80093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e2:	bf00      	nop
 80093e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093e6:	bc08      	pop	{r3}
 80093e8:	469e      	mov	lr, r3
 80093ea:	4770      	bx	lr
